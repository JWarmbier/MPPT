
MPPT-V_1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004984  08004984  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800498c  0800498c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000000c  080049a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  080049a0  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7a4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002364  00000000  00000000  0002e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  00030b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  000318e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021672  00000000  00000000  00032550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb1b  00000000  00000000  00053bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca963  00000000  00000000  0005f6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a040  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003730  00000000  00000000  0012a0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004954 	.word	0x08004954

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004954 	.word	0x08004954

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f001 f897 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f003 fcb8 	bl	8003e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f001 f8af 	bl	800168e <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000548:	f001 f877 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e033      	b.n	800066e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f003 f8f6 	bl	8003800 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	2b00      	cmp	r3, #0
 800062c:	d118      	bne.n	8000660 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000636:	f023 0302 	bic.w	r3, r3, #2
 800063a:	f043 0202 	orr.w	r2, r3, #2
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 fa4a 	bl	8000adc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0201 	orr.w	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	641a      	str	r2, [r3, #64]	; 0x40
 800065e:	e001      	b.n	8000664 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800068e:	2b01      	cmp	r3, #1
 8000690:	d101      	bne.n	8000696 <HAL_ADC_Start_DMA+0x1e>
 8000692:	2302      	movs	r3, #2
 8000694:	e0cc      	b.n	8000830 <HAL_ADC_Start_DMA+0x1b8>
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2201      	movs	r2, #1
 800069a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d018      	beq.n	80006de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0201 	orr.w	r2, r2, #1
 80006ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006bc:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <HAL_ADC_Start_DMA+0x1c0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a5e      	ldr	r2, [pc, #376]	; (800083c <HAL_ADC_Start_DMA+0x1c4>)
 80006c2:	fba2 2303 	umull	r2, r3, r2, r3
 80006c6:	0c9a      	lsrs	r2, r3, #18
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006d0:	e002      	b.n	80006d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f9      	bne.n	80006d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	f040 80a0 	bne.w	800082e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800070c:	2b00      	cmp	r3, #0
 800070e:	d007      	beq.n	8000720 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000718:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800072c:	d106      	bne.n	800073c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f023 0206 	bic.w	r2, r3, #6
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	645a      	str	r2, [r3, #68]	; 0x44
 800073a:	e002      	b.n	8000742 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2200      	movs	r2, #0
 8000746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <HAL_ADC_Start_DMA+0x1c8>)
 800074c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000752:	4a3c      	ldr	r2, [pc, #240]	; (8000844 <HAL_ADC_Start_DMA+0x1cc>)
 8000754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075a:	4a3b      	ldr	r2, [pc, #236]	; (8000848 <HAL_ADC_Start_DMA+0x1d0>)
 800075c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000762:	4a3a      	ldr	r2, [pc, #232]	; (800084c <HAL_ADC_Start_DMA+0x1d4>)
 8000764:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800076e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800077e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800078e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	334c      	adds	r3, #76	; 0x4c
 800079a:	4619      	mov	r1, r3
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f001 f830 	bl	8001804 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f003 031f 	and.w	r3, r3, #31
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d12a      	bne.n	8000806 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <HAL_ADC_Start_DMA+0x1d8>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d015      	beq.n	80007e6 <HAL_ADC_Start_DMA+0x16e>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a25      	ldr	r2, [pc, #148]	; (8000854 <HAL_ADC_Start_DMA+0x1dc>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d105      	bne.n	80007d0 <HAL_ADC_Start_DMA+0x158>
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <HAL_ADC_Start_DMA+0x1c8>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f003 031f 	and.w	r3, r3, #31
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00a      	beq.n	80007e6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a20      	ldr	r2, [pc, #128]	; (8000858 <HAL_ADC_Start_DMA+0x1e0>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d129      	bne.n	800082e <HAL_ADC_Start_DMA+0x1b6>
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_ADC_Start_DMA+0x1c8>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 031f 	and.w	r3, r3, #31
 80007e2:	2b0f      	cmp	r3, #15
 80007e4:	d823      	bhi.n	800082e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d11c      	bne.n	800082e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	e013      	b.n	800082e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <HAL_ADC_Start_DMA+0x1d8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d10e      	bne.n	800082e <HAL_ADC_Start_DMA+0x1b6>
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d107      	bne.n	800082e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800082c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000008 	.word	0x20000008
 800083c:	431bde83 	.word	0x431bde83
 8000840:	40012300 	.word	0x40012300
 8000844:	08000cd5 	.word	0x08000cd5
 8000848:	08000d8f 	.word	0x08000d8f
 800084c:	08000dab 	.word	0x08000dab
 8000850:	40012000 	.word	0x40012000
 8000854:	40012100 	.word	0x40012100
 8000858:	40012200 	.word	0x40012200

0800085c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <HAL_ADC_ConfigChannel+0x1c>
 80008b0:	2302      	movs	r3, #2
 80008b2:	e105      	b.n	8000ac0 <HAL_ADC_ConfigChannel+0x228>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2201      	movs	r2, #1
 80008b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b09      	cmp	r3, #9
 80008c2:	d925      	bls.n	8000910 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68d9      	ldr	r1, [r3, #12]
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	3b1e      	subs	r3, #30
 80008da:	2207      	movs	r2, #7
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43da      	mvns	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	400a      	ands	r2, r1
 80008e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68d9      	ldr	r1, [r3, #12]
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	4603      	mov	r3, r0
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4403      	add	r3, r0
 8000902:	3b1e      	subs	r3, #30
 8000904:	409a      	lsls	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	430a      	orrs	r2, r1
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	e022      	b.n	8000956 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6919      	ldr	r1, [r3, #16]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	b29b      	uxth	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	2207      	movs	r2, #7
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	400a      	ands	r2, r1
 8000932:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6919      	ldr	r1, [r3, #16]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	b29b      	uxth	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	4603      	mov	r3, r0
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4403      	add	r3, r0
 800094c:	409a      	lsls	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	430a      	orrs	r2, r1
 8000954:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b06      	cmp	r3, #6
 800095c:	d824      	bhi.n	80009a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	3b05      	subs	r3, #5
 8000970:	221f      	movs	r2, #31
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	400a      	ands	r2, r1
 800097e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	3b05      	subs	r3, #5
 800099a:	fa00 f203 	lsl.w	r2, r0, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	430a      	orrs	r2, r1
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
 80009a6:	e04c      	b.n	8000a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b0c      	cmp	r3, #12
 80009ae:	d824      	bhi.n	80009fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	3b23      	subs	r3, #35	; 0x23
 80009c2:	221f      	movs	r2, #31
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43da      	mvns	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	400a      	ands	r2, r1
 80009d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	4613      	mov	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	3b23      	subs	r3, #35	; 0x23
 80009ec:	fa00 f203 	lsl.w	r2, r0, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
 80009f8:	e023      	b.n	8000a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	4613      	mov	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	3b41      	subs	r3, #65	; 0x41
 8000a0c:	221f      	movs	r2, #31
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	400a      	ands	r2, r1
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	3b41      	subs	r3, #65	; 0x41
 8000a36:	fa00 f203 	lsl.w	r2, r0, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <HAL_ADC_ConfigChannel+0x234>)
 8000a44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <HAL_ADC_ConfigChannel+0x238>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d109      	bne.n	8000a64 <HAL_ADC_ConfigChannel+0x1cc>
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b12      	cmp	r3, #18
 8000a56:	d105      	bne.n	8000a64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_ADC_ConfigChannel+0x238>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d123      	bne.n	8000ab6 <HAL_ADC_ConfigChannel+0x21e>
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b10      	cmp	r3, #16
 8000a74:	d003      	beq.n	8000a7e <HAL_ADC_ConfigChannel+0x1e6>
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b11      	cmp	r3, #17
 8000a7c:	d11b      	bne.n	8000ab6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b10      	cmp	r3, #16
 8000a90:	d111      	bne.n	8000ab6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_ADC_ConfigChannel+0x23c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_ADC_ConfigChannel+0x240>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	0c9a      	lsrs	r2, r3, #18
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000aa8:	e002      	b.n	8000ab0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f9      	bne.n	8000aaa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40012300 	.word	0x40012300
 8000ad0:	40012000 	.word	0x40012000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	431bde83 	.word	0x431bde83

08000adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ae4:	4b79      	ldr	r3, [pc, #484]	; (8000ccc <ADC_Init+0x1f0>)
 8000ae6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	6859      	ldr	r1, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	021a      	lsls	r2, r3, #8
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6859      	ldr	r1, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	430a      	orrs	r2, r1
 8000b46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6899      	ldr	r1, [r3, #8]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6e:	4a58      	ldr	r2, [pc, #352]	; (8000cd0 <ADC_Init+0x1f4>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d022      	beq.n	8000bba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6899      	ldr	r1, [r3, #8]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	6899      	ldr	r1, [r3, #8]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	e00f      	b.n	8000bda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0202 	bic.w	r2, r2, #2
 8000be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6899      	ldr	r1, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7e1b      	ldrb	r3, [r3, #24]
 8000bf4:	005a      	lsls	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d01b      	beq.n	8000c40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6859      	ldr	r1, [r3, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c32:	3b01      	subs	r3, #1
 8000c34:	035a      	lsls	r2, r3, #13
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	e007      	b.n	8000c50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	051a      	lsls	r2, r3, #20
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6899      	ldr	r1, [r3, #8]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c92:	025a      	lsls	r2, r3, #9
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6899      	ldr	r1, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	029a      	lsls	r2, r3, #10
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	609a      	str	r2, [r3, #8]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40012300 	.word	0x40012300
 8000cd0:	0f000001 	.word	0x0f000001

08000cd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d13c      	bne.n	8000d68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d12b      	bne.n	8000d60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d127      	bne.n	8000d60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d006      	beq.n	8000d2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d119      	bne.n	8000d60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0220 	bic.w	r2, r2, #32
 8000d3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f7ff fd7b 	bl	800085c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000d66:	e00e      	b.n	8000d86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f7ff fd85 	bl	8000884 <HAL_ADC_ErrorCallback>
}
 8000d7a:	e004      	b.n	8000d86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	4798      	blx	r3
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fd67 	bl	8000870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f043 0204 	orr.w	r2, r3, #4
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fd5a 	bl	8000884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e0ed      	b.n	8000fc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f002 fdb2 	bl	8003960 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0202 	bic.w	r2, r2, #2
 8000e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e0c:	f7ff fbc2 	bl	8000594 <HAL_GetTick>
 8000e10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e12:	e012      	b.n	8000e3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e14:	f7ff fbbe 	bl	8000594 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	d90b      	bls.n	8000e3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2205      	movs	r2, #5
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e0c5      	b.n	8000fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e5      	bne.n	8000e14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0201 	orr.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e58:	f7ff fb9c 	bl	8000594 <HAL_GetTick>
 8000e5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e5e:	e012      	b.n	8000e86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e60:	f7ff fb98 	bl	8000594 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b0a      	cmp	r3, #10
 8000e6c:	d90b      	bls.n	8000e86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2205      	movs	r2, #5
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e09f      	b.n	8000fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0e5      	beq.n	8000e60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7e1b      	ldrb	r3, [r3, #24]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d108      	bne.n	8000eae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e007      	b.n	8000ebe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7e5b      	ldrb	r3, [r3, #25]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d108      	bne.n	8000ed8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e007      	b.n	8000ee8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7e9b      	ldrb	r3, [r3, #26]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d108      	bne.n	8000f02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0220 	orr.w	r2, r2, #32
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	e007      	b.n	8000f12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0220 	bic.w	r2, r2, #32
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7edb      	ldrb	r3, [r3, #27]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d108      	bne.n	8000f2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0210 	bic.w	r2, r2, #16
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e007      	b.n	8000f3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0210 	orr.w	r2, r2, #16
 8000f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7f1b      	ldrb	r3, [r3, #28]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0208 	orr.w	r2, r2, #8
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e007      	b.n	8000f66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0208 	bic.w	r2, r2, #8
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7f5b      	ldrb	r3, [r3, #29]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d108      	bne.n	8000f80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 0204 	orr.w	r2, r2, #4
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e007      	b.n	8000f90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0204 	bic.w	r2, r2, #4
 8000f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	ea42 0103 	orr.w	r1, r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	1e5a      	subs	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe8:	7cfb      	ldrb	r3, [r7, #19]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d003      	beq.n	8000ff6 <HAL_CAN_ConfigFilter+0x26>
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	f040 80be 	bne.w	8001172 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ff6:	4b65      	ldr	r3, [pc, #404]	; (800118c <HAL_CAN_ConfigFilter+0x1bc>)
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001000:	f043 0201 	orr.w	r2, r3, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001010:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	431a      	orrs	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2201      	movs	r2, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	401a      	ands	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d123      	bne.n	80010a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800107a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3248      	adds	r2, #72	; 0x48
 8001080:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001094:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001096:	6979      	ldr	r1, [r7, #20]
 8001098:	3348      	adds	r3, #72	; 0x48
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d122      	bne.n	80010ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3248      	adds	r2, #72	; 0x48
 80010ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010e4:	6979      	ldr	r1, [r7, #20]
 80010e6:	3348      	adds	r3, #72	; 0x48
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001108:	e007      	b.n	800111a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	431a      	orrs	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	401a      	ands	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001134:	e007      	b.n	8001146 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	431a      	orrs	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001164:	f023 0201 	bic.w	r2, r3, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e006      	b.n	8001180 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40006400 	.word	0x40006400

08001190 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d12e      	bne.n	8001202 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2202      	movs	r2, #2
 80011a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011bc:	f7ff f9ea 	bl	8000594 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011c2:	e012      	b.n	80011ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c4:	f7ff f9e6 	bl	8000594 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b0a      	cmp	r3, #10
 80011d0:	d90b      	bls.n	80011ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2205      	movs	r2, #5
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e012      	b.n	8001210 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e5      	bne.n	80011c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e006      	b.n	8001210 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
  }
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001236:	7ffb      	ldrb	r3, [r7, #31]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d003      	beq.n	8001244 <HAL_CAN_AddTxMessage+0x2c>
 800123c:	7ffb      	ldrb	r3, [r7, #31]
 800123e:	2b02      	cmp	r3, #2
 8001240:	f040 80b8 	bne.w	80013b4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10a      	bne.n	8001264 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80a0 	beq.w	80013a4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	0e1b      	lsrs	r3, r3, #24
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d907      	bls.n	8001284 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e09e      	b.n	80013c2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001284:	2201      	movs	r2, #1
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	409a      	lsls	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10d      	bne.n	80012b2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012a0:	68f9      	ldr	r1, [r7, #12]
 80012a2:	6809      	ldr	r1, [r1, #0]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3318      	adds	r3, #24
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	440b      	add	r3, r1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e00f      	b.n	80012d2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012bc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c2:	68f9      	ldr	r1, [r7, #12]
 80012c4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012c6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3318      	adds	r3, #24
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	440b      	add	r3, r1
 80012d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	691a      	ldr	r2, [r3, #16]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3318      	adds	r3, #24
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	440b      	add	r3, r1
 80012e2:	3304      	adds	r3, #4
 80012e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	7d1b      	ldrb	r3, [r3, #20]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d111      	bne.n	8001312 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3318      	adds	r3, #24
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	4413      	add	r3, r2
 80012fa:	3304      	adds	r3, #4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	6811      	ldr	r1, [r2, #0]
 8001302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3318      	adds	r3, #24
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	440b      	add	r3, r1
 800130e:	3304      	adds	r3, #4
 8001310:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3307      	adds	r3, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	061a      	lsls	r2, r3, #24
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3306      	adds	r3, #6
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	041b      	lsls	r3, r3, #16
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3305      	adds	r3, #5
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	4313      	orrs	r3, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	3204      	adds	r2, #4
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	4610      	mov	r0, r2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	6811      	ldr	r1, [r2, #0]
 800133a:	ea43 0200 	orr.w	r2, r3, r0
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	440b      	add	r3, r1
 8001344:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001348:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3303      	adds	r3, #3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	061a      	lsls	r2, r3, #24
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3302      	adds	r3, #2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3301      	adds	r3, #1
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	4313      	orrs	r3, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	4610      	mov	r0, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	6811      	ldr	r1, [r2, #0]
 8001370:	ea43 0200 	orr.w	r2, r3, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	440b      	add	r3, r1
 800137a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800137e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3318      	adds	r3, #24
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	6811      	ldr	r1, [r2, #0]
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3318      	adds	r3, #24
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	440b      	add	r3, r1
 800139e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e00e      	b.n	80013c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e006      	b.n	80013c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
  }
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d002      	beq.n	80013ee <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80013e8:	7afb      	ldrb	r3, [r7, #11]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d11d      	bne.n	800142a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3301      	adds	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3301      	adds	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001448:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d002      	beq.n	8001456 <HAL_CAN_ActivateNotification+0x1e>
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d109      	bne.n	800146a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6959      	ldr	r1, [r3, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e006      	b.n	8001478 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
  }
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	; (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001604:	f7ff ff8e 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff29 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff3e 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff8e 	bl	8001578 <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5d 	bl	8001524 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff31 	bl	80014e8 <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa2 	bl	80015e0 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7fe ff6e 	bl	8000594 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e099      	b.n	80017f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e4:	e00f      	b.n	8001706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e6:	f7fe ff55 	bl	8000594 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d908      	bls.n	8001706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2220      	movs	r2, #32
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2203      	movs	r2, #3
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e078      	b.n	80017f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e8      	bne.n	80016e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_DMA_Init+0x158>)
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2b04      	cmp	r3, #4
 800175e:	d107      	bne.n	8001770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4313      	orrs	r3, r2
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b04      	cmp	r3, #4
 8001798:	d117      	bne.n	80017ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00e      	beq.n	80017ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fa6f 	bl	8001c90 <DMA_CheckFifoParam>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017c6:	2301      	movs	r3, #1
 80017c8:	e016      	b.n	80017f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fa26 	bl	8001c24 <DMA_CalcBaseAndBitshift>
 80017d8:	4603      	mov	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	223f      	movs	r2, #63	; 0x3f
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	f010803f 	.word	0xf010803f

08001804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_DMA_Start_IT+0x26>
 8001826:	2302      	movs	r3, #2
 8001828:	e040      	b.n	80018ac <HAL_DMA_Start_IT+0xa8>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d12f      	bne.n	800189e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2202      	movs	r2, #2
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f9b8 	bl	8001bc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	223f      	movs	r2, #63	; 0x3f
 800185e:	409a      	lsls	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0216 	orr.w	r2, r2, #22
 8001872:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0208 	orr.w	r2, r2, #8
 800188a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e005      	b.n	80018aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018a6:	2302      	movs	r3, #2
 80018a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018c0:	4b92      	ldr	r3, [pc, #584]	; (8001b0c <HAL_DMA_IRQHandler+0x258>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a92      	ldr	r2, [pc, #584]	; (8001b10 <HAL_DMA_IRQHandler+0x25c>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0a9b      	lsrs	r3, r3, #10
 80018cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	2208      	movs	r2, #8
 80018e0:	409a      	lsls	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01a      	beq.n	8001920 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0204 	bic.w	r2, r2, #4
 8001906:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	2208      	movs	r2, #8
 800190e:	409a      	lsls	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	2201      	movs	r2, #1
 8001926:	409a      	lsls	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d012      	beq.n	8001956 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001942:	2201      	movs	r2, #1
 8001944:	409a      	lsls	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f043 0202 	orr.w	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	2204      	movs	r2, #4
 800195c:	409a      	lsls	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d012      	beq.n	800198c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00b      	beq.n	800198c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	2204      	movs	r2, #4
 800197a:	409a      	lsls	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f043 0204 	orr.w	r2, r3, #4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	2210      	movs	r2, #16
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d043      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d03c      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	2210      	movs	r2, #16
 80019b0:	409a      	lsls	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d018      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d108      	bne.n	80019e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d024      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	4798      	blx	r3
 80019e2:	e01f      	b.n	8001a24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01b      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4798      	blx	r3
 80019f4:	e016      	b.n	8001a24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0208 	bic.w	r2, r2, #8
 8001a12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	2220      	movs	r2, #32
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 808e 	beq.w	8001b52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8086 	beq.w	8001b52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d136      	bne.n	8001acc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0216 	bic.w	r2, r2, #22
 8001a6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d103      	bne.n	8001a8e <HAL_DMA_IRQHandler+0x1da>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0208 	bic.w	r2, r2, #8
 8001a9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	223f      	movs	r2, #63	; 0x3f
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d07d      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
        }
        return;
 8001aca:	e078      	b.n	8001bbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d01c      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d108      	bne.n	8001afa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d030      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
 8001af8:	e02b      	b.n	8001b52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d027      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
 8001b0a:	e022      	b.n	8001b52 <HAL_DMA_IRQHandler+0x29e>
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10f      	bne.n	8001b42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0210 	bic.w	r2, r2, #16
 8001b30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d032      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d022      	beq.n	8001bac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2205      	movs	r2, #5
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3301      	adds	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d307      	bcc.n	8001b9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f2      	bne.n	8001b7e <HAL_DMA_IRQHandler+0x2ca>
 8001b98:	e000      	b.n	8001b9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b9a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	e000      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bbe:	bf00      	nop
    }
  }
}
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop

08001bc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001be4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d108      	bne.n	8001c08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c06:	e007      	b.n	8001c18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	60da      	str	r2, [r3, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3b10      	subs	r3, #16
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <DMA_CalcBaseAndBitshift+0x64>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c3e:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <DMA_CalcBaseAndBitshift+0x68>)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d909      	bls.n	8001c66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c5a:	f023 0303 	bic.w	r3, r3, #3
 8001c5e:	1d1a      	adds	r2, r3, #4
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	659a      	str	r2, [r3, #88]	; 0x58
 8001c64:	e007      	b.n	8001c76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	aaaaaaab 	.word	0xaaaaaaab
 8001c8c:	0800496c 	.word	0x0800496c

08001c90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d11f      	bne.n	8001cea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d855      	bhi.n	8001d5c <DMA_CheckFifoParam+0xcc>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <DMA_CheckFifoParam+0x28>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001cc9 	.word	0x08001cc9
 8001cbc:	08001cdb 	.word	0x08001cdb
 8001cc0:	08001cc9 	.word	0x08001cc9
 8001cc4:	08001d5d 	.word	0x08001d5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d045      	beq.n	8001d60 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cd8:	e042      	b.n	8001d60 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ce2:	d13f      	bne.n	8001d64 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ce8:	e03c      	b.n	8001d64 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf2:	d121      	bne.n	8001d38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d836      	bhi.n	8001d68 <DMA_CheckFifoParam+0xd8>
 8001cfa:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <DMA_CheckFifoParam+0x70>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d17 	.word	0x08001d17
 8001d08:	08001d11 	.word	0x08001d11
 8001d0c:	08001d29 	.word	0x08001d29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
      break;
 8001d14:	e02f      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d024      	beq.n	8001d6c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d26:	e021      	b.n	8001d6c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d30:	d11e      	bne.n	8001d70 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d36:	e01b      	b.n	8001d70 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d902      	bls.n	8001d44 <DMA_CheckFifoParam+0xb4>
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d003      	beq.n	8001d4a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d42:	e018      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
      break;
 8001d48:	e015      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00e      	beq.n	8001d74 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
      break;
 8001d5a:	e00b      	b.n	8001d74 <DMA_CheckFifoParam+0xe4>
      break;
 8001d5c:	bf00      	nop
 8001d5e:	e00a      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
      break;
 8001d60:	bf00      	nop
 8001d62:	e008      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
      break;
 8001d64:	bf00      	nop
 8001d66:	e006      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
      break;
 8001d68:	bf00      	nop
 8001d6a:	e004      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
      break;
 8001d6c:	bf00      	nop
 8001d6e:	e002      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
      break;   
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
      break;
 8001d74:	bf00      	nop
    }
  } 
  
  return status; 
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e16b      	b.n	8002078 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001da0:	2201      	movs	r2, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f040 815a 	bne.w	8002072 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d00b      	beq.n	8001dde <HAL_GPIO_Init+0x5a>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d007      	beq.n	8001dde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dd2:	2b11      	cmp	r3, #17
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d130      	bne.n	8001e40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e14:	2201      	movs	r2, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 0201 	and.w	r2, r3, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0xfc>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b12      	cmp	r3, #18
 8001e7e:	d123      	bne.n	8001ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	08da      	lsrs	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3208      	adds	r2, #8
 8001ec2:	69b9      	ldr	r1, [r7, #24]
 8001ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0203 	and.w	r2, r3, #3
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80b4 	beq.w	8002072 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_GPIO_Init+0x308>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a5e      	ldr	r2, [pc, #376]	; (800208c <HAL_GPIO_Init+0x308>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_GPIO_Init+0x308>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f26:	4a5a      	ldr	r2, [pc, #360]	; (8002090 <HAL_GPIO_Init+0x30c>)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_GPIO_Init+0x310>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d02b      	beq.n	8001faa <HAL_GPIO_Init+0x226>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a50      	ldr	r2, [pc, #320]	; (8002098 <HAL_GPIO_Init+0x314>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d025      	beq.n	8001fa6 <HAL_GPIO_Init+0x222>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4f      	ldr	r2, [pc, #316]	; (800209c <HAL_GPIO_Init+0x318>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01f      	beq.n	8001fa2 <HAL_GPIO_Init+0x21e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <HAL_GPIO_Init+0x31c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0x21a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4d      	ldr	r2, [pc, #308]	; (80020a4 <HAL_GPIO_Init+0x320>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0x216>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_GPIO_Init+0x324>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00d      	beq.n	8001f96 <HAL_GPIO_Init+0x212>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_GPIO_Init+0x328>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <HAL_GPIO_Init+0x20e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4a      	ldr	r2, [pc, #296]	; (80020b0 <HAL_GPIO_Init+0x32c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_GPIO_Init+0x20a>
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	e00e      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f8e:	2308      	movs	r3, #8
 8001f90:	e00c      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f92:	2306      	movs	r3, #6
 8001f94:	e00a      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f96:	2305      	movs	r3, #5
 8001f98:	e008      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e004      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001faa:	2300      	movs	r3, #0
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	4093      	lsls	r3, r2
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fbc:	4934      	ldr	r1, [pc, #208]	; (8002090 <HAL_GPIO_Init+0x30c>)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_GPIO_Init+0x330>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fee:	4a31      	ldr	r2, [pc, #196]	; (80020b4 <HAL_GPIO_Init+0x330>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_GPIO_Init+0x330>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002018:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <HAL_GPIO_Init+0x330>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <HAL_GPIO_Init+0x330>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002042:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <HAL_GPIO_Init+0x330>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_GPIO_Init+0x330>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800206c:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <HAL_GPIO_Init+0x330>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3301      	adds	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b0f      	cmp	r3, #15
 800207c:	f67f ae90 	bls.w	8001da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002080:	bf00      	nop
 8002082:	3724      	adds	r7, #36	; 0x24
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40023800 	.word	0x40023800
 8002090:	40013800 	.word	0x40013800
 8002094:	40020000 	.word	0x40020000
 8002098:	40020400 	.word	0x40020400
 800209c:	40020800 	.word	0x40020800
 80020a0:	40020c00 	.word	0x40020c00
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40021400 	.word	0x40021400
 80020ac:	40021800 	.word	0x40021800
 80020b0:	40021c00 	.word	0x40021c00
 80020b4:	40013c00 	.word	0x40013c00

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020d4:	e003      	b.n	80020de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	041a      	lsls	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	619a      	str	r2, [r3, #24]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e25b      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d075      	beq.n	80021f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800210a:	4ba3      	ldr	r3, [pc, #652]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b04      	cmp	r3, #4
 8002114:	d00c      	beq.n	8002130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002116:	4ba0      	ldr	r3, [pc, #640]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211e:	2b08      	cmp	r3, #8
 8002120:	d112      	bne.n	8002148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002122:	4b9d      	ldr	r3, [pc, #628]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212e:	d10b      	bne.n	8002148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	4b99      	ldr	r3, [pc, #612]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d05b      	beq.n	80021f4 <HAL_RCC_OscConfig+0x108>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d157      	bne.n	80021f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e236      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x74>
 8002152:	4b91      	ldr	r3, [pc, #580]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a90      	ldr	r2, [pc, #576]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e01d      	b.n	800219c <HAL_RCC_OscConfig+0xb0>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x98>
 800216a:	4b8b      	ldr	r3, [pc, #556]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a8a      	ldr	r2, [pc, #552]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b88      	ldr	r3, [pc, #544]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a87      	ldr	r2, [pc, #540]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xb0>
 8002184:	4b84      	ldr	r3, [pc, #528]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a83      	ldr	r2, [pc, #524]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b81      	ldr	r3, [pc, #516]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a80      	ldr	r2, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe f9f6 	bl	8000594 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe f9f2 	bl	8000594 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1fb      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0xc0>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe f9e2 	bl	8000594 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d4:	f7fe f9de 	bl	8000594 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1e7      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0xe8>
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d063      	beq.n	80022ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220e:	4b62      	ldr	r3, [pc, #392]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002216:	2b08      	cmp	r3, #8
 8002218:	d11c      	bne.n	8002254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221a:	4b5f      	ldr	r3, [pc, #380]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d116      	bne.n	8002254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	4b5c      	ldr	r3, [pc, #368]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x152>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e1bb      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b56      	ldr	r3, [pc, #344]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4952      	ldr	r1, [pc, #328]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	e03a      	b.n	80022ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225c:	4b4f      	ldr	r3, [pc, #316]	; (800239c <HAL_RCC_OscConfig+0x2b0>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe f997 	bl	8000594 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226a:	f7fe f993 	bl	8000594 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e19c      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4940      	ldr	r1, [pc, #256]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
 800229c:	e015      	b.n	80022ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_OscConfig+0x2b0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7fe f976 	bl	8000594 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ac:	f7fe f972 	bl	8000594 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e17b      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d030      	beq.n	8002338 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d016      	beq.n	800230c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022de:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <HAL_RCC_OscConfig+0x2b4>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe f956 	bl	8000594 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ec:	f7fe f952 	bl	8000594 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e15b      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x200>
 800230a:	e015      	b.n	8002338 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_OscConfig+0x2b4>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002312:	f7fe f93f 	bl	8000594 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231a:	f7fe f93b 	bl	8000594 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e144      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a0 	beq.w	8002486 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_OscConfig+0x2b8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d121      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_RCC_OscConfig+0x2b8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <HAL_RCC_OscConfig+0x2b8>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7fe f901 	bl	8000594 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e011      	b.n	80023ba <HAL_RCC_OscConfig+0x2ce>
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	42470000 	.word	0x42470000
 80023a0:	42470e80 	.word	0x42470e80
 80023a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a8:	f7fe f8f4 	bl	8000594 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0fd      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <HAL_RCC_OscConfig+0x4d4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x2f0>
 80023ce:	4b7d      	ldr	r3, [pc, #500]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a7c      	ldr	r2, [pc, #496]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	e01c      	b.n	8002416 <HAL_RCC_OscConfig+0x32a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x312>
 80023e4:	4b77      	ldr	r3, [pc, #476]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a76      	ldr	r2, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	4b74      	ldr	r3, [pc, #464]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a73      	ldr	r2, [pc, #460]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	e00b      	b.n	8002416 <HAL_RCC_OscConfig+0x32a>
 80023fe:	4b71      	ldr	r3, [pc, #452]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a70      	ldr	r2, [pc, #448]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
 800240a:	4b6e      	ldr	r3, [pc, #440]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a6d      	ldr	r2, [pc, #436]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d015      	beq.n	800244a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7fe f8b9 	bl	8000594 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe f8b5 	bl	8000594 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0bc      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ee      	beq.n	8002426 <HAL_RCC_OscConfig+0x33a>
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe f8a3 	bl	8000594 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe f89f 	bl	8000594 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0a6      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	4b56      	ldr	r3, [pc, #344]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ee      	bne.n	8002452 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b52      	ldr	r3, [pc, #328]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a51      	ldr	r2, [pc, #324]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8092 	beq.w	80025b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002490:	4b4c      	ldr	r3, [pc, #304]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d05c      	beq.n	8002556 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d141      	bne.n	8002528 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <HAL_RCC_OscConfig+0x4dc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe f873 	bl	8000594 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b2:	f7fe f86f 	bl	8000594 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e078      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c4:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	019b      	lsls	r3, r3, #6
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	085b      	lsrs	r3, r3, #1
 80024e8:	3b01      	subs	r3, #1
 80024ea:	041b      	lsls	r3, r3, #16
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	061b      	lsls	r3, r3, #24
 80024f4:	4933      	ldr	r1, [pc, #204]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_RCC_OscConfig+0x4dc>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe f848 	bl	8000594 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe f844 	bl	8000594 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e04d      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x41c>
 8002526:	e045      	b.n	80025b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x4dc>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe f831 	bl	8000594 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe f82d 	bl	8000594 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e036      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x44a>
 8002554:	e02e      	b.n	80025b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e029      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_RCC_OscConfig+0x4d8>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	429a      	cmp	r2, r3
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d115      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002590:	4293      	cmp	r3, r2
 8002592:	d10d      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40007000 	.word	0x40007000
 80025c4:	40023800 	.word	0x40023800
 80025c8:	42470060 	.word	0x42470060

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0cc      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d90c      	bls.n	8002608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b65      	ldr	r3, [pc, #404]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0b8      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800262a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	494d      	ldr	r1, [pc, #308]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d044      	beq.n	80026ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d119      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d003      	beq.n	800268a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002686:	2b03      	cmp	r3, #3
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e067      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4934      	ldr	r1, [pc, #208]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7fd ff6a 	bl	8000594 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7fd ff66 	bl	8000594 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e04f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d20c      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e032      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4916      	ldr	r1, [pc, #88]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002752:	f000 f821 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002756:	4601      	mov	r1, r0
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	fa21 f303 	lsr.w	r3, r1, r3
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd feca 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023c00 	.word	0x40023c00
 8002788:	40023800 	.word	0x40023800
 800278c:	08004974 	.word	0x08004974
 8002790:	20000008 	.word	0x20000008
 8002794:	20000000 	.word	0x20000000

08002798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	2300      	movs	r3, #0
 80027a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ae:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d007      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x32>
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d008      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x38>
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 808d 	bne.w	80028de <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b4b      	ldr	r3, [pc, #300]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80027c6:	60bb      	str	r3, [r7, #8]
       break;
 80027c8:	e08c      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ca:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80027cc:	60bb      	str	r3, [r7, #8]
      break;
 80027ce:	e089      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d0:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027da:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d023      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e6:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	099b      	lsrs	r3, r3, #6
 80027ec:	f04f 0400 	mov.w	r4, #0
 80027f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	ea03 0501 	and.w	r5, r3, r1
 80027fc:	ea04 0602 	and.w	r6, r4, r2
 8002800:	4a3d      	ldr	r2, [pc, #244]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002802:	fb02 f106 	mul.w	r1, r2, r6
 8002806:	2200      	movs	r2, #0
 8002808:	fb02 f205 	mul.w	r2, r2, r5
 800280c:	440a      	add	r2, r1
 800280e:	493a      	ldr	r1, [pc, #232]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002810:	fba5 0101 	umull	r0, r1, r5, r1
 8002814:	1853      	adds	r3, r2, r1
 8002816:	4619      	mov	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f04f 0400 	mov.w	r4, #0
 800281e:	461a      	mov	r2, r3
 8002820:	4623      	mov	r3, r4
 8002822:	f7fd fcd1 	bl	80001c8 <__aeabi_uldivmod>
 8002826:	4603      	mov	r3, r0
 8002828:	460c      	mov	r4, r1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e049      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	099b      	lsrs	r3, r3, #6
 8002834:	f04f 0400 	mov.w	r4, #0
 8002838:	f240 11ff 	movw	r1, #511	; 0x1ff
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	ea03 0501 	and.w	r5, r3, r1
 8002844:	ea04 0602 	and.w	r6, r4, r2
 8002848:	4629      	mov	r1, r5
 800284a:	4632      	mov	r2, r6
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	f04f 0400 	mov.w	r4, #0
 8002854:	0154      	lsls	r4, r2, #5
 8002856:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800285a:	014b      	lsls	r3, r1, #5
 800285c:	4619      	mov	r1, r3
 800285e:	4622      	mov	r2, r4
 8002860:	1b49      	subs	r1, r1, r5
 8002862:	eb62 0206 	sbc.w	r2, r2, r6
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	f04f 0400 	mov.w	r4, #0
 800286e:	0194      	lsls	r4, r2, #6
 8002870:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002874:	018b      	lsls	r3, r1, #6
 8002876:	1a5b      	subs	r3, r3, r1
 8002878:	eb64 0402 	sbc.w	r4, r4, r2
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	00e2      	lsls	r2, r4, #3
 8002886:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800288a:	00d9      	lsls	r1, r3, #3
 800288c:	460b      	mov	r3, r1
 800288e:	4614      	mov	r4, r2
 8002890:	195b      	adds	r3, r3, r5
 8002892:	eb44 0406 	adc.w	r4, r4, r6
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	02a2      	lsls	r2, r4, #10
 80028a0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028a4:	0299      	lsls	r1, r3, #10
 80028a6:	460b      	mov	r3, r1
 80028a8:	4614      	mov	r4, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	4621      	mov	r1, r4
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f04f 0400 	mov.w	r4, #0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	f7fd fc86 	bl	80001c8 <__aeabi_uldivmod>
 80028bc:	4603      	mov	r3, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	3301      	adds	r3, #1
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	60bb      	str	r3, [r7, #8]
      break;
 80028dc:	e002      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80028e0:	60bb      	str	r3, [r7, #8]
      break;
 80028e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e4:	68bb      	ldr	r3, [r7, #8]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	017d7840 	.word	0x017d7840

080028fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e01d      	b.n	800294a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f001 fc74 	bl	8004210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f000 fb44 	bl	8002fc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d007      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e01d      	b.n	80029e8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f001 fc7f 	bl	80042c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f000 faf5 	bl	8002fc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fdca 	bl	800359c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <HAL_TIM_PWM_Start+0x74>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_TIM_PWM_Start+0x2c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_TIM_PWM_Start+0x78>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIM_PWM_Start+0x30>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_TIM_PWM_Start+0x32>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d007      	beq.n	8002a58 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40010400 	.word	0x40010400

08002a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d122      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d11b      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0202 	mvn.w	r2, #2
 8002a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa6b 	bl	8002f8a <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e005      	b.n	8002ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa5d 	bl	8002f76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fa6e 	bl	8002f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d122      	bne.n	8002b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d11b      	bne.n	8002b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0204 	mvn.w	r2, #4
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa41 	bl	8002f8a <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa33 	bl	8002f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fa44 	bl	8002f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d122      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d11b      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0208 	mvn.w	r2, #8
 8002b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2204      	movs	r2, #4
 8002b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa17 	bl	8002f8a <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa09 	bl	8002f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fa1a 	bl	8002f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d122      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0210 	mvn.w	r2, #16
 8002b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2208      	movs	r2, #8
 8002b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f9ed 	bl	8002f8a <HAL_TIM_IC_CaptureCallback>
 8002bb0:	e005      	b.n	8002bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f9df 	bl	8002f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f9f0 	bl	8002f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0201 	mvn.w	r2, #1
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f001 f91a 	bl	8003e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfa:	2b80      	cmp	r3, #128	; 0x80
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b80      	cmp	r3, #128	; 0x80
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fd6c 	bl	80036f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f9b5 	bl	8002fb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0220 	mvn.w	r2, #32
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fd36 	bl	80036e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e0b4      	b.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	f200 809f 	bhi.w	8002dec <HAL_TIM_PWM_ConfigChannel+0x170>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002ded 	.word	0x08002ded
 8002cbc:	08002ded 	.word	0x08002ded
 8002cc0:	08002ded 	.word	0x08002ded
 8002cc4:	08002d29 	.word	0x08002d29
 8002cc8:	08002ded 	.word	0x08002ded
 8002ccc:	08002ded 	.word	0x08002ded
 8002cd0:	08002ded 	.word	0x08002ded
 8002cd4:	08002d6b 	.word	0x08002d6b
 8002cd8:	08002ded 	.word	0x08002ded
 8002cdc:	08002ded 	.word	0x08002ded
 8002ce0:	08002ded 	.word	0x08002ded
 8002ce4:	08002dab 	.word	0x08002dab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fa0a 	bl	8003108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0208 	orr.w	r2, r2, #8
 8002d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0204 	bic.w	r2, r2, #4
 8002d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6999      	ldr	r1, [r3, #24]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	619a      	str	r2, [r3, #24]
      break;
 8002d26:	e062      	b.n	8002dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fa5a 	bl	80031e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6999      	ldr	r1, [r3, #24]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	021a      	lsls	r2, r3, #8
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	619a      	str	r2, [r3, #24]
      break;
 8002d68:	e041      	b.n	8002dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 faaf 	bl	80032d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0208 	orr.w	r2, r2, #8
 8002d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0204 	bic.w	r2, r2, #4
 8002d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69d9      	ldr	r1, [r3, #28]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	61da      	str	r2, [r3, #28]
      break;
 8002da8:	e021      	b.n	8002dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fb03 	bl	80033bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69d9      	ldr	r1, [r3, #28]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	021a      	lsls	r2, r3, #8
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	61da      	str	r2, [r3, #28]
      break;
 8002dea:	e000      	b.n	8002dee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002dec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_TIM_ConfigClockSource+0x18>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e0a6      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0x166>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d067      	beq.n	8002f28 <HAL_TIM_ConfigClockSource+0x120>
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d80b      	bhi.n	8002e74 <HAL_TIM_ConfigClockSource+0x6c>
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d073      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0x140>
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d802      	bhi.n	8002e6a <HAL_TIM_ConfigClockSource+0x62>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d06f      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e68:	e078      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d06c      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0x140>
 8002e6e:	2b30      	cmp	r3, #48	; 0x30
 8002e70:	d06a      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e72:	e073      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e74:	2b70      	cmp	r3, #112	; 0x70
 8002e76:	d00d      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x8c>
 8002e78:	2b70      	cmp	r3, #112	; 0x70
 8002e7a:	d804      	bhi.n	8002e86 <HAL_TIM_ConfigClockSource+0x7e>
 8002e7c:	2b50      	cmp	r3, #80	; 0x50
 8002e7e:	d033      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0xe0>
 8002e80:	2b60      	cmp	r3, #96	; 0x60
 8002e82:	d041      	beq.n	8002f08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e84:	e06a      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d066      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0x152>
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e90:	d017      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e92:	e063      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6899      	ldr	r1, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f000 fb5a 	bl	800355c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eb6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	609a      	str	r2, [r3, #8]
      break;
 8002ec0:	e04c      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6899      	ldr	r1, [r3, #8]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f000 fb43 	bl	800355c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee4:	609a      	str	r2, [r3, #8]
      break;
 8002ee6:	e039      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f000 fab7 	bl	8003468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2150      	movs	r1, #80	; 0x50
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fb10 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 8002f06:	e029      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	461a      	mov	r2, r3
 8002f16:	f000 fad6 	bl	80034c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2160      	movs	r1, #96	; 0x60
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fb00 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 8002f26:	e019      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	461a      	mov	r2, r3
 8002f36:	f000 fa97 	bl	8003468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2140      	movs	r1, #64	; 0x40
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 faf0 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 8002f46:	e009      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f000 fae7 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 8002f58:	e000      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a40      	ldr	r2, [pc, #256]	; (80030dc <TIM_Base_SetConfig+0x114>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d00f      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3d      	ldr	r2, [pc, #244]	; (80030e0 <TIM_Base_SetConfig+0x118>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00b      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a3c      	ldr	r2, [pc, #240]	; (80030e4 <TIM_Base_SetConfig+0x11c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3b      	ldr	r2, [pc, #236]	; (80030e8 <TIM_Base_SetConfig+0x120>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3a      	ldr	r2, [pc, #232]	; (80030ec <TIM_Base_SetConfig+0x124>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d108      	bne.n	800301a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a2f      	ldr	r2, [pc, #188]	; (80030dc <TIM_Base_SetConfig+0x114>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d02b      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d027      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <TIM_Base_SetConfig+0x118>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d023      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <TIM_Base_SetConfig+0x11c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01f      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <TIM_Base_SetConfig+0x120>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01b      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a29      	ldr	r2, [pc, #164]	; (80030ec <TIM_Base_SetConfig+0x124>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d017      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <TIM_Base_SetConfig+0x128>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <TIM_Base_SetConfig+0x12c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00f      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <TIM_Base_SetConfig+0x130>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a25      	ldr	r2, [pc, #148]	; (80030fc <TIM_Base_SetConfig+0x134>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <TIM_Base_SetConfig+0x138>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a23      	ldr	r2, [pc, #140]	; (8003104 <TIM_Base_SetConfig+0x13c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d108      	bne.n	800308c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <TIM_Base_SetConfig+0x114>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_Base_SetConfig+0xf8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <TIM_Base_SetConfig+0x124>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d103      	bne.n	80030c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	615a      	str	r2, [r3, #20]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40000c00 	.word	0x40000c00
 80030ec:	40010400 	.word	0x40010400
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800
 80030fc:	40001800 	.word	0x40001800
 8003100:	40001c00 	.word	0x40001c00
 8003104:	40002000 	.word	0x40002000

08003108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f023 0201 	bic.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0303 	bic.w	r3, r3, #3
 800313e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f023 0302 	bic.w	r3, r3, #2
 8003150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <TIM_OC1_SetConfig+0xd8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_OC1_SetConfig+0x64>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <TIM_OC1_SetConfig+0xdc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d10c      	bne.n	8003186 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f023 0308 	bic.w	r3, r3, #8
 8003172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f023 0304 	bic.w	r3, r3, #4
 8003184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <TIM_OC1_SetConfig+0xd8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_OC1_SetConfig+0x8e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <TIM_OC1_SetConfig+0xdc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d111      	bne.n	80031ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800319c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	621a      	str	r2, [r3, #32]
}
 80031d4:	bf00      	nop
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40010000 	.word	0x40010000
 80031e4:	40010400 	.word	0x40010400

080031e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0210 	bic.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0320 	bic.w	r3, r3, #32
 8003232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a22      	ldr	r2, [pc, #136]	; (80032cc <TIM_OC2_SetConfig+0xe4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_OC2_SetConfig+0x68>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <TIM_OC2_SetConfig+0xe8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10d      	bne.n	800326c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800326a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a17      	ldr	r2, [pc, #92]	; (80032cc <TIM_OC2_SetConfig+0xe4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d003      	beq.n	800327c <TIM_OC2_SetConfig+0x94>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <TIM_OC2_SetConfig+0xe8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d113      	bne.n	80032a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800328a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40010400 	.word	0x40010400

080032d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800331c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <TIM_OC3_SetConfig+0xe0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d003      	beq.n	800333a <TIM_OC3_SetConfig+0x66>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <TIM_OC3_SetConfig+0xe4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10d      	bne.n	8003356 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <TIM_OC3_SetConfig+0xe0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_OC3_SetConfig+0x92>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <TIM_OC3_SetConfig+0xe4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d113      	bne.n	800338e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	621a      	str	r2, [r3, #32]
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40010000 	.word	0x40010000
 80033b8:	40010400 	.word	0x40010400

080033bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	031b      	lsls	r3, r3, #12
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a12      	ldr	r2, [pc, #72]	; (8003460 <TIM_OC4_SetConfig+0xa4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_OC4_SetConfig+0x68>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a11      	ldr	r2, [pc, #68]	; (8003464 <TIM_OC4_SetConfig+0xa8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d109      	bne.n	8003438 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800342a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	019b      	lsls	r3, r3, #6
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40010000 	.word	0x40010000
 8003464:	40010400 	.word	0x40010400

08003468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f023 0201 	bic.w	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 030a 	bic.w	r3, r3, #10
 80034a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b087      	sub	sp, #28
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f023 0210 	bic.w	r2, r3, #16
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	031b      	lsls	r3, r3, #12
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003502:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	621a      	str	r2, [r3, #32]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	f043 0307 	orr.w	r3, r3, #7
 8003548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	021a      	lsls	r2, r3, #8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	431a      	orrs	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4313      	orrs	r3, r2
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	2201      	movs	r2, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1a      	ldr	r2, [r3, #32]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	43db      	mvns	r3, r3
 80035be:	401a      	ands	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a1a      	ldr	r2, [r3, #32]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	431a      	orrs	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e05a      	b.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d01d      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d018      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10c      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4313      	orrs	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800
 80036d0:	40000c00 	.word	0x40000c00
 80036d4:	40010400 	.word	0x40010400
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40001800 	.word	0x40001800

080036e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800370e:	463b      	mov	r3, r7
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800371a:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <MX_ADC1_Init+0xec>)
 800371c:	4a36      	ldr	r2, [pc, #216]	; (80037f8 <MX_ADC1_Init+0xf0>)
 800371e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003720:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <MX_ADC1_Init+0xec>)
 8003722:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <MX_ADC1_Init+0xec>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800372e:	4b31      	ldr	r3, [pc, #196]	; (80037f4 <MX_ADC1_Init+0xec>)
 8003730:	2201      	movs	r2, #1
 8003732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003734:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <MX_ADC1_Init+0xec>)
 8003736:	2201      	movs	r2, #1
 8003738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800373a:	4b2e      	ldr	r3, [pc, #184]	; (80037f4 <MX_ADC1_Init+0xec>)
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003742:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <MX_ADC1_Init+0xec>)
 8003744:	2200      	movs	r2, #0
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003748:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <MX_ADC1_Init+0xec>)
 800374a:	4a2c      	ldr	r2, [pc, #176]	; (80037fc <MX_ADC1_Init+0xf4>)
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800374e:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <MX_ADC1_Init+0xec>)
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <MX_ADC1_Init+0xec>)
 8003756:	2204      	movs	r2, #4
 8003758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <MX_ADC1_Init+0xec>)
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <MX_ADC1_Init+0xec>)
 8003764:	2201      	movs	r2, #1
 8003766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003768:	4822      	ldr	r0, [pc, #136]	; (80037f4 <MX_ADC1_Init+0xec>)
 800376a:	f7fc ff41 	bl	80005f0 <HAL_ADC_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003774:	f000 fb76 	bl	8003e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003778:	2306      	movs	r3, #6
 800377a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800377c:	2301      	movs	r3, #1
 800377e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003780:	2301      	movs	r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003784:	463b      	mov	r3, r7
 8003786:	4619      	mov	r1, r3
 8003788:	481a      	ldr	r0, [pc, #104]	; (80037f4 <MX_ADC1_Init+0xec>)
 800378a:	f7fd f885 	bl	8000898 <HAL_ADC_ConfigChannel>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003794:	f000 fb66 	bl	8003e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003798:	2307      	movs	r3, #7
 800379a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800379c:	2302      	movs	r3, #2
 800379e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037a0:	463b      	mov	r3, r7
 80037a2:	4619      	mov	r1, r3
 80037a4:	4813      	ldr	r0, [pc, #76]	; (80037f4 <MX_ADC1_Init+0xec>)
 80037a6:	f7fd f877 	bl	8000898 <HAL_ADC_ConfigChannel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80037b0:	f000 fb58 	bl	8003e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80037b4:	2301      	movs	r3, #1
 80037b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80037b8:	2303      	movs	r3, #3
 80037ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037bc:	463b      	mov	r3, r7
 80037be:	4619      	mov	r1, r3
 80037c0:	480c      	ldr	r0, [pc, #48]	; (80037f4 <MX_ADC1_Init+0xec>)
 80037c2:	f7fd f869 	bl	8000898 <HAL_ADC_ConfigChannel>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80037cc:	f000 fb4a 	bl	8003e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80037d0:	2302      	movs	r3, #2
 80037d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80037d4:	2304      	movs	r3, #4
 80037d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037d8:	463b      	mov	r3, r7
 80037da:	4619      	mov	r1, r3
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <MX_ADC1_Init+0xec>)
 80037de:	f7fd f85b 	bl	8000898 <HAL_ADC_ConfigChannel>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80037e8:	f000 fb3c 	bl	8003e64 <Error_Handler>
  }

}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	2000002c 	.word	0x2000002c
 80037f8:	40012000 	.word	0x40012000
 80037fc:	0f000001 	.word	0x0f000001

08003800 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <HAL_ADC_MspInit+0xdc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d157      	bne.n	80038d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <HAL_ADC_MspInit+0xe0>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	4a2d      	ldr	r2, [pc, #180]	; (80038e0 <HAL_ADC_MspInit+0xe0>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	6453      	str	r3, [r2, #68]	; 0x44
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <HAL_ADC_MspInit+0xe0>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <HAL_ADC_MspInit+0xe0>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4a26      	ldr	r2, [pc, #152]	; (80038e0 <HAL_ADC_MspInit+0xe0>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6313      	str	r3, [r2, #48]	; 0x30
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_ADC_MspInit+0xe0>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 800385a:	23c6      	movs	r3, #198	; 0xc6
 800385c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800385e:	2303      	movs	r3, #3
 8003860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	4619      	mov	r1, r3
 800386c:	481d      	ldr	r0, [pc, #116]	; (80038e4 <HAL_ADC_MspInit+0xe4>)
 800386e:	f7fe fa89 	bl	8001d84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 8003874:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <HAL_ADC_MspInit+0xec>)
 8003876:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 800387a:	2200      	movs	r2, #0
 800387c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 8003886:	2200      	movs	r2, #0
 8003888:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800388a:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 800388c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003890:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 8003894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003898:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 800389c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 80038a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038b6:	480c      	ldr	r0, [pc, #48]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 80038b8:	f7fd fef6 	bl	80016a8 <HAL_DMA_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80038c2:	f000 facf 	bl	8003e64 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
 80038cc:	4a06      	ldr	r2, [pc, #24]	; (80038e8 <HAL_ADC_MspInit+0xe8>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80038d2:	bf00      	nop
 80038d4:	3728      	adds	r7, #40	; 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40012000 	.word	0x40012000
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40020000 	.word	0x40020000
 80038e8:	20000074 	.word	0x20000074
 80038ec:	40026410 	.word	0x40026410

080038f0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <MX_CAN1_Init+0x68>)
 80038f6:	4a19      	ldr	r2, [pc, #100]	; (800395c <MX_CAN1_Init+0x6c>)
 80038f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <MX_CAN1_Init+0x68>)
 80038fc:	2215      	movs	r2, #21
 80038fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <MX_CAN1_Init+0x68>)
 8003902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003906:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <MX_CAN1_Init+0x68>)
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <MX_CAN1_Init+0x68>)
 8003910:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003914:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <MX_CAN1_Init+0x68>)
 8003918:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800391c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <MX_CAN1_Init+0x68>)
 8003920:	2200      	movs	r2, #0
 8003922:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <MX_CAN1_Init+0x68>)
 8003926:	2200      	movs	r2, #0
 8003928:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <MX_CAN1_Init+0x68>)
 800392c:	2200      	movs	r2, #0
 800392e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <MX_CAN1_Init+0x68>)
 8003932:	2201      	movs	r2, #1
 8003934:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <MX_CAN1_Init+0x68>)
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <MX_CAN1_Init+0x68>)
 800393e:	2200      	movs	r2, #0
 8003940:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <MX_CAN1_Init+0x68>)
 8003944:	f7fd fa48 	bl	8000dd8 <HAL_CAN_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800394e:	f000 fa89 	bl	8003e64 <Error_Handler>
  }

}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000260 	.word	0x20000260
 800395c:	40006400 	.word	0x40006400

08003960 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <HAL_CAN_MspInit+0xa8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d13d      	bne.n	80039fe <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <HAL_CAN_MspInit+0xac>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a20      	ldr	r2, [pc, #128]	; (8003a0c <HAL_CAN_MspInit+0xac>)
 800398c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <HAL_CAN_MspInit+0xac>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <HAL_CAN_MspInit+0xac>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <HAL_CAN_MspInit+0xac>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <HAL_CAN_MspInit+0xac>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80039ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c0:	2302      	movs	r3, #2
 80039c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039c4:	2302      	movs	r3, #2
 80039c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c8:	2303      	movs	r3, #3
 80039ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039cc:	2309      	movs	r3, #9
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d0:	f107 0314 	add.w	r3, r7, #20
 80039d4:	4619      	mov	r1, r3
 80039d6:	480e      	ldr	r0, [pc, #56]	; (8003a10 <HAL_CAN_MspInit+0xb0>)
 80039d8:	f7fe f9d4 	bl	8001d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e2:	2302      	movs	r3, #2
 80039e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ea:	2303      	movs	r3, #3
 80039ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039ee:	2309      	movs	r3, #9
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f2:	f107 0314 	add.w	r3, r7, #20
 80039f6:	4619      	mov	r1, r3
 80039f8:	4805      	ldr	r0, [pc, #20]	; (8003a10 <HAL_CAN_MspInit+0xb0>)
 80039fa:	f7fe f9c3 	bl	8001d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80039fe:	bf00      	nop
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40006400 	.word	0x40006400
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020000 	.word	0x40020000

08003a14 <CANFilerConfig>:
/* USER CODE BEGIN 1 */

/*******************************************************************************
 FILTER CONFIGURATION
 *******************************************************************************/
void CANFilerConfig(void) {
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
	filter_0.FilterBank = 0;
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	615a      	str	r2, [r3, #20]
	filter_0.FilterMode = CAN_FILTERMODE_IDMASK;
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
	filter_0.FilterScale = CAN_FILTERSCALE_32BIT;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	61da      	str	r2, [r3, #28]
	filter_0.FilterIdHigh = 0x0000;			//0x321 << 5;
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
	filter_0.FilterIdLow = 0x0000;				//0x00000000;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	605a      	str	r2, [r3, #4]
	filter_0.FilterMaskIdHigh = 0x0000;		//0x111 << 5;
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
	filter_0.FilterMaskIdLow = 0x0000;			//0x00000000;
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	60da      	str	r2, [r3, #12]
	filter_0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	611a      	str	r2, [r3, #16]
	filter_0.FilterActivation = ENABLE;
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	621a      	str	r2, [r3, #32]
	filter_0.SlaveStartFilterBank = 14;
 8003a4e:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <CANFilerConfig+0x4c>)
 8003a50:	220e      	movs	r2, #14
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	2000022c 	.word	0x2000022c

08003a64 <CAN1_Init>:

/*******************************************************************************
 	 PERYFERIUM INITIAZLIZATION
 *******************************************************************************/
void CAN1_Init() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	if (HAL_CAN_ConfigFilter(&hcan1, &filter_0) != HAL_OK) {
 8003a68:	490d      	ldr	r1, [pc, #52]	; (8003aa0 <CAN1_Init+0x3c>)
 8003a6a:	480e      	ldr	r0, [pc, #56]	; (8003aa4 <CAN1_Init+0x40>)
 8003a6c:	f7fd fab0 	bl	8000fd0 <HAL_CAN_ConfigFilter>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <CAN1_Init+0x16>
		Error_Handler();
 8003a76:	f000 f9f5 	bl	8003e64 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8003a7a:	480a      	ldr	r0, [pc, #40]	; (8003aa4 <CAN1_Init+0x40>)
 8003a7c:	f7fd fb88 	bl	8001190 <HAL_CAN_Start>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <CAN1_Init+0x26>
		Error_Handler();
 8003a86:	f000 f9ed 	bl	8003e64 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1,
 8003a8a:	2103      	movs	r1, #3
 8003a8c:	4805      	ldr	r0, [pc, #20]	; (8003aa4 <CAN1_Init+0x40>)
 8003a8e:	f7fd fcd3 	bl	8001438 <HAL_CAN_ActivateNotification>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <CAN1_Init+0x38>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8003a98:	f000 f9e4 	bl	8003e64 <Error_Handler>
	}
}
 8003a9c:	bf00      	nop
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	2000022c 	.word	0x2000022c
 8003aa4:	20000260 	.word	0x20000260

08003aa8 <prepareFrameData>:

/*******************************************************************************
 FRAME CONFIGURATION
 *******************************************************************************/
void prepareFrameData(void){
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
	uint32_t inputVoltage = averageArrayVoltage;
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <prepareFrameData+0x54>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	607b      	str	r3, [r7, #4]
	uint32_t inputCurrent = averageArrayCurrent;
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <prepareFrameData+0x58>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	603b      	str	r3, [r7, #0]

	frame_SYNC.TxData[0] = 0xFF & inputVoltage;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <prepareFrameData+0x5c>)
 8003ac0:	701a      	strb	r2, [r3, #0]
	frame_SYNC.TxData[1] = 0xFF00 & inputVoltage;
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <prepareFrameData+0x5c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	705a      	strb	r2, [r3, #1]
	frame_SYNC.TxData[2] = 0xFF0000 & inputVoltage;
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <prepareFrameData+0x5c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	709a      	strb	r2, [r3, #2]
	frame_SYNC.TxData[3] = 0xFF000000 & inputVoltage;
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <prepareFrameData+0x5c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	70da      	strb	r2, [r3, #3]
	frame_SYNC.TxData[4] = 0xFF & inputCurrent;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <prepareFrameData+0x5c>)
 8003ada:	711a      	strb	r2, [r3, #4]
	frame_SYNC.TxData[5] = 0xFF00 & inputCurrent;
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <prepareFrameData+0x5c>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	715a      	strb	r2, [r3, #5]
	frame_SYNC.TxData[6] = 0xFF0000 & inputCurrent;
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <prepareFrameData+0x5c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	719a      	strb	r2, [r3, #6]
	frame_SYNC.TxData[7] = 0xFF000000 & inputCurrent;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <prepareFrameData+0x5c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	71da      	strb	r2, [r3, #7]
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	200001b0 	.word	0x200001b0
 8003b00:	200002a8 	.word	0x200002a8
 8003b04:	200001bc 	.word	0x200001bc

08003b08 <sendCAN>:

void sendCAN() {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	frame_SYNC.TxHeader.StdId = 0x080;
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <sendCAN+0x54>)
 8003b0e:	2280      	movs	r2, #128	; 0x80
 8003b10:	609a      	str	r2, [r3, #8]
	frame_SYNC.TxHeader.RTR = CAN_RTR_DATA;
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <sendCAN+0x54>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	615a      	str	r2, [r3, #20]
	frame_SYNC.TxHeader.IDE = CAN_ID_STD;
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <sendCAN+0x54>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
	frame_SYNC.TxHeader.DLC = 8;
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <sendCAN+0x54>)
 8003b20:	2208      	movs	r2, #8
 8003b22:	619a      	str	r2, [r3, #24]
	frame_SYNC.TxHeader.TransmitGlobalTime = DISABLE;
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <sendCAN+0x54>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	771a      	strb	r2, [r3, #28]

	prepareFrameData();
 8003b2a:	f7ff ffbd 	bl	8003aa8 <prepareFrameData>

	if (HAL_CAN_AddTxMessage(&hcan1, &frame_SYNC.TxHeader, frame_SYNC.TxData,
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <sendCAN+0x58>)
 8003b30:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <sendCAN+0x54>)
 8003b32:	490c      	ldr	r1, [pc, #48]	; (8003b64 <sendCAN+0x5c>)
 8003b34:	480c      	ldr	r0, [pc, #48]	; (8003b68 <sendCAN+0x60>)
 8003b36:	f7fd fb6f 	bl	8001218 <HAL_CAN_AddTxMessage>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <sendCAN+0x3e>
			&TxMailbox) != HAL_OK) {
		Error_Handler();
 8003b40:	f000 f990 	bl	8003e64 <Error_Handler>
 8003b44:	e001      	b.n	8003b4a <sendCAN+0x42>
	} else{
		resetYellowState();
 8003b46:	f000 fc29 	bl	800439c <resetYellowState>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 8003b4a:	bf00      	nop
 8003b4c:	4806      	ldr	r0, [pc, #24]	; (8003b68 <sendCAN+0x60>)
 8003b4e:	f7fd fc3e 	bl	80013ce <HAL_CAN_GetTxMailboxesFreeLevel>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d1f9      	bne.n	8003b4c <sendCAN+0x44>
	}
}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	200001bc 	.word	0x200001bc
 8003b60:	20000224 	.word	0x20000224
 8003b64:	200001c4 	.word	0x200001c4
 8003b68:	20000260 	.word	0x20000260

08003b6c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <MX_DMA_Init+0x3c>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <MX_DMA_Init+0x3c>)
 8003b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b80:	6313      	str	r3, [r2, #48]	; 0x30
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <MX_DMA_Init+0x3c>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2100      	movs	r1, #0
 8003b92:	2038      	movs	r0, #56	; 0x38
 8003b94:	f7fd fd51 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003b98:	2038      	movs	r0, #56	; 0x38
 8003b9a:	f7fd fd6a 	bl	8001672 <HAL_NVIC_EnableIRQ>

}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023800 	.word	0x40023800

08003bac <startReadingDMA>:

/* USER CODE BEGIN 2 */
void startReadingDMA(uint32_t * valueContainer){
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, valueContainer, 4);
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4803      	ldr	r0, [pc, #12]	; (8003bc8 <startReadingDMA+0x1c>)
 8003bba:	f7fc fd5d 	bl	8000678 <HAL_ADC_Start_DMA>
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000002c 	.word	0x2000002c

08003bcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a36      	ldr	r2, [pc, #216]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003bec:	f043 0310 	orr.w	r3, r3, #16
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a2f      	ldr	r2, [pc, #188]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a28      	ldr	r2, [pc, #160]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6313      	str	r3, [r2, #48]	; 0x30
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <MX_GPIO_Init+0xf8>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2170      	movs	r1, #112	; 0x70
 8003c72:	4815      	ldr	r0, [pc, #84]	; (8003cc8 <MX_GPIO_Init+0xfc>)
 8003c74:	f7fe fa20 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4813      	ldr	r0, [pc, #76]	; (8003ccc <MX_GPIO_Init+0x100>)
 8003c7e:	f7fe fa1b 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003c82:	2370      	movs	r3, #112	; 0x70
 8003c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c92:	f107 0314 	add.w	r3, r7, #20
 8003c96:	4619      	mov	r1, r3
 8003c98:	480b      	ldr	r0, [pc, #44]	; (8003cc8 <MX_GPIO_Init+0xfc>)
 8003c9a:	f7fe f873 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4805      	ldr	r0, [pc, #20]	; (8003ccc <MX_GPIO_Init+0x100>)
 8003cb6:	f7fe f865 	bl	8001d84 <HAL_GPIO_Init>

}
 8003cba:	bf00      	nop
 8003cbc:	3728      	adds	r7, #40	; 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40020400 	.word	0x40020400

08003cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	isMPPTInitialised = 0;
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <main+0x6c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cda:	f7fc fbf5 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cde:	f000 f837 	bl	8003d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ce2:	f7ff ff73 	bl	8003bcc <MX_GPIO_Init>
  MX_DMA_Init();
 8003ce6:	f7ff ff41 	bl	8003b6c <MX_DMA_Init>
  MX_TIM3_Init();
 8003cea:	f000 f9e9 	bl	80040c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003cee:	f7ff fd0b 	bl	8003708 <MX_ADC1_Init>
  MX_CAN1_Init();
 8003cf2:	f7ff fdfd 	bl	80038f0 <MX_CAN1_Init>
  MX_TIM2_Init();
 8003cf6:	f000 f997 	bl	8004028 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003cfa:	f000 f943 	bl	8003f84 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003cfe:	f000 fa39 	bl	8004174 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  CANFilerConfig();
 8003d02:	f7ff fe87 	bl	8003a14 <CANFilerConfig>
  CAN1_Init();
 8003d06:	f7ff fead 	bl	8003a64 <CAN1_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); 			//MCU_PWM
 8003d0a:	210c      	movs	r1, #12
 8003d0c:	480c      	ldr	r0, [pc, #48]	; (8003d40 <main+0x70>)
 8003d0e:	f7fe fe6f 	bl	80029f0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);	//MCU_PWM_EN Register
 8003d12:	2201      	movs	r2, #1
 8003d14:	2101      	movs	r1, #1
 8003d16:	480b      	ldr	r0, [pc, #44]	; (8003d44 <main+0x74>)
 8003d18:	f7fe f9ce 	bl	80020b8 <HAL_GPIO_WritePin>



  HAL_TIM_Base_Start_IT(&htim4);
 8003d1c:	480a      	ldr	r0, [pc, #40]	; (8003d48 <main+0x78>)
 8003d1e:	f7fe fe18 	bl	8002952 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8003d22:	480a      	ldr	r0, [pc, #40]	; (8003d4c <main+0x7c>)
 8003d24:	f7fe fe15 	bl	8002952 <HAL_TIM_Base_Start_IT>

  MPPTInit();
 8003d28:	f000 fd8c 	bl	8004844 <MPPTInit>

  enablePWM();
 8003d2c:	f000 fb7e 	bl	800442c <enablePWM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  storeMeasurements();
 8003d30:	f000 fc3e 	bl	80045b0 <storeMeasurements>
	  HAL_Delay(DELAY_BETWEEN_MEASUREMENTS);
 8003d34:	200a      	movs	r0, #10
 8003d36:	f7fc fc39 	bl	80005ac <HAL_Delay>
	  storeMeasurements();
 8003d3a:	e7f9      	b.n	8003d30 <main+0x60>
 8003d3c:	2000015c 	.word	0x2000015c
 8003d40:	200002ec 	.word	0x200002ec
 8003d44:	40020400 	.word	0x40020400
 8003d48:	200002ac 	.word	0x200002ac
 8003d4c:	2000032c 	.word	0x2000032c

08003d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b094      	sub	sp, #80	; 0x50
 8003d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d56:	f107 0320 	add.w	r3, r7, #32
 8003d5a:	2230      	movs	r2, #48	; 0x30
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fdf0 	bl	8004944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d74:	2300      	movs	r3, #0
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <SystemClock_Config+0xcc>)
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <SystemClock_Config+0xcc>)
 8003d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6413      	str	r3, [r2, #64]	; 0x40
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <SystemClock_Config+0xcc>)
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d90:	2300      	movs	r3, #0
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <SystemClock_Config+0xd0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <SystemClock_Config+0xd0>)
 8003d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <SystemClock_Config+0xd0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003dac:	2302      	movs	r3, #2
 8003dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003db0:	2301      	movs	r3, #1
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003db4:	2310      	movs	r3, #16
 8003db6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003db8:	2302      	movs	r3, #2
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003dc4:	23a8      	movs	r3, #168	; 0xa8
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003dcc:	2304      	movs	r3, #4
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dd0:	f107 0320 	add.w	r3, r7, #32
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe f989 	bl	80020ec <HAL_RCC_OscConfig>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003de0:	f000 f840 	bl	8003e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003de4:	230f      	movs	r3, #15
 8003de6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003de8:	2302      	movs	r3, #2
 8003dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003df0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	2105      	movs	r1, #5
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe fbe2 	bl	80025cc <HAL_RCC_ClockConfig>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003e0e:	f000 f829 	bl	8003e64 <Error_Handler>
  }
}
 8003e12:	bf00      	nop
 8003e14:	3750      	adds	r7, #80	; 0x50
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40007000 	.word	0x40007000

08003e24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	if(isMPPTInitialised){
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(htim->Instance == TIM1) // T = 1 s*/
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_PeriodElapsedCallback+0x1e>
		{
			  sendCAN();
 8003e3e:	f7ff fe63 	bl	8003b08 <sendCAN>
		}
		if(htim->Instance == TIM4) // T = 500ms
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a06      	ldr	r2, [pc, #24]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			checkArrayConnection();
 8003e4c:	f000 fc92 	bl	8004774 <checkArrayConnection>
				void PandOAlgorithm();
			}
		}
	}

}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	2000015c 	.word	0x2000015c
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40000800 	.word	0x40000800

08003e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	setYellowState();
 8003e68:	f000 fa88 	bl	800437c <setYellowState>
  /* USER CODE END Error_Handler_Debug */
}
 8003e6c:	bf00      	nop
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_MspInit+0x4c>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <HAL_MspInit+0x4c>)
 8003e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e84:	6453      	str	r3, [r2, #68]	; 0x44
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <HAL_MspInit+0x4c>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8e:	607b      	str	r3, [r7, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <HAL_MspInit+0x4c>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a08      	ldr	r2, [pc, #32]	; (8003ebc <HAL_MspInit+0x4c>)
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_MspInit+0x4c>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800

08003ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ed2:	e7fe      	b.n	8003ed2 <HardFault_Handler+0x4>

08003ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ed8:	e7fe      	b.n	8003ed8 <MemManage_Handler+0x4>

08003eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ede:	e7fe      	b.n	8003ede <BusFault_Handler+0x4>

08003ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <UsageFault_Handler+0x4>

08003ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f14:	f7fc fb2a 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f20:	4802      	ldr	r0, [pc, #8]	; (8003f2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003f22:	f7fe fda3 	bl	8002a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	2000032c 	.word	0x2000032c

08003f30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f34:	4802      	ldr	r0, [pc, #8]	; (8003f40 <TIM4_IRQHandler+0x10>)
 8003f36:	f7fe fd99 	bl	8002a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200002ac 	.word	0x200002ac

08003f44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <DMA2_Stream0_IRQHandler+0x10>)
 8003f4a:	f7fd fcb3 	bl	80018b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000074 	.word	0x20000074

08003f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f5c:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <SystemInit+0x28>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <SystemInit+0x28>)
 8003f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <SystemInit+0x28>)
 8003f6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f72:	609a      	str	r2, [r3, #8]
#endif
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f98:	463b      	mov	r3, r7
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8003fa0:	4b1f      	ldr	r3, [pc, #124]	; (8004020 <MX_TIM1_Init+0x9c>)
 8003fa2:	4a20      	ldr	r2, [pc, #128]	; (8004024 <MX_TIM1_Init+0xa0>)
 8003fa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800;
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <MX_TIM1_Init+0x9c>)
 8003fa8:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8003fac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fae:	4b1c      	ldr	r3, [pc, #112]	; (8004020 <MX_TIM1_Init+0x9c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <MX_TIM1_Init+0x9c>)
 8003fb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <MX_TIM1_Init+0x9c>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <MX_TIM1_Init+0x9c>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <MX_TIM1_Init+0x9c>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003fce:	4814      	ldr	r0, [pc, #80]	; (8004020 <MX_TIM1_Init+0x9c>)
 8003fd0:	f7fe fc94 	bl	80028fc <HAL_TIM_Base_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003fda:	f7ff ff43 	bl	8003e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fe4:	f107 0308 	add.w	r3, r7, #8
 8003fe8:	4619      	mov	r1, r3
 8003fea:	480d      	ldr	r0, [pc, #52]	; (8004020 <MX_TIM1_Init+0x9c>)
 8003fec:	f7fe ff0c 	bl	8002e08 <HAL_TIM_ConfigClockSource>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003ff6:	f7ff ff35 	bl	8003e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004002:	463b      	mov	r3, r7
 8004004:	4619      	mov	r1, r3
 8004006:	4806      	ldr	r0, [pc, #24]	; (8004020 <MX_TIM1_Init+0x9c>)
 8004008:	f7ff faee 	bl	80035e8 <HAL_TIMEx_MasterConfigSynchronization>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8004012:	f7ff ff27 	bl	8003e64 <Error_Handler>
  }

}
 8004016:	bf00      	nop
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	2000032c 	.word	0x2000032c
 8004024:	40010000 	.word	0x40010000

08004028 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800402e:	f107 0308 	add.w	r3, r7, #8
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800403c:	463b      	mov	r3, r7
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <MX_TIM2_Init+0x94>)
 8004046:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800404a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <MX_TIM2_Init+0x94>)
 800404e:	2254      	movs	r2, #84	; 0x54
 8004050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004052:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <MX_TIM2_Init+0x94>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004058:	4b18      	ldr	r3, [pc, #96]	; (80040bc <MX_TIM2_Init+0x94>)
 800405a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800405e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <MX_TIM2_Init+0x94>)
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <MX_TIM2_Init+0x94>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800406c:	4813      	ldr	r0, [pc, #76]	; (80040bc <MX_TIM2_Init+0x94>)
 800406e:	f7fe fc45 	bl	80028fc <HAL_TIM_Base_Init>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004078:	f7ff fef4 	bl	8003e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800407c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	4619      	mov	r1, r3
 8004088:	480c      	ldr	r0, [pc, #48]	; (80040bc <MX_TIM2_Init+0x94>)
 800408a:	f7fe febd 	bl	8002e08 <HAL_TIM_ConfigClockSource>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004094:	f7ff fee6 	bl	8003e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004098:	2300      	movs	r3, #0
 800409a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409c:	2300      	movs	r3, #0
 800409e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040a0:	463b      	mov	r3, r7
 80040a2:	4619      	mov	r1, r3
 80040a4:	4805      	ldr	r0, [pc, #20]	; (80040bc <MX_TIM2_Init+0x94>)
 80040a6:	f7ff fa9f 	bl	80035e8 <HAL_TIMEx_MasterConfigSynchronization>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80040b0:	f7ff fed8 	bl	8003e64 <Error_Handler>
  }

}
 80040b4:	bf00      	nop
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	2000036c 	.word	0x2000036c

080040c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	; 0x28
 80040c4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	605a      	str	r2, [r3, #4]
 80040d8:	609a      	str	r2, [r3, #8]
 80040da:	60da      	str	r2, [r3, #12]
 80040dc:	611a      	str	r2, [r3, #16]
 80040de:	615a      	str	r2, [r3, #20]
 80040e0:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <MX_TIM3_Init+0xac>)
 80040e4:	4a22      	ldr	r2, [pc, #136]	; (8004170 <MX_TIM3_Init+0xb0>)
 80040e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80040e8:	4b20      	ldr	r3, [pc, #128]	; (800416c <MX_TIM3_Init+0xac>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ee:	4b1f      	ldr	r3, [pc, #124]	; (800416c <MX_TIM3_Init+0xac>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <MX_TIM3_Init+0xac>)
 80040f6:	f240 3247 	movw	r2, #839	; 0x347
 80040fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <MX_TIM3_Init+0xac>)
 80040fe:	2200      	movs	r2, #0
 8004100:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <MX_TIM3_Init+0xac>)
 8004104:	2200      	movs	r2, #0
 8004106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004108:	4818      	ldr	r0, [pc, #96]	; (800416c <MX_TIM3_Init+0xac>)
 800410a:	f7fe fc46 	bl	800299a <HAL_TIM_PWM_Init>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004114:	f7ff fea6 	bl	8003e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004118:	2300      	movs	r3, #0
 800411a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411c:	2300      	movs	r3, #0
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004120:	f107 0320 	add.w	r3, r7, #32
 8004124:	4619      	mov	r1, r3
 8004126:	4811      	ldr	r0, [pc, #68]	; (800416c <MX_TIM3_Init+0xac>)
 8004128:	f7ff fa5e 	bl	80035e8 <HAL_TIMEx_MasterConfigSynchronization>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004132:	f7ff fe97 	bl	8003e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004136:	2360      	movs	r3, #96	; 0x60
 8004138:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 670;
 800413a:	f240 239e 	movw	r3, #670	; 0x29e
 800413e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	220c      	movs	r2, #12
 800414c:	4619      	mov	r1, r3
 800414e:	4807      	ldr	r0, [pc, #28]	; (800416c <MX_TIM3_Init+0xac>)
 8004150:	f7fe fd94 	bl	8002c7c <HAL_TIM_PWM_ConfigChannel>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800415a:	f7ff fe83 	bl	8003e64 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800415e:	4803      	ldr	r0, [pc, #12]	; (800416c <MX_TIM3_Init+0xac>)
 8004160:	f000 f8d2 	bl	8004308 <HAL_TIM_MspPostInit>

}
 8004164:	bf00      	nop
 8004166:	3728      	adds	r7, #40	; 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	200002ec 	.word	0x200002ec
 8004170:	40000400 	.word	0x40000400

08004174 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800417a:	f107 0308 	add.w	r3, r7, #8
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	609a      	str	r2, [r3, #8]
 8004186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004188:	463b      	mov	r3, r7
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <MX_TIM4_Init+0x94>)
 8004192:	4a1e      	ldr	r2, [pc, #120]	; (800420c <MX_TIM4_Init+0x98>)
 8004194:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16800;
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <MX_TIM4_Init+0x94>)
 8004198:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800419c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <MX_TIM4_Init+0x94>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80041a4:	4b18      	ldr	r3, [pc, #96]	; (8004208 <MX_TIM4_Init+0x94>)
 80041a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80041aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ac:	4b16      	ldr	r3, [pc, #88]	; (8004208 <MX_TIM4_Init+0x94>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <MX_TIM4_Init+0x94>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80041b8:	4813      	ldr	r0, [pc, #76]	; (8004208 <MX_TIM4_Init+0x94>)
 80041ba:	f7fe fb9f 	bl	80028fc <HAL_TIM_Base_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80041c4:	f7ff fe4e 	bl	8003e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80041ce:	f107 0308 	add.w	r3, r7, #8
 80041d2:	4619      	mov	r1, r3
 80041d4:	480c      	ldr	r0, [pc, #48]	; (8004208 <MX_TIM4_Init+0x94>)
 80041d6:	f7fe fe17 	bl	8002e08 <HAL_TIM_ConfigClockSource>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80041e0:	f7ff fe40 	bl	8003e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041e4:	2300      	movs	r3, #0
 80041e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041ec:	463b      	mov	r3, r7
 80041ee:	4619      	mov	r1, r3
 80041f0:	4805      	ldr	r0, [pc, #20]	; (8004208 <MX_TIM4_Init+0x94>)
 80041f2:	f7ff f9f9 	bl	80035e8 <HAL_TIMEx_MasterConfigSynchronization>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80041fc:	f7ff fe32 	bl	8003e64 <Error_Handler>
  }

}
 8004200:	bf00      	nop
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200002ac 	.word	0x200002ac
 800420c:	40000800 	.word	0x40000800

08004210 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a26      	ldr	r2, [pc, #152]	; (80042b8 <HAL_TIM_Base_MspInit+0xa8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d116      	bne.n	8004250 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	4b25      	ldr	r3, [pc, #148]	; (80042bc <HAL_TIM_Base_MspInit+0xac>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	4a24      	ldr	r2, [pc, #144]	; (80042bc <HAL_TIM_Base_MspInit+0xac>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6453      	str	r3, [r2, #68]	; 0x44
 8004232:	4b22      	ldr	r3, [pc, #136]	; (80042bc <HAL_TIM_Base_MspInit+0xac>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
 8004242:	2019      	movs	r0, #25
 8004244:	f7fd f9f9 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004248:	2019      	movs	r0, #25
 800424a:	f7fd fa12 	bl	8001672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800424e:	e02e      	b.n	80042ae <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	4b17      	ldr	r3, [pc, #92]	; (80042bc <HAL_TIM_Base_MspInit+0xac>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_TIM_Base_MspInit+0xac>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6413      	str	r3, [r2, #64]	; 0x40
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <HAL_TIM_Base_MspInit+0xac>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]
}
 8004276:	e01a      	b.n	80042ae <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <HAL_TIM_Base_MspInit+0xb0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d115      	bne.n	80042ae <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <HAL_TIM_Base_MspInit+0xac>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <HAL_TIM_Base_MspInit+0xac>)
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_TIM_Base_MspInit+0xac>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	2100      	movs	r1, #0
 80042a2:	201e      	movs	r0, #30
 80042a4:	f7fd f9c9 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042a8:	201e      	movs	r0, #30
 80042aa:	f7fd f9e2 	bl	8001672 <HAL_NVIC_EnableIRQ>
}
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40000800 	.word	0x40000800

080042c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0b      	ldr	r2, [pc, #44]	; (8004300 <HAL_TIM_PWM_MspInit+0x3c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10d      	bne.n	80042f2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <HAL_TIM_PWM_MspInit+0x40>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <HAL_TIM_PWM_MspInit+0x40>)
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	6413      	str	r3, [r2, #64]	; 0x40
 80042e6:	4b07      	ldr	r3, [pc, #28]	; (8004304 <HAL_TIM_PWM_MspInit+0x40>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40000400 	.word	0x40000400
 8004304:	40023800 	.word	0x40023800

08004308 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	f107 030c 	add.w	r3, r7, #12
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a12      	ldr	r2, [pc, #72]	; (8004370 <HAL_TIM_MspPostInit+0x68>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d11d      	bne.n	8004366 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <HAL_TIM_MspPostInit+0x6c>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	4a10      	ldr	r2, [pc, #64]	; (8004374 <HAL_TIM_MspPostInit+0x6c>)
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	6313      	str	r3, [r2, #48]	; 0x30
 800433a:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <HAL_TIM_MspPostInit+0x6c>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004346:	2302      	movs	r3, #2
 8004348:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434a:	2302      	movs	r3, #2
 800434c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004356:	2302      	movs	r3, #2
 8004358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435a:	f107 030c 	add.w	r3, r7, #12
 800435e:	4619      	mov	r1, r3
 8004360:	4805      	ldr	r0, [pc, #20]	; (8004378 <HAL_TIM_MspPostInit+0x70>)
 8004362:	f7fd fd0f 	bl	8001d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004366:	bf00      	nop
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40000400 	.word	0x40000400
 8004374:	40023800 	.word	0x40023800
 8004378:	40020400 	.word	0x40020400

0800437c <setYellowState>:
#include "utilities.h"
#include "dma.h"

void setYellowState(void){
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8004380:	2200      	movs	r2, #0
 8004382:	2110      	movs	r1, #16
 8004384:	4803      	ldr	r0, [pc, #12]	; (8004394 <setYellowState+0x18>)
 8004386:	f7fd fe97 	bl	80020b8 <HAL_GPIO_WritePin>
	MPPTState = MPPT_STATE_YELLOW;
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <setYellowState+0x1c>)
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
}
 8004390:	bf00      	nop
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	20000254 	.word	0x20000254

0800439c <resetYellowState>:

void resetYellowState(void){
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80043a0:	2201      	movs	r2, #1
 80043a2:	2110      	movs	r1, #16
 80043a4:	4802      	ldr	r0, [pc, #8]	; (80043b0 <resetYellowState+0x14>)
 80043a6:	f7fd fe87 	bl	80020b8 <HAL_GPIO_WritePin>
}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000

080043b4 <setRedState>:

void setRedState(void){
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80043b8:	2200      	movs	r2, #0
 80043ba:	2120      	movs	r1, #32
 80043bc:	4804      	ldr	r0, [pc, #16]	; (80043d0 <setRedState+0x1c>)
 80043be:	f7fd fe7b 	bl	80020b8 <HAL_GPIO_WritePin>
	disablePWM();
 80043c2:	f000 f83f 	bl	8004444 <disablePWM>
	MPPTState = MPPT_STATE_RED;
 80043c6:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <setRedState+0x20>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
}
 80043cc:	bf00      	nop
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	20000254 	.word	0x20000254

080043d8 <resetRedState>:
void resetRedState(void){
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80043dc:	2201      	movs	r2, #1
 80043de:	2120      	movs	r1, #32
 80043e0:	4802      	ldr	r0, [pc, #8]	; (80043ec <resetRedState+0x14>)
 80043e2:	f7fd fe69 	bl	80020b8 <HAL_GPIO_WritePin>
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000

080043f0 <setGreenState>:

void setGreenState(void){
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2140      	movs	r1, #64	; 0x40
 80043f8:	4804      	ldr	r0, [pc, #16]	; (800440c <setGreenState+0x1c>)
 80043fa:	f7fd fe5d 	bl	80020b8 <HAL_GPIO_WritePin>
	enablePWM();
 80043fe:	f000 f815 	bl	800442c <enablePWM>
	MPPTState = MPPT_STATE_GREEN;
 8004402:	4b03      	ldr	r3, [pc, #12]	; (8004410 <setGreenState+0x20>)
 8004404:	2202      	movs	r2, #2
 8004406:	701a      	strb	r2, [r3, #0]
}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000
 8004410:	20000254 	.word	0x20000254

08004414 <resetGreenState>:
void resetGreenState(void){
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8004418:	2201      	movs	r2, #1
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	4802      	ldr	r0, [pc, #8]	; (8004428 <resetGreenState+0x14>)
 800441e:	f7fd fe4b 	bl	80020b8 <HAL_GPIO_WritePin>
}
 8004422:	bf00      	nop
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <enablePWM>:

void enablePWM(void){
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8004430:	2201      	movs	r2, #1
 8004432:	2101      	movs	r1, #1
 8004434:	4802      	ldr	r0, [pc, #8]	; (8004440 <enablePWM+0x14>)
 8004436:	f7fd fe3f 	bl	80020b8 <HAL_GPIO_WritePin>
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40020400 	.word	0x40020400

08004444 <disablePWM>:
void disablePWM(void){
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8004448:	2200      	movs	r2, #0
 800444a:	2101      	movs	r1, #1
 800444c:	4802      	ldr	r0, [pc, #8]	; (8004458 <disablePWM+0x14>)
 800444e:	f7fd fe33 	bl	80020b8 <HAL_GPIO_WritePin>
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40020400 	.word	0x40020400

0800445c <readVoltageAndCurrent>:


void readVoltageAndCurrent(uint32_t * valueContainer){
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	//
	//Battery:  318 - 13V, 500 - 20V, 800 - 32V, 1783 - 73,7V, 1907 - 80V, 2500 - 140V
	//Array:  512 - 20V, 816 - 32V


	batteryVoltageADC = valueContainer[3];
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a09      	ldr	r2, [pc, #36]	; (8004490 <readVoltageAndCurrent+0x34>)
 800446a:	6013      	str	r3, [r2, #0]
	batteryCurrentADC = valueContainer[1];
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a08      	ldr	r2, [pc, #32]	; (8004494 <readVoltageAndCurrent+0x38>)
 8004472:	6013      	str	r3, [r2, #0]

	arrayVoltageADC = valueContainer[2];
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a07      	ldr	r2, [pc, #28]	; (8004498 <readVoltageAndCurrent+0x3c>)
 800447a:	6013      	str	r3, [r2, #0]
	arrayCurrentADC = valueContainer[0];
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a06      	ldr	r2, [pc, #24]	; (800449c <readVoltageAndCurrent+0x40>)
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	20000288 	.word	0x20000288
 8004494:	200001b4 	.word	0x200001b4
 8004498:	20000160 	.word	0x20000160
 800449c:	20000220 	.word	0x20000220

080044a0 <getArrayStatus>:

void getArrayStatus(void){
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
	calculateMeasurementsAverage();
 80044a4:	f000 f8ce 	bl	8004644 <calculateMeasurementsAverage>

	if(arrayStatus == ARRAY_ERROR){
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <getArrayStatus+0x60>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d110      	bne.n	80044d2 <getArrayStatus+0x32>
		if (averageArrayVoltage >= ARRAY_TURN_ON_TH)
 80044b0:	4b14      	ldr	r3, [pc, #80]	; (8004504 <getArrayStatus+0x64>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 80044b8:	d902      	bls.n	80044c0 <getArrayStatus+0x20>
				arrayStatus = ARRAY_OK;
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <getArrayStatus+0x60>)
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]

		if (averageArrayVoltage < ARRAY_TURN_ON_TH)
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <getArrayStatus+0x64>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 80044c8:	d817      	bhi.n	80044fa <getArrayStatus+0x5a>
			arrayStatus = ARRAY_ERROR;
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <getArrayStatus+0x60>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]

		if (averageArrayVoltage < ARRAY_TURN_OFF_TH)
			arrayStatus = ARRAY_ERROR;
	}

}
 80044d0:	e013      	b.n	80044fa <getArrayStatus+0x5a>
	} else if (arrayStatus == ARRAY_OK){
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <getArrayStatus+0x60>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d10f      	bne.n	80044fa <getArrayStatus+0x5a>
		if (averageArrayVoltage >= ARRAY_TURN_OFF_TH)
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <getArrayStatus+0x64>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 80044e2:	d902      	bls.n	80044ea <getArrayStatus+0x4a>
			arrayStatus = ARRAY_OK;
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <getArrayStatus+0x60>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
		if (averageArrayVoltage < ARRAY_TURN_OFF_TH)
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <getArrayStatus+0x64>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 80044f2:	d802      	bhi.n	80044fa <getArrayStatus+0x5a>
			arrayStatus = ARRAY_ERROR;
 80044f4:	4b02      	ldr	r3, [pc, #8]	; (8004500 <getArrayStatus+0x60>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000229 	.word	0x20000229
 8004504:	200001b0 	.word	0x200001b0

08004508 <getBatteryStatus>:

void getBatteryStatus(void){
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
	calculateMeasurementsAverage();
 800450c:	f000 f89a 	bl	8004644 <calculateMeasurementsAverage>

	if (batteryStatus == BATTERY_ERROR){
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <getBatteryStatus+0xa0>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d11e      	bne.n	8004556 <getBatteryStatus+0x4e>
		if (averageBatteryVoltage >= BATTERY_ON_BOTTOM_TH || averageBatteryVoltage <= BATTERY_ON_UPPER_TH)
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <getBatteryStatus+0xa4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f240 724d 	movw	r2, #1869	; 0x74d
 8004520:	4293      	cmp	r3, r2
 8004522:	d805      	bhi.n	8004530 <getBatteryStatus+0x28>
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <getBatteryStatus+0xa4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f640 1206 	movw	r2, #2310	; 0x906
 800452c:	4293      	cmp	r3, r2
 800452e:	d802      	bhi.n	8004536 <getBatteryStatus+0x2e>
			batteryStatus = BATTERY_OK;
 8004530:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <getBatteryStatus+0xa0>)
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
		if (averageBatteryVoltage < BATTERY_ON_BOTTOM_TH || averageBatteryVoltage > BATTERY_ON_UPPER_TH)
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <getBatteryStatus+0xa4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f240 724d 	movw	r2, #1869	; 0x74d
 800453e:	4293      	cmp	r3, r2
 8004540:	d905      	bls.n	800454e <getBatteryStatus+0x46>
 8004542:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <getBatteryStatus+0xa4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f640 1206 	movw	r2, #2310	; 0x906
 800454a:	4293      	cmp	r3, r2
 800454c:	d927      	bls.n	800459e <getBatteryStatus+0x96>
			batteryStatus = BATTERY_ERROR;
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <getBatteryStatus+0xa0>)
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
		return ;
 8004554:	e023      	b.n	800459e <getBatteryStatus+0x96>

	} else if (batteryStatus == BATTERY_OK) {
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <getBatteryStatus+0xa0>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d122      	bne.n	80045a4 <getBatteryStatus+0x9c>
		if (averageBatteryVoltage >= BATTERY_OFF_BOTTOM_TH || averageBatteryVoltage <= BATTERY_OFF_UPPER_TH)
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <getBatteryStatus+0xa4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8004566:	4293      	cmp	r3, r2
 8004568:	d805      	bhi.n	8004576 <getBatteryStatus+0x6e>
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <getBatteryStatus+0xa4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f640 122e 	movw	r2, #2350	; 0x92e
 8004572:	4293      	cmp	r3, r2
 8004574:	d802      	bhi.n	800457c <getBatteryStatus+0x74>
			batteryStatus = BATTERY_OK;
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <getBatteryStatus+0xa0>)
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]
		if (averageBatteryVoltage < BATTERY_OFF_BOTTOM_TH || averageBatteryVoltage > BATTERY_OFF_UPPER_TH)
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <getBatteryStatus+0xa4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8004584:	4293      	cmp	r3, r2
 8004586:	d905      	bls.n	8004594 <getBatteryStatus+0x8c>
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <getBatteryStatus+0xa4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f640 122e 	movw	r2, #2350	; 0x92e
 8004590:	4293      	cmp	r3, r2
 8004592:	d906      	bls.n	80045a2 <getBatteryStatus+0x9a>
			batteryStatus = BATTERY_ERROR;
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <getBatteryStatus+0xa0>)
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
		return;
 800459a:	bf00      	nop
 800459c:	e001      	b.n	80045a2 <getBatteryStatus+0x9a>
		return ;
 800459e:	bf00      	nop
 80045a0:	e000      	b.n	80045a4 <getBatteryStatus+0x9c>
		return;
 80045a2:	bf00      	nop
	}
}
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200001a4 	.word	0x200001a4
 80045ac:	200001ac 	.word	0x200001ac

080045b0 <storeMeasurements>:


void storeMeasurements(void){
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
	if (lastMeasurementsIterator + 1 < NUMBER_OF_LAST_MEASUREMENTS)
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <storeMeasurements+0x6c>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	2b0e      	cmp	r3, #14
 80045bc:	dc06      	bgt.n	80045cc <storeMeasurements+0x1c>
		lastMeasurementsIterator++;
 80045be:	4b17      	ldr	r3, [pc, #92]	; (800461c <storeMeasurements+0x6c>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	3301      	adds	r3, #1
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <storeMeasurements+0x6c>)
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e002      	b.n	80045d2 <storeMeasurements+0x22>
	else
		lastMeasurementsIterator = 0;
 80045cc:	4b13      	ldr	r3, [pc, #76]	; (800461c <storeMeasurements+0x6c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]

	readVoltageAndCurrent(valueContainerADC);
 80045d2:	4813      	ldr	r0, [pc, #76]	; (8004620 <storeMeasurements+0x70>)
 80045d4:	f7ff ff42 	bl	800445c <readVoltageAndCurrent>

	lastADCArrayVoltage[lastMeasurementsIterator] = arrayVoltageADC;
 80045d8:	4b10      	ldr	r3, [pc, #64]	; (800461c <storeMeasurements+0x6c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	4619      	mov	r1, r3
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <storeMeasurements+0x74>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a11      	ldr	r2, [pc, #68]	; (8004628 <storeMeasurements+0x78>)
 80045e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	lastADCArrayCurrent[lastMeasurementsIterator] = arrayCurrentADC;
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <storeMeasurements+0x6c>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	4619      	mov	r1, r3
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <storeMeasurements+0x7c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <storeMeasurements+0x80>)
 80045f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	lastADCBatteryVoltage[lastMeasurementsIterator] = batteryVoltageADC;
 80045f8:	4b08      	ldr	r3, [pc, #32]	; (800461c <storeMeasurements+0x6c>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4619      	mov	r1, r3
 80045fe:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <storeMeasurements+0x84>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a0d      	ldr	r2, [pc, #52]	; (8004638 <storeMeasurements+0x88>)
 8004604:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	lastADCBatteryCurrent[lastMeasurementsIterator] = batteryCurrentADC;
 8004608:	4b04      	ldr	r3, [pc, #16]	; (800461c <storeMeasurements+0x6c>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	4619      	mov	r1, r3
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <storeMeasurements+0x8c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a0b      	ldr	r2, [pc, #44]	; (8004640 <storeMeasurements+0x90>)
 8004614:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8004618:	bf00      	nop
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000228 	.word	0x20000228
 8004620:	20000110 	.word	0x20000110
 8004624:	20000160 	.word	0x20000160
 8004628:	20000168 	.word	0x20000168
 800462c:	20000220 	.word	0x20000220
 8004630:	20000120 	.word	0x20000120
 8004634:	20000288 	.word	0x20000288
 8004638:	200000d4 	.word	0x200000d4
 800463c:	200001b4 	.word	0x200001b4
 8004640:	200001e4 	.word	0x200001e4

08004644 <calculateMeasurementsAverage>:

void calculateMeasurementsAverage(void){
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
	averageArrayVoltage = 0;
 800464a:	4b2f      	ldr	r3, [pc, #188]	; (8004708 <calculateMeasurementsAverage+0xc4>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
	averageArrayCurrent = 0;
 8004650:	4b2e      	ldr	r3, [pc, #184]	; (800470c <calculateMeasurementsAverage+0xc8>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
	averageBatteryVoltage = 0;
 8004656:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <calculateMeasurementsAverage+0xcc>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
	averageBatteryCurrent = 0;
 800465c:	4b2d      	ldr	r3, [pc, #180]	; (8004714 <calculateMeasurementsAverage+0xd0>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 8004662:	2300      	movs	r3, #0
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	e026      	b.n	80046b6 <calculateMeasurementsAverage+0x72>
		averageArrayVoltage += lastADCArrayVoltage[i];
 8004668:	4a2b      	ldr	r2, [pc, #172]	; (8004718 <calculateMeasurementsAverage+0xd4>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <calculateMeasurementsAverage+0xc4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4413      	add	r3, r2
 8004676:	4a24      	ldr	r2, [pc, #144]	; (8004708 <calculateMeasurementsAverage+0xc4>)
 8004678:	6013      	str	r3, [r2, #0]
		averageArrayCurrent += lastADCArrayCurrent[i];
 800467a:	4a28      	ldr	r2, [pc, #160]	; (800471c <calculateMeasurementsAverage+0xd8>)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004682:	4b22      	ldr	r3, [pc, #136]	; (800470c <calculateMeasurementsAverage+0xc8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4413      	add	r3, r2
 8004688:	4a20      	ldr	r2, [pc, #128]	; (800470c <calculateMeasurementsAverage+0xc8>)
 800468a:	6013      	str	r3, [r2, #0]
		averageBatteryVoltage += lastADCBatteryVoltage[i];
 800468c:	4a24      	ldr	r2, [pc, #144]	; (8004720 <calculateMeasurementsAverage+0xdc>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004694:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <calculateMeasurementsAverage+0xcc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4413      	add	r3, r2
 800469a:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <calculateMeasurementsAverage+0xcc>)
 800469c:	6013      	str	r3, [r2, #0]
		averageBatteryCurrent += lastADCBatteryCurrent[i];
 800469e:	4a21      	ldr	r2, [pc, #132]	; (8004724 <calculateMeasurementsAverage+0xe0>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <calculateMeasurementsAverage+0xd0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4413      	add	r3, r2
 80046ac:	4a19      	ldr	r2, [pc, #100]	; (8004714 <calculateMeasurementsAverage+0xd0>)
 80046ae:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3301      	adds	r3, #1
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b0e      	cmp	r3, #14
 80046ba:	ddd5      	ble.n	8004668 <calculateMeasurementsAverage+0x24>
	}
	averageArrayVoltage /= NUMBER_OF_LAST_MEASUREMENTS;
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <calculateMeasurementsAverage+0xc4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a19      	ldr	r2, [pc, #100]	; (8004728 <calculateMeasurementsAverage+0xe4>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	08db      	lsrs	r3, r3, #3
 80046c8:	4a0f      	ldr	r2, [pc, #60]	; (8004708 <calculateMeasurementsAverage+0xc4>)
 80046ca:	6013      	str	r3, [r2, #0]
	averageArrayCurrent /= NUMBER_OF_LAST_MEASUREMENTS;
 80046cc:	4b0f      	ldr	r3, [pc, #60]	; (800470c <calculateMeasurementsAverage+0xc8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a15      	ldr	r2, [pc, #84]	; (8004728 <calculateMeasurementsAverage+0xe4>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	08db      	lsrs	r3, r3, #3
 80046d8:	4a0c      	ldr	r2, [pc, #48]	; (800470c <calculateMeasurementsAverage+0xc8>)
 80046da:	6013      	str	r3, [r2, #0]
	averageBatteryVoltage /= NUMBER_OF_LAST_MEASUREMENTS;
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <calculateMeasurementsAverage+0xcc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a11      	ldr	r2, [pc, #68]	; (8004728 <calculateMeasurementsAverage+0xe4>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	08db      	lsrs	r3, r3, #3
 80046e8:	4a09      	ldr	r2, [pc, #36]	; (8004710 <calculateMeasurementsAverage+0xcc>)
 80046ea:	6013      	str	r3, [r2, #0]
	averageBatteryCurrent /= NUMBER_OF_LAST_MEASUREMENTS;
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <calculateMeasurementsAverage+0xd0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0d      	ldr	r2, [pc, #52]	; (8004728 <calculateMeasurementsAverage+0xe4>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	08db      	lsrs	r3, r3, #3
 80046f8:	4a06      	ldr	r2, [pc, #24]	; (8004714 <calculateMeasurementsAverage+0xd0>)
 80046fa:	6013      	str	r3, [r2, #0]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	200001b0 	.word	0x200001b0
 800470c:	200002a8 	.word	0x200002a8
 8004710:	200001ac 	.word	0x200001ac
 8004714:	200001b8 	.word	0x200001b8
 8004718:	20000168 	.word	0x20000168
 800471c:	20000120 	.word	0x20000120
 8004720:	200000d4 	.word	0x200000d4
 8004724:	200001e4 	.word	0x200001e4
 8004728:	88888889 	.word	0x88888889

0800472c <measurementsInit>:

void measurementsInit(void){
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
	lastMeasurementsIterator = 0;
 8004732:	4b0e      	ldr	r3, [pc, #56]	; (800476c <measurementsInit+0x40>)
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]

	startReadingDMA(valueContainerADC);
 8004738:	480d      	ldr	r0, [pc, #52]	; (8004770 <measurementsInit+0x44>)
 800473a:	f7ff fa37 	bl	8003bac <startReadingDMA>

	HAL_Delay(100); // to get valuable ADC measurements
 800473e:	2064      	movs	r0, #100	; 0x64
 8004740:	f7fb ff34 	bl	80005ac <HAL_Delay>

	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 8004744:	2300      	movs	r3, #0
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	e007      	b.n	800475a <measurementsInit+0x2e>
		storeMeasurements();
 800474a:	f7ff ff31 	bl	80045b0 <storeMeasurements>
		HAL_Delay(DELAY_BETWEEN_MEASUREMENTS);
 800474e:	200a      	movs	r0, #10
 8004750:	f7fb ff2c 	bl	80005ac <HAL_Delay>
	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3301      	adds	r3, #1
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b0e      	cmp	r3, #14
 800475e:	ddf4      	ble.n	800474a <measurementsInit+0x1e>
	}

	calculateMeasurementsAverage();
 8004760:	f7ff ff70 	bl	8004644 <calculateMeasurementsAverage>
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000228 	.word	0x20000228
 8004770:	20000110 	.word	0x20000110

08004774 <checkArrayConnection>:

void checkArrayConnection(void){
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0

	getArrayStatus();
 8004778:	f7ff fe92 	bl	80044a0 <getArrayStatus>

	if(arrayStatus == ARRAY_ERROR)
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <checkArrayConnection+0x34>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <checkArrayConnection+0x1c>
	{
		setRedState();
 8004784:	f7ff fe16 	bl	80043b4 <setRedState>
		resetGreenState();
 8004788:	f7ff fe44 	bl	8004414 <resetGreenState>
		resetYellowState();
 800478c:	f7ff fe06 	bl	800439c <resetYellowState>
	}

	if(arrayStatus == ARRAY_OK)
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <checkArrayConnection+0x34>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <checkArrayConnection+0x30>
	{
		resetRedState();
 8004798:	f7ff fe1e 	bl	80043d8 <resetRedState>
		setGreenState();
 800479c:	f7ff fe28 	bl	80043f0 <setGreenState>
		resetYellowState();
 80047a0:	f7ff fdfc 	bl	800439c <resetYellowState>
	}

}
 80047a4:	bf00      	nop
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20000229 	.word	0x20000229

080047ac <checkBatteryConnection>:

void checkBatteryConnection(void){
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0

	getBatteryStatus();
 80047b0:	f7ff feaa 	bl	8004508 <getBatteryStatus>

	if(batteryStatus == BATTERY_ERROR)
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <checkBatteryConnection+0x34>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <checkBatteryConnection+0x1c>
	{
		setRedState();
 80047bc:	f7ff fdfa 	bl	80043b4 <setRedState>
		resetGreenState();
 80047c0:	f7ff fe28 	bl	8004414 <resetGreenState>
		resetYellowState();
 80047c4:	f7ff fdea 	bl	800439c <resetYellowState>
	}
	if(batteryStatus == BATTERY_OK)
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <checkBatteryConnection+0x34>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d105      	bne.n	80047dc <checkBatteryConnection+0x30>
	{
		resetRedState();
 80047d0:	f7ff fe02 	bl	80043d8 <resetRedState>
		setGreenState();
 80047d4:	f7ff fe0c 	bl	80043f0 <setGreenState>
		resetYellowState();
 80047d8:	f7ff fde0 	bl	800439c <resetYellowState>
	}
}
 80047dc:	bf00      	nop
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	200001a4 	.word	0x200001a4

080047e4 <calculateInputPower>:

void calculateInputPower(void){
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
	inputPower = averageArrayCurrent * averageArrayVoltage;
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <calculateInputPower+0x20>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a06      	ldr	r2, [pc, #24]	; (8004808 <calculateInputPower+0x24>)
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	fb02 f303 	mul.w	r3, r2, r3
 80047f4:	4a05      	ldr	r2, [pc, #20]	; (800480c <calculateInputPower+0x28>)
 80047f6:	6013      	str	r3, [r2, #0]
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	200002a8 	.word	0x200002a8
 8004808:	200001b0 	.word	0x200001b0
 800480c:	200001a8 	.word	0x200001a8

08004810 <setDutyCycle>:
void setDutyCycle(uint32_t dutyCyclePerMille){
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	TIM3->CCR4 = MAX_COUNTER_VALUE*dutyCyclePerMille/1000;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f240 3247 	movw	r2, #839	; 0x347
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	4a06      	ldr	r2, [pc, #24]	; (800483c <setDutyCycle+0x2c>)
 8004824:	4906      	ldr	r1, [pc, #24]	; (8004840 <setDutyCycle+0x30>)
 8004826:	fba1 1303 	umull	r1, r3, r1, r3
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40000400 	.word	0x40000400
 8004840:	10624dd3 	.word	0x10624dd3

08004844 <MPPTInit>:

	prevStepDirection = STEP_DOWN;
}


void MPPTInit(void){
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
	prevStepDirection = STEP_UP;
 8004848:	4b12      	ldr	r3, [pc, #72]	; (8004894 <MPPTInit+0x50>)
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
	// set duty cycle
	setDutyCycle(DUTY_CYCLE_INITIALIZED);
 800484e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004852:	f7ff ffdd 	bl	8004810 <setDutyCycle>

	// reset LED State
	resetYellowState();
 8004856:	f7ff fda1 	bl	800439c <resetYellowState>
	resetRedState();
 800485a:	f7ff fdbd 	bl	80043d8 <resetRedState>
	resetGreenState();
 800485e:	f7ff fdd9 	bl	8004414 <resetGreenState>

	// initialize array and battery status
	arrayStatus = ARRAY_ERROR;
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <MPPTInit+0x54>)
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
	batteryStatus = BATTERY_ERROR;
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <MPPTInit+0x58>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]

	disablePWM();
 800486e:	f7ff fde9 	bl	8004444 <disablePWM>

	measurementsInit();
 8004872:	f7ff ff5b 	bl	800472c <measurementsInit>
	checkArrayConnection();
 8004876:	f7ff ff7d 	bl	8004774 <checkArrayConnection>
	checkBatteryConnection();
 800487a:	f7ff ff97 	bl	80047ac <checkBatteryConnection>

	if(MPPTState == MPPT_STATE_GREEN)
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <MPPTInit+0x5c>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d101      	bne.n	800488a <MPPTInit+0x46>
	{
		calculateInputPower();
 8004886:	f7ff ffad 	bl	80047e4 <calculateInputPower>
	}
	isMPPTInitialised = 1;
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <MPPTInit+0x60>)
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]

}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000255 	.word	0x20000255
 8004898:	20000229 	.word	0x20000229
 800489c:	200001a4 	.word	0x200001a4
 80048a0:	20000254 	.word	0x20000254
 80048a4:	2000015c 	.word	0x2000015c

080048a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80048ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80048ae:	e003      	b.n	80048b8 <LoopCopyDataInit>

080048b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80048b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80048b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80048b6:	3104      	adds	r1, #4

080048b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80048b8:	480b      	ldr	r0, [pc, #44]	; (80048e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80048ba:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80048bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80048be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80048c0:	d3f6      	bcc.n	80048b0 <CopyDataInit>
  ldr  r2, =_sbss
 80048c2:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80048c4:	e002      	b.n	80048cc <LoopFillZerobss>

080048c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80048c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80048c8:	f842 3b04 	str.w	r3, [r2], #4

080048cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80048ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048d0:	d3f9      	bcc.n	80048c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80048d2:	f7ff fb41 	bl	8003f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048d6:	f000 f811 	bl	80048fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048da:	f7ff f9f9 	bl	8003cd0 <main>
  bx  lr    
 80048de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80048e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80048e4:	08004994 	.word	0x08004994
  ldr  r0, =_sdata
 80048e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80048ec:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80048f0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80048f4:	200003ac 	.word	0x200003ac

080048f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048f8:	e7fe      	b.n	80048f8 <ADC_IRQHandler>
	...

080048fc <__libc_init_array>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	4e0d      	ldr	r6, [pc, #52]	; (8004934 <__libc_init_array+0x38>)
 8004900:	4c0d      	ldr	r4, [pc, #52]	; (8004938 <__libc_init_array+0x3c>)
 8004902:	1ba4      	subs	r4, r4, r6
 8004904:	10a4      	asrs	r4, r4, #2
 8004906:	2500      	movs	r5, #0
 8004908:	42a5      	cmp	r5, r4
 800490a:	d109      	bne.n	8004920 <__libc_init_array+0x24>
 800490c:	4e0b      	ldr	r6, [pc, #44]	; (800493c <__libc_init_array+0x40>)
 800490e:	4c0c      	ldr	r4, [pc, #48]	; (8004940 <__libc_init_array+0x44>)
 8004910:	f000 f820 	bl	8004954 <_init>
 8004914:	1ba4      	subs	r4, r4, r6
 8004916:	10a4      	asrs	r4, r4, #2
 8004918:	2500      	movs	r5, #0
 800491a:	42a5      	cmp	r5, r4
 800491c:	d105      	bne.n	800492a <__libc_init_array+0x2e>
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004924:	4798      	blx	r3
 8004926:	3501      	adds	r5, #1
 8004928:	e7ee      	b.n	8004908 <__libc_init_array+0xc>
 800492a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800492e:	4798      	blx	r3
 8004930:	3501      	adds	r5, #1
 8004932:	e7f2      	b.n	800491a <__libc_init_array+0x1e>
 8004934:	0800498c 	.word	0x0800498c
 8004938:	0800498c 	.word	0x0800498c
 800493c:	0800498c 	.word	0x0800498c
 8004940:	08004990 	.word	0x08004990

08004944 <memset>:
 8004944:	4402      	add	r2, r0
 8004946:	4603      	mov	r3, r0
 8004948:	4293      	cmp	r3, r2
 800494a:	d100      	bne.n	800494e <memset+0xa>
 800494c:	4770      	bx	lr
 800494e:	f803 1b01 	strb.w	r1, [r3], #1
 8004952:	e7f9      	b.n	8004948 <memset+0x4>

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
