
MPPT-V_1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800499c  0800499c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049a4  080049a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000000c  080049b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  080049b8  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f569  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265f  00000000  00000000  0002f5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00031c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  000329a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216d4  00000000  00000000  00033610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edf5  00000000  00000000  00054ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caa42  00000000  00000000  00063ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e51b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000372c  00000000  00000000  0012e570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800496c 	.word	0x0800496c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800496c 	.word	0x0800496c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_Init+0x40>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <HAL_Init+0x40>)
 80004ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_Init+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <HAL_Init+0x40>)
 80004d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <HAL_Init+0x40>)
 80004e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e8:	2003      	movs	r0, #3
 80004ea:	f001 f899 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 f808 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f4:	f003 fcd0 	bl	8003e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40023c00 	.word	0x40023c00

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_InitTick+0x54>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x58>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f001 f8b1 	bl	800168a <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	e00e      	b.n	8000550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d80a      	bhi.n	800054e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	2200      	movs	r2, #0
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f001 f879 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <HAL_InitTick+0x5c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
 800054c:	e000      	b.n	8000550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000008 	.word	0x20000008
 800055c:	20000004 	.word	0x20000004
 8000560:	20000000 	.word	0x20000000

08000564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_IncTick+0x20>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x24>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_IncTick+0x24>)
 8000576:	6013      	str	r3, [r2, #0]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000004 	.word	0x20000004
 8000588:	20000028 	.word	0x20000028

0800058c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return uwTick;
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <HAL_GetTick+0x14>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	f7ff ffee 	bl	800058c <HAL_GetTick>
 80005b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005bc:	d005      	beq.n	80005ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_Delay+0x44>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4413      	add	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	bf00      	nop
 80005cc:	f7ff ffde 	bl	800058c <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d8f7      	bhi.n	80005cc <HAL_Delay+0x28>
  {
  }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004

080005ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e033      	b.n	800066a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f003 f90a 	bl	8003824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	f003 0310 	and.w	r3, r3, #16
 8000626:	2b00      	cmp	r3, #0
 8000628:	d118      	bne.n	800065c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000632:	f023 0302 	bic.w	r3, r3, #2
 8000636:	f043 0202 	orr.w	r2, r3, #2
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 fa4a 	bl	8000ad8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f023 0303 	bic.w	r3, r3, #3
 8000652:	f043 0201 	orr.w	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	641a      	str	r2, [r3, #64]	; 0x40
 800065a:	e001      	b.n	8000660 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000668:	7bfb      	ldrb	r3, [r7, #15]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800068a:	2b01      	cmp	r3, #1
 800068c:	d101      	bne.n	8000692 <HAL_ADC_Start_DMA+0x1e>
 800068e:	2302      	movs	r3, #2
 8000690:	e0cc      	b.n	800082c <HAL_ADC_Start_DMA+0x1b8>
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2201      	movs	r2, #1
 8000696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d018      	beq.n	80006da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f042 0201 	orr.w	r2, r2, #1
 80006b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006b8:	4b5e      	ldr	r3, [pc, #376]	; (8000834 <HAL_ADC_Start_DMA+0x1c0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a5e      	ldr	r2, [pc, #376]	; (8000838 <HAL_ADC_Start_DMA+0x1c4>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	0c9a      	lsrs	r2, r3, #18
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006cc:	e002      	b.n	80006d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f9      	bne.n	80006ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	f040 80a0 	bne.w	800082a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006f2:	f023 0301 	bic.w	r3, r3, #1
 80006f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000708:	2b00      	cmp	r3, #0
 800070a:	d007      	beq.n	800071c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000714:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000728:	d106      	bne.n	8000738 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f023 0206 	bic.w	r2, r3, #6
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	645a      	str	r2, [r3, #68]	; 0x44
 8000736:	e002      	b.n	800073e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2200      	movs	r2, #0
 800073c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2200      	movs	r2, #0
 8000742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <HAL_ADC_Start_DMA+0x1c8>)
 8000748:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800074e:	4a3c      	ldr	r2, [pc, #240]	; (8000840 <HAL_ADC_Start_DMA+0x1cc>)
 8000750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000756:	4a3b      	ldr	r2, [pc, #236]	; (8000844 <HAL_ADC_Start_DMA+0x1d0>)
 8000758:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075e:	4a3a      	ldr	r2, [pc, #232]	; (8000848 <HAL_ADC_Start_DMA+0x1d4>)
 8000760:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800076a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800077a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800078a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	334c      	adds	r3, #76	; 0x4c
 8000796:	4619      	mov	r1, r3
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f001 f830 	bl	8001800 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f003 031f 	and.w	r3, r3, #31
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d12a      	bne.n	8000802 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a26      	ldr	r2, [pc, #152]	; (800084c <HAL_ADC_Start_DMA+0x1d8>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d015      	beq.n	80007e2 <HAL_ADC_Start_DMA+0x16e>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a25      	ldr	r2, [pc, #148]	; (8000850 <HAL_ADC_Start_DMA+0x1dc>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d105      	bne.n	80007cc <HAL_ADC_Start_DMA+0x158>
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <HAL_ADC_Start_DMA+0x1c8>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f003 031f 	and.w	r3, r3, #31
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00a      	beq.n	80007e2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <HAL_ADC_Start_DMA+0x1e0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d129      	bne.n	800082a <HAL_ADC_Start_DMA+0x1b6>
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_ADC_Start_DMA+0x1c8>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d123      	bne.n	800082a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d11c      	bne.n	800082a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	689a      	ldr	r2, [r3, #8]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	e013      	b.n	800082a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <HAL_ADC_Start_DMA+0x1d8>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d10e      	bne.n	800082a <HAL_ADC_Start_DMA+0x1b6>
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d107      	bne.n	800082a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000828:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000008 	.word	0x20000008
 8000838:	431bde83 	.word	0x431bde83
 800083c:	40012300 	.word	0x40012300
 8000840:	08000cd1 	.word	0x08000cd1
 8000844:	08000d8b 	.word	0x08000d8b
 8000848:	08000da7 	.word	0x08000da7
 800084c:	40012000 	.word	0x40012000
 8000850:	40012100 	.word	0x40012100
 8000854:	40012200 	.word	0x40012200

08000858 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d101      	bne.n	80008b0 <HAL_ADC_ConfigChannel+0x1c>
 80008ac:	2302      	movs	r3, #2
 80008ae:	e105      	b.n	8000abc <HAL_ADC_ConfigChannel+0x228>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2201      	movs	r2, #1
 80008b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b09      	cmp	r3, #9
 80008be:	d925      	bls.n	800090c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	68d9      	ldr	r1, [r3, #12]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	3b1e      	subs	r3, #30
 80008d6:	2207      	movs	r2, #7
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43da      	mvns	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	400a      	ands	r2, r1
 80008e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	68d9      	ldr	r1, [r3, #12]
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	4603      	mov	r3, r0
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4403      	add	r3, r0
 80008fe:	3b1e      	subs	r3, #30
 8000900:	409a      	lsls	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	430a      	orrs	r2, r1
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	e022      	b.n	8000952 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6919      	ldr	r1, [r3, #16]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	b29b      	uxth	r3, r3
 8000918:	461a      	mov	r2, r3
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	2207      	movs	r2, #7
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	400a      	ands	r2, r1
 800092e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	6919      	ldr	r1, [r3, #16]
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	b29b      	uxth	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	4603      	mov	r3, r0
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4403      	add	r3, r0
 8000948:	409a      	lsls	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	430a      	orrs	r2, r1
 8000950:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b06      	cmp	r3, #6
 8000958:	d824      	bhi.n	80009a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4613      	mov	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	3b05      	subs	r3, #5
 800096c:	221f      	movs	r2, #31
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	400a      	ands	r2, r1
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	b29b      	uxth	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	3b05      	subs	r3, #5
 8000996:	fa00 f203 	lsl.w	r2, r0, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	430a      	orrs	r2, r1
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
 80009a2:	e04c      	b.n	8000a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	2b0c      	cmp	r3, #12
 80009aa:	d824      	bhi.n	80009f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	3b23      	subs	r3, #35	; 0x23
 80009be:	221f      	movs	r2, #31
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43da      	mvns	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	400a      	ands	r2, r1
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	4613      	mov	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	3b23      	subs	r3, #35	; 0x23
 80009e8:	fa00 f203 	lsl.w	r2, r0, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	430a      	orrs	r2, r1
 80009f2:	631a      	str	r2, [r3, #48]	; 0x30
 80009f4:	e023      	b.n	8000a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	3b41      	subs	r3, #65	; 0x41
 8000a08:	221f      	movs	r2, #31
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	400a      	ands	r2, r1
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	3b41      	subs	r3, #65	; 0x41
 8000a32:	fa00 f203 	lsl.w	r2, r0, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <HAL_ADC_ConfigChannel+0x234>)
 8000a40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a21      	ldr	r2, [pc, #132]	; (8000acc <HAL_ADC_ConfigChannel+0x238>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d109      	bne.n	8000a60 <HAL_ADC_ConfigChannel+0x1cc>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b12      	cmp	r3, #18
 8000a52:	d105      	bne.n	8000a60 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_ADC_ConfigChannel+0x238>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d123      	bne.n	8000ab2 <HAL_ADC_ConfigChannel+0x21e>
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b10      	cmp	r3, #16
 8000a70:	d003      	beq.n	8000a7a <HAL_ADC_ConfigChannel+0x1e6>
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b11      	cmp	r3, #17
 8000a78:	d11b      	bne.n	8000ab2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b10      	cmp	r3, #16
 8000a8c:	d111      	bne.n	8000ab2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_ADC_ConfigChannel+0x23c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_ADC_ConfigChannel+0x240>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	0c9a      	lsrs	r2, r3, #18
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4413      	add	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000aa4:	e002      	b.n	8000aac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1f9      	bne.n	8000aa6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40012300 	.word	0x40012300
 8000acc:	40012000 	.word	0x40012000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	431bde83 	.word	0x431bde83

08000ad8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ae0:	4b79      	ldr	r3, [pc, #484]	; (8000cc8 <ADC_Init+0x1f0>)
 8000ae2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6859      	ldr	r1, [r3, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	021a      	lsls	r2, r3, #8
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6859      	ldr	r1, [r3, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6899      	ldr	r1, [r3, #8]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6a:	4a58      	ldr	r2, [pc, #352]	; (8000ccc <ADC_Init+0x1f4>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d022      	beq.n	8000bb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6899      	ldr	r1, [r3, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6899      	ldr	r1, [r3, #8]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	e00f      	b.n	8000bd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0202 	bic.w	r2, r2, #2
 8000be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6899      	ldr	r1, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7e1b      	ldrb	r3, [r3, #24]
 8000bf0:	005a      	lsls	r2, r3, #1
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01b      	beq.n	8000c3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6859      	ldr	r1, [r3, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	035a      	lsls	r2, r3, #13
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	e007      	b.n	8000c4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	051a      	lsls	r2, r3, #20
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6899      	ldr	r1, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c8e:	025a      	lsls	r2, r3, #9
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6899      	ldr	r1, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	029a      	lsls	r2, r3, #10
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	609a      	str	r2, [r3, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40012300 	.word	0x40012300
 8000ccc:	0f000001 	.word	0x0f000001

08000cd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cdc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d13c      	bne.n	8000d64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d12b      	bne.n	8000d5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d127      	bne.n	8000d5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d119      	bne.n	8000d5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0220 	bic.w	r2, r2, #32
 8000d36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d105      	bne.n	8000d5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f043 0201 	orr.w	r2, r3, #1
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f7ff fd7b 	bl	8000858 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000d62:	e00e      	b.n	8000d82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f7ff fd85 	bl	8000880 <HAL_ADC_ErrorCallback>
}
 8000d76:	e004      	b.n	8000d82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	4798      	blx	r3
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fd67 	bl	800086c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2240      	movs	r2, #64	; 0x40
 8000db8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f043 0204 	orr.w	r2, r3, #4
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f7ff fd5a 	bl	8000880 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e0ed      	b.n	8000fc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f002 fdc6 	bl	8003984 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0202 	bic.w	r2, r2, #2
 8000e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e08:	f7ff fbc0 	bl	800058c <HAL_GetTick>
 8000e0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e0e:	e012      	b.n	8000e36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e10:	f7ff fbbc 	bl	800058c <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	d90b      	bls.n	8000e36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e0c5      	b.n	8000fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e5      	bne.n	8000e10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 0201 	orr.w	r2, r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e54:	f7ff fb9a 	bl	800058c <HAL_GetTick>
 8000e58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e5a:	e012      	b.n	8000e82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e5c:	f7ff fb96 	bl	800058c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b0a      	cmp	r3, #10
 8000e68:	d90b      	bls.n	8000e82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2205      	movs	r2, #5
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e09f      	b.n	8000fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0e5      	beq.n	8000e5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7e1b      	ldrb	r3, [r3, #24]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d108      	bne.n	8000eaa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e007      	b.n	8000eba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7e5b      	ldrb	r3, [r3, #25]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e007      	b.n	8000ee4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7e9b      	ldrb	r3, [r3, #26]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0220 	orr.w	r2, r2, #32
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e007      	b.n	8000f0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0220 	bic.w	r2, r2, #32
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7edb      	ldrb	r3, [r3, #27]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d108      	bne.n	8000f28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0210 	bic.w	r2, r2, #16
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e007      	b.n	8000f38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0210 	orr.w	r2, r2, #16
 8000f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7f1b      	ldrb	r3, [r3, #28]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d108      	bne.n	8000f52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0208 	orr.w	r2, r2, #8
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e007      	b.n	8000f62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0208 	bic.w	r2, r2, #8
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7f5b      	ldrb	r3, [r3, #29]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d108      	bne.n	8000f7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f042 0204 	orr.w	r2, r2, #4
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e007      	b.n	8000f8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0204 	bic.w	r2, r2, #4
 8000f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	ea42 0103 	orr.w	r1, r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	1e5a      	subs	r2, r3, #1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe4:	7cfb      	ldrb	r3, [r7, #19]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d003      	beq.n	8000ff2 <HAL_CAN_ConfigFilter+0x26>
 8000fea:	7cfb      	ldrb	r3, [r7, #19]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	f040 80be 	bne.w	800116e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ff2:	4b65      	ldr	r3, [pc, #404]	; (8001188 <HAL_CAN_ConfigFilter+0x1bc>)
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ffc:	f043 0201 	orr.w	r2, r3, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800100c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	431a      	orrs	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	2201      	movs	r2, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	401a      	ands	r2, r3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d123      	bne.n	800109c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001076:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3248      	adds	r2, #72	; 0x48
 800107c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001090:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001092:	6979      	ldr	r1, [r7, #20]
 8001094:	3348      	adds	r3, #72	; 0x48
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d122      	bne.n	80010ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3248      	adds	r2, #72	; 0x48
 80010ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010e0:	6979      	ldr	r1, [r7, #20]
 80010e2:	3348      	adds	r3, #72	; 0x48
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	440b      	add	r3, r1
 80010e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	401a      	ands	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001104:	e007      	b.n	8001116 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	431a      	orrs	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	401a      	ands	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001130:	e007      	b.n	8001142 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	431a      	orrs	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d107      	bne.n	800115a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	431a      	orrs	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001160:	f023 0201 	bic.w	r2, r3, #1
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e006      	b.n	800117c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
  }
}
 800117c:	4618      	mov	r0, r3
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40006400 	.word	0x40006400

0800118c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d12e      	bne.n	80011fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011b8:	f7ff f9e8 	bl	800058c <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011be:	e012      	b.n	80011e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c0:	f7ff f9e4 	bl	800058c <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b0a      	cmp	r3, #10
 80011cc:	d90b      	bls.n	80011e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2205      	movs	r2, #5
 80011de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e012      	b.n	800120c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e5      	bne.n	80011c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e006      	b.n	800120c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
  }
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001228:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001232:	7ffb      	ldrb	r3, [r7, #31]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d003      	beq.n	8001240 <HAL_CAN_AddTxMessage+0x2c>
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	2b02      	cmp	r3, #2
 800123c:	f040 80b8 	bne.w	80013b0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10a      	bne.n	8001260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001250:	2b00      	cmp	r3, #0
 8001252:	d105      	bne.n	8001260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80a0 	beq.w	80013a0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	0e1b      	lsrs	r3, r3, #24
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d907      	bls.n	8001280 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e09e      	b.n	80013be <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001280:	2201      	movs	r2, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	409a      	lsls	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800129c:	68f9      	ldr	r1, [r7, #12]
 800129e:	6809      	ldr	r1, [r1, #0]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3318      	adds	r3, #24
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	440b      	add	r3, r1
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e00f      	b.n	80012ce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012be:	68f9      	ldr	r1, [r7, #12]
 80012c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3318      	adds	r3, #24
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	440b      	add	r3, r1
 80012cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3318      	adds	r3, #24
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	3304      	adds	r3, #4
 80012e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	7d1b      	ldrb	r3, [r3, #20]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d111      	bne.n	800130e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3318      	adds	r3, #24
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	3304      	adds	r3, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	6811      	ldr	r1, [r2, #0]
 80012fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3318      	adds	r3, #24
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	440b      	add	r3, r1
 800130a:	3304      	adds	r3, #4
 800130c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3307      	adds	r3, #7
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	061a      	lsls	r2, r3, #24
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3306      	adds	r3, #6
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	041b      	lsls	r3, r3, #16
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3305      	adds	r3, #5
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	4313      	orrs	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	3204      	adds	r2, #4
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	4610      	mov	r0, r2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6811      	ldr	r1, [r2, #0]
 8001336:	ea43 0200 	orr.w	r2, r3, r0
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	440b      	add	r3, r1
 8001340:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001344:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3303      	adds	r3, #3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	061a      	lsls	r2, r3, #24
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3302      	adds	r3, #2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	4313      	orrs	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	4610      	mov	r0, r2
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	6811      	ldr	r1, [r2, #0]
 800136c:	ea43 0200 	orr.w	r2, r3, r0
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	440b      	add	r3, r1
 8001376:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800137a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3318      	adds	r3, #24
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	6811      	ldr	r1, [r2, #0]
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3318      	adds	r3, #24
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	440b      	add	r3, r1
 800139a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	e00e      	b.n	80013be <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e006      	b.n	80013be <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
  }
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013dc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d002      	beq.n	80013ea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80013e4:	7afb      	ldrb	r3, [r7, #11]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d11d      	bne.n	8001426 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3301      	adds	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001444:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d002      	beq.n	8001452 <HAL_CAN_ActivateNotification+0x1e>
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d109      	bne.n	8001466 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6959      	ldr	r1, [r3, #20]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e006      	b.n	8001474 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
  }
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff3e 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff31 	bl	80014e4 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7fe ff6c 	bl	800058c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e099      	b.n	80017f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e0:	e00f      	b.n	8001702 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e2:	f7fe ff53 	bl	800058c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d908      	bls.n	8001702 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2203      	movs	r2, #3
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e078      	b.n	80017f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e8      	bne.n	80016e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_DMA_Init+0x158>)
 800171c:	4013      	ands	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	2b04      	cmp	r3, #4
 800175a:	d107      	bne.n	800176c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4313      	orrs	r3, r2
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f023 0307 	bic.w	r3, r3, #7
 8001782:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4313      	orrs	r3, r2
 800178c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2b04      	cmp	r3, #4
 8001794:	d117      	bne.n	80017c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4313      	orrs	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fa6f 	bl	8001c8c <DMA_CheckFifoParam>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017c2:	2301      	movs	r3, #1
 80017c4:	e016      	b.n	80017f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa26 	bl	8001c20 <DMA_CalcBaseAndBitshift>
 80017d4:	4603      	mov	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	f010803f 	.word	0xf010803f

08001800 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_DMA_Start_IT+0x26>
 8001822:	2302      	movs	r3, #2
 8001824:	e040      	b.n	80018a8 <HAL_DMA_Start_IT+0xa8>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d12f      	bne.n	800189a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2202      	movs	r2, #2
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f9b8 	bl	8001bc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	223f      	movs	r2, #63	; 0x3f
 800185a:	409a      	lsls	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0216 	orr.w	r2, r2, #22
 800186e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0208 	orr.w	r2, r2, #8
 8001886:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e005      	b.n	80018a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
 80018a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018bc:	4b92      	ldr	r3, [pc, #584]	; (8001b08 <HAL_DMA_IRQHandler+0x258>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a92      	ldr	r2, [pc, #584]	; (8001b0c <HAL_DMA_IRQHandler+0x25c>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	0a9b      	lsrs	r3, r3, #10
 80018c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	2208      	movs	r2, #8
 80018dc:	409a      	lsls	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d01a      	beq.n	800191c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0204 	bic.w	r2, r2, #4
 8001902:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	2208      	movs	r2, #8
 800190a:	409a      	lsls	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001920:	2201      	movs	r2, #1
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d012      	beq.n	8001952 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	2201      	movs	r2, #1
 8001940:	409a      	lsls	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2204      	movs	r2, #4
 8001958:	409a      	lsls	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d012      	beq.n	8001988 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00b      	beq.n	8001988 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001974:	2204      	movs	r2, #4
 8001976:	409a      	lsls	r2, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001980:	f043 0204 	orr.w	r2, r3, #4
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198c:	2210      	movs	r2, #16
 800198e:	409a      	lsls	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d043      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03c      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	2210      	movs	r2, #16
 80019ac:	409a      	lsls	r2, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d018      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d108      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d024      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
 80019de:	e01f      	b.n	8001a20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01b      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4798      	blx	r3
 80019f0:	e016      	b.n	8001a20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0208 	bic.w	r2, r2, #8
 8001a0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	2220      	movs	r2, #32
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 808e 	beq.w	8001b4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8086 	beq.w	8001b4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2220      	movs	r2, #32
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d136      	bne.n	8001ac8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0216 	bic.w	r2, r2, #22
 8001a68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <HAL_DMA_IRQHandler+0x1da>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0208 	bic.w	r2, r2, #8
 8001a98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	223f      	movs	r2, #63	; 0x3f
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d07d      	beq.n	8001bba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
        }
        return;
 8001ac6:	e078      	b.n	8001bba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01c      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d108      	bne.n	8001af6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d030      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
 8001af4:	e02b      	b.n	8001b4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d027      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	4798      	blx	r3
 8001b06:	e022      	b.n	8001b4e <HAL_DMA_IRQHandler+0x29e>
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10f      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0210 	bic.w	r2, r2, #16
 8001b2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d032      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d022      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2205      	movs	r2, #5
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d307      	bcc.n	8001b96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f2      	bne.n	8001b7a <HAL_DMA_IRQHandler+0x2ca>
 8001b94:	e000      	b.n	8001b98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
 8001bb8:	e000      	b.n	8001bbc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bba:	bf00      	nop
    }
  }
}
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop

08001bc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001be0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d108      	bne.n	8001c04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c02:	e007      	b.n	8001c14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	60da      	str	r2, [r3, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3b10      	subs	r3, #16
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <DMA_CalcBaseAndBitshift+0x64>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <DMA_CalcBaseAndBitshift+0x68>)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d909      	bls.n	8001c62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	1d1a      	adds	r2, r3, #4
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c60:	e007      	b.n	8001c72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c6a:	f023 0303 	bic.w	r3, r3, #3
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	aaaaaaab 	.word	0xaaaaaaab
 8001c88:	08004984 	.word	0x08004984

08001c8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d11f      	bne.n	8001ce6 <DMA_CheckFifoParam+0x5a>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d856      	bhi.n	8001d5a <DMA_CheckFifoParam+0xce>
 8001cac:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <DMA_CheckFifoParam+0x28>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001cc5 	.word	0x08001cc5
 8001cb8:	08001cd7 	.word	0x08001cd7
 8001cbc:	08001cc5 	.word	0x08001cc5
 8001cc0:	08001d5b 	.word	0x08001d5b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d046      	beq.n	8001d5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cd4:	e043      	b.n	8001d5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cde:	d140      	bne.n	8001d62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ce4:	e03d      	b.n	8001d62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cee:	d121      	bne.n	8001d34 <DMA_CheckFifoParam+0xa8>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d837      	bhi.n	8001d66 <DMA_CheckFifoParam+0xda>
 8001cf6:	a201      	add	r2, pc, #4	; (adr r2, 8001cfc <DMA_CheckFifoParam+0x70>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d0d 	.word	0x08001d0d
 8001d00:	08001d13 	.word	0x08001d13
 8001d04:	08001d0d 	.word	0x08001d0d
 8001d08:	08001d25 	.word	0x08001d25
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d10:	e030      	b.n	8001d74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d025      	beq.n	8001d6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d22:	e022      	b.n	8001d6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d2c:	d11f      	bne.n	8001d6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d32:	e01c      	b.n	8001d6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d903      	bls.n	8001d42 <DMA_CheckFifoParam+0xb6>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d003      	beq.n	8001d48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d40:	e018      	b.n	8001d74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
      break;
 8001d46:	e015      	b.n	8001d74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
      break;
 8001d58:	e00b      	b.n	8001d72 <DMA_CheckFifoParam+0xe6>
      break;
 8001d5a:	bf00      	nop
 8001d5c:	e00a      	b.n	8001d74 <DMA_CheckFifoParam+0xe8>
      break;
 8001d5e:	bf00      	nop
 8001d60:	e008      	b.n	8001d74 <DMA_CheckFifoParam+0xe8>
      break;
 8001d62:	bf00      	nop
 8001d64:	e006      	b.n	8001d74 <DMA_CheckFifoParam+0xe8>
      break;
 8001d66:	bf00      	nop
 8001d68:	e004      	b.n	8001d74 <DMA_CheckFifoParam+0xe8>
      break;
 8001d6a:	bf00      	nop
 8001d6c:	e002      	b.n	8001d74 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d6e:	bf00      	nop
 8001d70:	e000      	b.n	8001d74 <DMA_CheckFifoParam+0xe8>
      break;
 8001d72:	bf00      	nop
    }
  } 
  
  return status; 
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop

08001d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e16b      	b.n	8002078 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001da0:	2201      	movs	r2, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f040 815a 	bne.w	8002072 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d00b      	beq.n	8001dde <HAL_GPIO_Init+0x5a>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d007      	beq.n	8001dde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dd2:	2b11      	cmp	r3, #17
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d130      	bne.n	8001e40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e14:	2201      	movs	r2, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 0201 	and.w	r2, r3, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0xfc>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b12      	cmp	r3, #18
 8001e7e:	d123      	bne.n	8001ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	08da      	lsrs	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3208      	adds	r2, #8
 8001ec2:	69b9      	ldr	r1, [r7, #24]
 8001ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0203 	and.w	r2, r3, #3
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80b4 	beq.w	8002072 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b60      	ldr	r3, [pc, #384]	; (8002090 <HAL_GPIO_Init+0x30c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a5f      	ldr	r2, [pc, #380]	; (8002090 <HAL_GPIO_Init+0x30c>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <HAL_GPIO_Init+0x30c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f26:	4a5b      	ldr	r2, [pc, #364]	; (8002094 <HAL_GPIO_Init+0x310>)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_GPIO_Init+0x314>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d02b      	beq.n	8001faa <HAL_GPIO_Init+0x226>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a51      	ldr	r2, [pc, #324]	; (800209c <HAL_GPIO_Init+0x318>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d025      	beq.n	8001fa6 <HAL_GPIO_Init+0x222>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a50      	ldr	r2, [pc, #320]	; (80020a0 <HAL_GPIO_Init+0x31c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01f      	beq.n	8001fa2 <HAL_GPIO_Init+0x21e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_GPIO_Init+0x320>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0x21a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4e      	ldr	r2, [pc, #312]	; (80020a8 <HAL_GPIO_Init+0x324>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0x216>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4d      	ldr	r2, [pc, #308]	; (80020ac <HAL_GPIO_Init+0x328>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00d      	beq.n	8001f96 <HAL_GPIO_Init+0x212>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4c      	ldr	r2, [pc, #304]	; (80020b0 <HAL_GPIO_Init+0x32c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <HAL_GPIO_Init+0x20e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4b      	ldr	r2, [pc, #300]	; (80020b4 <HAL_GPIO_Init+0x330>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_GPIO_Init+0x20a>
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	e00e      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f8e:	2308      	movs	r3, #8
 8001f90:	e00c      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f92:	2306      	movs	r3, #6
 8001f94:	e00a      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f96:	2305      	movs	r3, #5
 8001f98:	e008      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e004      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001faa:	2300      	movs	r3, #0
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	4093      	lsls	r3, r2
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fbc:	4935      	ldr	r1, [pc, #212]	; (8002094 <HAL_GPIO_Init+0x310>)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_GPIO_Init+0x334>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fee:	4a32      	ldr	r2, [pc, #200]	; (80020b8 <HAL_GPIO_Init+0x334>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_GPIO_Init+0x334>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_GPIO_Init+0x334>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <HAL_GPIO_Init+0x334>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_GPIO_Init+0x334>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_GPIO_Init+0x334>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <HAL_GPIO_Init+0x334>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3301      	adds	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b0f      	cmp	r3, #15
 800207c:	f67f ae90 	bls.w	8001da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40013800 	.word	0x40013800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020400 	.word	0x40020400
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020c00 	.word	0x40020c00
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40021400 	.word	0x40021400
 80020b0:	40021800 	.word	0x40021800
 80020b4:	40021c00 	.word	0x40021c00
 80020b8:	40013c00 	.word	0x40013c00

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020d8:	e003      	b.n	80020e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	619a      	str	r2, [r3, #24]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e25b      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d075      	beq.n	80021fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800210e:	4ba3      	ldr	r3, [pc, #652]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b04      	cmp	r3, #4
 8002118:	d00c      	beq.n	8002134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211a:	4ba0      	ldr	r3, [pc, #640]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002122:	2b08      	cmp	r3, #8
 8002124:	d112      	bne.n	800214c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002126:	4b9d      	ldr	r3, [pc, #628]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002132:	d10b      	bne.n	800214c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	4b99      	ldr	r3, [pc, #612]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d05b      	beq.n	80021f8 <HAL_RCC_OscConfig+0x108>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d157      	bne.n	80021f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e236      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002154:	d106      	bne.n	8002164 <HAL_RCC_OscConfig+0x74>
 8002156:	4b91      	ldr	r3, [pc, #580]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a90      	ldr	r2, [pc, #576]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e01d      	b.n	80021a0 <HAL_RCC_OscConfig+0xb0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x98>
 800216e:	4b8b      	ldr	r3, [pc, #556]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a8a      	ldr	r2, [pc, #552]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a87      	ldr	r2, [pc, #540]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xb0>
 8002188:	4b84      	ldr	r3, [pc, #528]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a83      	ldr	r2, [pc, #524]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a80      	ldr	r2, [pc, #512]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe f9f0 	bl	800058c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe f9ec 	bl	800058c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1fb      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0xc0>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe f9dc 	bl	800058c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe f9d8 	bl	800058c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1e7      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	4b6c      	ldr	r3, [pc, #432]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0xe8>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d063      	beq.n	80022ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002206:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002212:	4b62      	ldr	r3, [pc, #392]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800221a:	2b08      	cmp	r3, #8
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221e:	4b5f      	ldr	r3, [pc, #380]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	4b5c      	ldr	r3, [pc, #368]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x152>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1bb      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4b56      	ldr	r3, [pc, #344]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4952      	ldr	r1, [pc, #328]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e03a      	b.n	80022ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002260:	4b4f      	ldr	r3, [pc, #316]	; (80023a0 <HAL_RCC_OscConfig+0x2b0>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7fe f991 	bl	800058c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226e:	f7fe f98d 	bl	800058c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e19c      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4940      	ldr	r1, [pc, #256]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_OscConfig+0x2b0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe f970 	bl	800058c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b0:	f7fe f96c 	bl	800058c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e17b      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d030      	beq.n	800233c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_RCC_OscConfig+0x2b4>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7fe f950 	bl	800058c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f0:	f7fe f94c 	bl	800058c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e15b      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x200>
 800230e:	e015      	b.n	800233c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_OscConfig+0x2b4>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7fe f939 	bl	800058c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231e:	f7fe f935 	bl	800058c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e144      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a0 	beq.w	800248a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10f      	bne.n	800237a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_RCC_OscConfig+0x2ac>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_OscConfig+0x2b8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d121      	bne.n	80023ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCC_OscConfig+0x2b8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_RCC_OscConfig+0x2b8>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002392:	f7fe f8fb 	bl	800058c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	e011      	b.n	80023be <HAL_RCC_OscConfig+0x2ce>
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	42470000 	.word	0x42470000
 80023a4:	42470e80 	.word	0x42470e80
 80023a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7fe f8ee 	bl	800058c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e0fd      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b81      	ldr	r3, [pc, #516]	; (80025c4 <HAL_RCC_OscConfig+0x4d4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d106      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
 80023d2:	4b7d      	ldr	r3, [pc, #500]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a7c      	ldr	r2, [pc, #496]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	e01c      	b.n	800241a <HAL_RCC_OscConfig+0x32a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x312>
 80023e8:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a76      	ldr	r2, [pc, #472]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
 80023f4:	4b74      	ldr	r3, [pc, #464]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a73      	ldr	r2, [pc, #460]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0x32a>
 8002402:	4b71      	ldr	r3, [pc, #452]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	4a70      	ldr	r2, [pc, #448]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6713      	str	r3, [r2, #112]	; 0x70
 800240e:	4b6e      	ldr	r3, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a6d      	ldr	r2, [pc, #436]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d015      	beq.n	800244e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7fe f8b3 	bl	800058c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe f8af 	bl	800058c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0bc      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	4b61      	ldr	r3, [pc, #388]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ee      	beq.n	800242a <HAL_RCC_OscConfig+0x33a>
 800244c:	e014      	b.n	8002478 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7fe f89d 	bl	800058c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe f899 	bl	800058c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0a6      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8092 	beq.w	80025b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002494:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d05c      	beq.n	800255a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d141      	bne.n	800252c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_RCC_OscConfig+0x4dc>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe f86d 	bl	800058c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe f869 	bl	800058c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e078      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c8:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	019b      	lsls	r3, r3, #6
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	061b      	lsls	r3, r3, #24
 80024f8:	4933      	ldr	r1, [pc, #204]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <HAL_RCC_OscConfig+0x4dc>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe f842 	bl	800058c <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe f83e 	bl	800058c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e04d      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x41c>
 800252a:	e045      	b.n	80025b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCC_OscConfig+0x4dc>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe f82b 	bl	800058c <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe f827 	bl	800058c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e036      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x44a>
 8002558:	e02e      	b.n	80025b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e029      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_RCC_OscConfig+0x4d8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	429a      	cmp	r2, r3
 8002578:	d11c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d115      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258e:	4013      	ands	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002594:	4293      	cmp	r3, r2
 8002596:	d10d      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d106      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40007000 	.word	0x40007000
 80025c8:	40023800 	.word	0x40023800
 80025cc:	42470060 	.word	0x42470060

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0cc      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d90c      	bls.n	800260c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0b8      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800262e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	494d      	ldr	r1, [pc, #308]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d044      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d119      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d003      	beq.n	800268e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268a:	2b03      	cmp	r3, #3
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e067      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4934      	ldr	r1, [pc, #208]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7fd ff64 	bl	800058c <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7fd ff60 	bl	800058c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e04f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d20c      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e032      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4916      	ldr	r1, [pc, #88]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	490e      	ldr	r1, [pc, #56]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002756:	f000 f821 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800275a:	4602      	mov	r2, r0
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	490a      	ldr	r1, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fec4 	bl	8000504 <HAL_InitTick>

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023c00 	.word	0x40023c00
 800278c:	40023800 	.word	0x40023800
 8002790:	0800498c 	.word	0x0800498c
 8002794:	20000008 	.word	0x20000008
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	b5b0      	push	{r4, r5, r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027a2:	2100      	movs	r1, #0
 80027a4:	6079      	str	r1, [r7, #4]
 80027a6:	2100      	movs	r1, #0
 80027a8:	60f9      	str	r1, [r7, #12]
 80027aa:	2100      	movs	r1, #0
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ae:	2100      	movs	r1, #0
 80027b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b2:	4952      	ldr	r1, [pc, #328]	; (80028fc <HAL_RCC_GetSysClockFreq+0x160>)
 80027b4:	6889      	ldr	r1, [r1, #8]
 80027b6:	f001 010c 	and.w	r1, r1, #12
 80027ba:	2908      	cmp	r1, #8
 80027bc:	d00d      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x3e>
 80027be:	2908      	cmp	r1, #8
 80027c0:	f200 8094 	bhi.w	80028ec <HAL_RCC_GetSysClockFreq+0x150>
 80027c4:	2900      	cmp	r1, #0
 80027c6:	d002      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x32>
 80027c8:	2904      	cmp	r1, #4
 80027ca:	d003      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x38>
 80027cc:	e08e      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ce:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_GetSysClockFreq+0x164>)
 80027d0:	60bb      	str	r3, [r7, #8]
       break;
 80027d2:	e08e      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <HAL_RCC_GetSysClockFreq+0x168>)
 80027d6:	60bb      	str	r3, [r7, #8]
      break;
 80027d8:	e08b      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027da:	4948      	ldr	r1, [pc, #288]	; (80028fc <HAL_RCC_GetSysClockFreq+0x160>)
 80027dc:	6849      	ldr	r1, [r1, #4]
 80027de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80027e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e4:	4945      	ldr	r1, [pc, #276]	; (80028fc <HAL_RCC_GetSysClockFreq+0x160>)
 80027e6:	6849      	ldr	r1, [r1, #4]
 80027e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d024      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f0:	4942      	ldr	r1, [pc, #264]	; (80028fc <HAL_RCC_GetSysClockFreq+0x160>)
 80027f2:	6849      	ldr	r1, [r1, #4]
 80027f4:	0989      	lsrs	r1, r1, #6
 80027f6:	4608      	mov	r0, r1
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002800:	f04f 0500 	mov.w	r5, #0
 8002804:	ea00 0204 	and.w	r2, r0, r4
 8002808:	ea01 0305 	and.w	r3, r1, r5
 800280c:	493d      	ldr	r1, [pc, #244]	; (8002904 <HAL_RCC_GetSysClockFreq+0x168>)
 800280e:	fb01 f003 	mul.w	r0, r1, r3
 8002812:	2100      	movs	r1, #0
 8002814:	fb01 f102 	mul.w	r1, r1, r2
 8002818:	1844      	adds	r4, r0, r1
 800281a:	493a      	ldr	r1, [pc, #232]	; (8002904 <HAL_RCC_GetSysClockFreq+0x168>)
 800281c:	fba2 0101 	umull	r0, r1, r2, r1
 8002820:	1863      	adds	r3, r4, r1
 8002822:	4619      	mov	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	461a      	mov	r2, r3
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	f7fd fccc 	bl	80001c8 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e04a      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	4b30      	ldr	r3, [pc, #192]	; (80028fc <HAL_RCC_GetSysClockFreq+0x160>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	461a      	mov	r2, r3
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	f240 10ff 	movw	r0, #511	; 0x1ff
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	ea02 0400 	and.w	r4, r2, r0
 8002852:	ea03 0501 	and.w	r5, r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	014b      	lsls	r3, r1, #5
 8002864:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002868:	0142      	lsls	r2, r0, #5
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	1b00      	subs	r0, r0, r4
 8002870:	eb61 0105 	sbc.w	r1, r1, r5
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	018b      	lsls	r3, r1, #6
 800287e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002882:	0182      	lsls	r2, r0, #6
 8002884:	1a12      	subs	r2, r2, r0
 8002886:	eb63 0301 	sbc.w	r3, r3, r1
 800288a:	f04f 0000 	mov.w	r0, #0
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	00d9      	lsls	r1, r3, #3
 8002894:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002898:	00d0      	lsls	r0, r2, #3
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	1912      	adds	r2, r2, r4
 80028a0:	eb45 0303 	adc.w	r3, r5, r3
 80028a4:	f04f 0000 	mov.w	r0, #0
 80028a8:	f04f 0100 	mov.w	r1, #0
 80028ac:	0299      	lsls	r1, r3, #10
 80028ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028b2:	0290      	lsls	r0, r2, #10
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	461a      	mov	r2, r3
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	f7fd fc80 	bl	80001c8 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4613      	mov	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_RCC_GetSysClockFreq+0x160>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	60bb      	str	r3, [r7, #8]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_RCC_GetSysClockFreq+0x164>)
 80028ee:	60bb      	str	r3, [r7, #8]
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	68bb      	ldr	r3, [r7, #8]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bdb0      	pop	{r4, r5, r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	00f42400 	.word	0x00f42400
 8002904:	017d7840 	.word	0x017d7840

08002908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e01d      	b.n	8002956 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f001 fc82 	bl	8004238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 fb50 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d007      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e01d      	b.n	80029f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f001 fc8d 	bl	80042ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f000 fb01 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fdd6 	bl	80035c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <HAL_TIM_PWM_Start+0x74>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_TIM_PWM_Start+0x2c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <HAL_TIM_PWM_Start+0x78>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_TIM_PWM_Start+0x30>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_TIM_PWM_Start+0x32>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b06      	cmp	r3, #6
 8002a52:	d007      	beq.n	8002a64 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40010400 	.word	0x40010400

08002a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d122      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0202 	mvn.w	r2, #2
 8002aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fa78 	bl	8002fb0 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa6a 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fa7b 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0204 	mvn.w	r2, #4
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fa4e 	bl	8002fb0 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa40 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fa51 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d122      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d11b      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0208 	mvn.w	r2, #8
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2204      	movs	r2, #4
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fa24 	bl	8002fb0 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fa16 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fa27 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0210 	mvn.w	r2, #16
 8002ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9fa 	bl	8002fb0 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9ec 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f9fd 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10e      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d107      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0201 	mvn.w	r2, #1
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f001 f928 	bl	8003e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fd78 	bl	8003718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f9c2 	bl	8002fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0220 	mvn.w	r2, #32
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fd42 	bl	8003704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e0b4      	b.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2202      	movs	r2, #2
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	f200 809f 	bhi.w	8002df8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	08002df9 	.word	0x08002df9
 8002cc8:	08002df9 	.word	0x08002df9
 8002ccc:	08002df9 	.word	0x08002df9
 8002cd0:	08002d35 	.word	0x08002d35
 8002cd4:	08002df9 	.word	0x08002df9
 8002cd8:	08002df9 	.word	0x08002df9
 8002cdc:	08002df9 	.word	0x08002df9
 8002ce0:	08002d77 	.word	0x08002d77
 8002ce4:	08002df9 	.word	0x08002df9
 8002ce8:	08002df9 	.word	0x08002df9
 8002cec:	08002df9 	.word	0x08002df9
 8002cf0:	08002db7 	.word	0x08002db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fa16 	bl	800312c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0208 	orr.w	r2, r2, #8
 8002d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0204 	bic.w	r2, r2, #4
 8002d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6999      	ldr	r1, [r3, #24]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	619a      	str	r2, [r3, #24]
      break;
 8002d32:	e062      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fa66 	bl	800320c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6999      	ldr	r1, [r3, #24]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	021a      	lsls	r2, r3, #8
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	619a      	str	r2, [r3, #24]
      break;
 8002d74:	e041      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fabb 	bl	80032f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0208 	orr.w	r2, r2, #8
 8002d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0204 	bic.w	r2, r2, #4
 8002da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69d9      	ldr	r1, [r3, #28]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	61da      	str	r2, [r3, #28]
      break;
 8002db4:	e021      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fb0f 	bl	80033e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69d9      	ldr	r1, [r3, #28]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	61da      	str	r2, [r3, #28]
      break;
 8002df6:	e000      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002df8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_TIM_ConfigClockSource+0x18>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e0b3      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x180>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e64:	d03e      	beq.n	8002ee4 <HAL_TIM_ConfigClockSource+0xd0>
 8002e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6a:	f200 8087 	bhi.w	8002f7c <HAL_TIM_ConfigClockSource+0x168>
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e72:	f000 8085 	beq.w	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7a:	d87f      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x168>
 8002e7c:	2b70      	cmp	r3, #112	; 0x70
 8002e7e:	d01a      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0xa2>
 8002e80:	2b70      	cmp	r3, #112	; 0x70
 8002e82:	d87b      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x168>
 8002e84:	2b60      	cmp	r3, #96	; 0x60
 8002e86:	d050      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x116>
 8002e88:	2b60      	cmp	r3, #96	; 0x60
 8002e8a:	d877      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x168>
 8002e8c:	2b50      	cmp	r3, #80	; 0x50
 8002e8e:	d03c      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0xf6>
 8002e90:	2b50      	cmp	r3, #80	; 0x50
 8002e92:	d873      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x168>
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d058      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x136>
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d86f      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x168>
 8002e9c:	2b30      	cmp	r3, #48	; 0x30
 8002e9e:	d064      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x156>
 8002ea0:	2b30      	cmp	r3, #48	; 0x30
 8002ea2:	d86b      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x168>
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d060      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x156>
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d867      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x168>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d05c      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x156>
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d05a      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002eb4:	e062      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6899      	ldr	r1, [r3, #8]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f000 fb5b 	bl	8003580 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	609a      	str	r2, [r3, #8]
      break;
 8002ee2:	e04e      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f000 fb44 	bl	8003580 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f06:	609a      	str	r2, [r3, #8]
      break;
 8002f08:	e03b      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 fab8 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2150      	movs	r1, #80	; 0x50
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fb11 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8002f28:	e02b      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 fad7 	bl	80034ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2160      	movs	r1, #96	; 0x60
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fb01 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8002f48:	e01b      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f000 fa98 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2140      	movs	r1, #64	; 0x40
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 faf1 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8002f68:	e00b      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f000 fae8 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8002f7a:	e002      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f7c:	bf00      	nop
 8002f7e:	e000      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a40      	ldr	r2, [pc, #256]	; (8003100 <TIM_Base_SetConfig+0x114>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d00f      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <TIM_Base_SetConfig+0x118>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00b      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a3c      	ldr	r2, [pc, #240]	; (8003108 <TIM_Base_SetConfig+0x11c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3b      	ldr	r2, [pc, #236]	; (800310c <TIM_Base_SetConfig+0x120>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d003      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3a      	ldr	r2, [pc, #232]	; (8003110 <TIM_Base_SetConfig+0x124>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d108      	bne.n	800303e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a2f      	ldr	r2, [pc, #188]	; (8003100 <TIM_Base_SetConfig+0x114>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d02b      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d027      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <TIM_Base_SetConfig+0x118>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d023      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <TIM_Base_SetConfig+0x11c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01f      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2a      	ldr	r2, [pc, #168]	; (800310c <TIM_Base_SetConfig+0x120>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01b      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a29      	ldr	r2, [pc, #164]	; (8003110 <TIM_Base_SetConfig+0x124>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d017      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a28      	ldr	r2, [pc, #160]	; (8003114 <TIM_Base_SetConfig+0x128>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a27      	ldr	r2, [pc, #156]	; (8003118 <TIM_Base_SetConfig+0x12c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00f      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a26      	ldr	r2, [pc, #152]	; (800311c <TIM_Base_SetConfig+0x130>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00b      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a25      	ldr	r2, [pc, #148]	; (8003120 <TIM_Base_SetConfig+0x134>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <TIM_Base_SetConfig+0x138>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <TIM_Base_SetConfig+0x13c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d108      	bne.n	80030b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <TIM_Base_SetConfig+0x114>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0xf8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <TIM_Base_SetConfig+0x124>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d103      	bne.n	80030ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	615a      	str	r2, [r3, #20]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40010000 	.word	0x40010000
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40000c00 	.word	0x40000c00
 8003110:	40010400 	.word	0x40010400
 8003114:	40014000 	.word	0x40014000
 8003118:	40014400 	.word	0x40014400
 800311c:	40014800 	.word	0x40014800
 8003120:	40001800 	.word	0x40001800
 8003124:	40001c00 	.word	0x40001c00
 8003128:	40002000 	.word	0x40002000

0800312c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0303 	bic.w	r3, r3, #3
 8003162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f023 0302 	bic.w	r3, r3, #2
 8003174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a20      	ldr	r2, [pc, #128]	; (8003204 <TIM_OC1_SetConfig+0xd8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_OC1_SetConfig+0x64>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <TIM_OC1_SetConfig+0xdc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d10c      	bne.n	80031aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0308 	bic.w	r3, r3, #8
 8003196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a15      	ldr	r2, [pc, #84]	; (8003204 <TIM_OC1_SetConfig+0xd8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_OC1_SetConfig+0x8e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <TIM_OC1_SetConfig+0xdc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d111      	bne.n	80031de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	621a      	str	r2, [r3, #32]
}
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40010000 	.word	0x40010000
 8003208:	40010400 	.word	0x40010400

0800320c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0320 	bic.w	r3, r3, #32
 8003256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <TIM_OC2_SetConfig+0xe4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_OC2_SetConfig+0x68>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <TIM_OC2_SetConfig+0xe8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d10d      	bne.n	8003290 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800327a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <TIM_OC2_SetConfig+0xe4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_OC2_SetConfig+0x94>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <TIM_OC2_SetConfig+0xe8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d113      	bne.n	80032c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40010400 	.word	0x40010400

080032f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <TIM_OC3_SetConfig+0xe0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_OC3_SetConfig+0x66>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a20      	ldr	r2, [pc, #128]	; (80033dc <TIM_OC3_SetConfig+0xe4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10d      	bne.n	800337a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <TIM_OC3_SetConfig+0xe0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_OC3_SetConfig+0x92>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a15      	ldr	r2, [pc, #84]	; (80033dc <TIM_OC3_SetConfig+0xe4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d113      	bne.n	80033b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	621a      	str	r2, [r3, #32]
}
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40010400 	.word	0x40010400

080033e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800342a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	031b      	lsls	r3, r3, #12
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <TIM_OC4_SetConfig+0xa4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_OC4_SetConfig+0x68>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <TIM_OC4_SetConfig+0xa8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d109      	bne.n	800345c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800344e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40010000 	.word	0x40010000
 8003488:	40010400 	.word	0x40010400

0800348c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 030a 	bic.w	r3, r3, #10
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f023 0210 	bic.w	r2, r3, #16
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	031b      	lsls	r3, r3, #12
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	f043 0307 	orr.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	021a      	lsls	r2, r3, #8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	2201      	movs	r2, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003620:	2302      	movs	r3, #2
 8003622:	e05a      	b.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d022      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d01d      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1b      	ldr	r2, [pc, #108]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1a      	ldr	r2, [pc, #104]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a17      	ldr	r2, [pc, #92]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10c      	bne.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40000c00 	.word	0x40000c00
 80036f8:	40010400 	.word	0x40010400
 80036fc:	40014000 	.word	0x40014000
 8003700:	40001800 	.word	0x40001800

08003704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003732:	463b      	mov	r3, r7
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <MX_ADC1_Init+0xec>)
 8003740:	4a36      	ldr	r2, [pc, #216]	; (800381c <MX_ADC1_Init+0xf0>)
 8003742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003744:	4b34      	ldr	r3, [pc, #208]	; (8003818 <MX_ADC1_Init+0xec>)
 8003746:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800374a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <MX_ADC1_Init+0xec>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <MX_ADC1_Init+0xec>)
 8003754:	2201      	movs	r2, #1
 8003756:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003758:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <MX_ADC1_Init+0xec>)
 800375a:	2201      	movs	r2, #1
 800375c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800375e:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <MX_ADC1_Init+0xec>)
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003766:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <MX_ADC1_Init+0xec>)
 8003768:	2200      	movs	r2, #0
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <MX_ADC1_Init+0xec>)
 800376e:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <MX_ADC1_Init+0xf4>)
 8003770:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <MX_ADC1_Init+0xec>)
 8003774:	2200      	movs	r2, #0
 8003776:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003778:	4b27      	ldr	r3, [pc, #156]	; (8003818 <MX_ADC1_Init+0xec>)
 800377a:	2204      	movs	r2, #4
 800377c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800377e:	4b26      	ldr	r3, [pc, #152]	; (8003818 <MX_ADC1_Init+0xec>)
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003786:	4b24      	ldr	r3, [pc, #144]	; (8003818 <MX_ADC1_Init+0xec>)
 8003788:	2201      	movs	r2, #1
 800378a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800378c:	4822      	ldr	r0, [pc, #136]	; (8003818 <MX_ADC1_Init+0xec>)
 800378e:	f7fc ff2d 	bl	80005ec <HAL_ADC_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003798:	f000 fb78 	bl	8003e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800379c:	2306      	movs	r3, #6
 800379e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037a0:	2301      	movs	r3, #1
 80037a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80037a4:	2301      	movs	r3, #1
 80037a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037a8:	463b      	mov	r3, r7
 80037aa:	4619      	mov	r1, r3
 80037ac:	481a      	ldr	r0, [pc, #104]	; (8003818 <MX_ADC1_Init+0xec>)
 80037ae:	f7fd f871 	bl	8000894 <HAL_ADC_ConfigChannel>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80037b8:	f000 fb68 	bl	8003e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80037bc:	2307      	movs	r3, #7
 80037be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80037c0:	2302      	movs	r3, #2
 80037c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037c4:	463b      	mov	r3, r7
 80037c6:	4619      	mov	r1, r3
 80037c8:	4813      	ldr	r0, [pc, #76]	; (8003818 <MX_ADC1_Init+0xec>)
 80037ca:	f7fd f863 	bl	8000894 <HAL_ADC_ConfigChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80037d4:	f000 fb5a 	bl	8003e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80037d8:	2301      	movs	r3, #1
 80037da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80037dc:	2303      	movs	r3, #3
 80037de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037e0:	463b      	mov	r3, r7
 80037e2:	4619      	mov	r1, r3
 80037e4:	480c      	ldr	r0, [pc, #48]	; (8003818 <MX_ADC1_Init+0xec>)
 80037e6:	f7fd f855 	bl	8000894 <HAL_ADC_ConfigChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80037f0:	f000 fb4c 	bl	8003e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80037f4:	2302      	movs	r3, #2
 80037f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80037f8:	2304      	movs	r3, #4
 80037fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037fc:	463b      	mov	r3, r7
 80037fe:	4619      	mov	r1, r3
 8003800:	4805      	ldr	r0, [pc, #20]	; (8003818 <MX_ADC1_Init+0xec>)
 8003802:	f7fd f847 	bl	8000894 <HAL_ADC_ConfigChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800380c:	f000 fb3e 	bl	8003e8c <Error_Handler>
  }

}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	2000002c 	.word	0x2000002c
 800381c:	40012000 	.word	0x40012000
 8003820:	0f000001 	.word	0x0f000001

08003824 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <HAL_ADC_MspInit+0xdc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d157      	bne.n	80038f6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_ADC_MspInit+0xe0>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <HAL_ADC_MspInit+0xe0>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003854:	6453      	str	r3, [r2, #68]	; 0x44
 8003856:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_ADC_MspInit+0xe0>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_ADC_MspInit+0xe0>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a26      	ldr	r2, [pc, #152]	; (8003904 <HAL_ADC_MspInit+0xe0>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_ADC_MspInit+0xe0>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 800387e:	23c6      	movs	r3, #198	; 0xc6
 8003880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003882:	2303      	movs	r3, #3
 8003884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	4619      	mov	r1, r3
 8003890:	481d      	ldr	r0, [pc, #116]	; (8003908 <HAL_ADC_MspInit+0xe4>)
 8003892:	f7fe fa77 	bl	8001d84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_ADC_MspInit+0xe8>)
 8003898:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_ADC_MspInit+0xec>)
 800389a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_ADC_MspInit+0xe8>)
 800389e:	2200      	movs	r2, #0
 80038a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038be:	4b13      	ldr	r3, [pc, #76]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038c6:	4b11      	ldr	r3, [pc, #68]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038da:	480c      	ldr	r0, [pc, #48]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038dc:	f7fd fee2 	bl	80016a4 <HAL_DMA_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80038e6:	f000 fad1 	bl	8003e8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
 80038f0:	4a06      	ldr	r2, [pc, #24]	; (800390c <HAL_ADC_MspInit+0xe8>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80038f6:	bf00      	nop
 80038f8:	3728      	adds	r7, #40	; 0x28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40012000 	.word	0x40012000
 8003904:	40023800 	.word	0x40023800
 8003908:	40020000 	.word	0x40020000
 800390c:	20000074 	.word	0x20000074
 8003910:	40026410 	.word	0x40026410

08003914 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <MX_CAN1_Init+0x68>)
 800391a:	4a19      	ldr	r2, [pc, #100]	; (8003980 <MX_CAN1_Init+0x6c>)
 800391c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <MX_CAN1_Init+0x68>)
 8003920:	2215      	movs	r2, #21
 8003922:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <MX_CAN1_Init+0x68>)
 8003926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800392a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <MX_CAN1_Init+0x68>)
 800392e:	2200      	movs	r2, #0
 8003930:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <MX_CAN1_Init+0x68>)
 8003934:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003938:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <MX_CAN1_Init+0x68>)
 800393c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003940:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <MX_CAN1_Init+0x68>)
 8003944:	2200      	movs	r2, #0
 8003946:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <MX_CAN1_Init+0x68>)
 800394a:	2200      	movs	r2, #0
 800394c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <MX_CAN1_Init+0x68>)
 8003950:	2200      	movs	r2, #0
 8003952:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <MX_CAN1_Init+0x68>)
 8003956:	2201      	movs	r2, #1
 8003958:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <MX_CAN1_Init+0x68>)
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <MX_CAN1_Init+0x68>)
 8003962:	2200      	movs	r2, #0
 8003964:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003966:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_CAN1_Init+0x68>)
 8003968:	f7fd fa34 	bl	8000dd4 <HAL_CAN_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8003972:	f000 fa8b 	bl	8003e8c <Error_Handler>
  }

}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000260 	.word	0x20000260
 8003980:	40006400 	.word	0x40006400

08003984 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <HAL_CAN_MspInit+0xa8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d13d      	bne.n	8003a22 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <HAL_CAN_MspInit+0xac>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a20      	ldr	r2, [pc, #128]	; (8003a30 <HAL_CAN_MspInit+0xac>)
 80039b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_CAN_MspInit+0xac>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <HAL_CAN_MspInit+0xac>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a19      	ldr	r2, [pc, #100]	; (8003a30 <HAL_CAN_MspInit+0xac>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <HAL_CAN_MspInit+0xac>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80039de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039e8:	2302      	movs	r3, #2
 80039ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	2303      	movs	r3, #3
 80039ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039f0:	2309      	movs	r3, #9
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4619      	mov	r1, r3
 80039fa:	480e      	ldr	r0, [pc, #56]	; (8003a34 <HAL_CAN_MspInit+0xb0>)
 80039fc:	f7fe f9c2 	bl	8001d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	2302      	movs	r3, #2
 8003a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003a12:	2309      	movs	r3, #9
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a16:	f107 0314 	add.w	r3, r7, #20
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4805      	ldr	r0, [pc, #20]	; (8003a34 <HAL_CAN_MspInit+0xb0>)
 8003a1e:	f7fe f9b1 	bl	8001d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003a22:	bf00      	nop
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40006400 	.word	0x40006400
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40020000 	.word	0x40020000

08003a38 <CANFilerConfig>:
/* USER CODE BEGIN 1 */

/*******************************************************************************
 FILTER CONFIGURATION
 *******************************************************************************/
void CANFilerConfig(void) {
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
	filter_0.FilterBank = 0;
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	615a      	str	r2, [r3, #20]
	filter_0.FilterMode = CAN_FILTERMODE_IDMASK;
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	619a      	str	r2, [r3, #24]
	filter_0.FilterScale = CAN_FILTERSCALE_32BIT;
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	61da      	str	r2, [r3, #28]
	filter_0.FilterIdHigh = 0x0000;			//0x321 << 5;
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
	filter_0.FilterIdLow = 0x0000;				//0x00000000;
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	605a      	str	r2, [r3, #4]
	filter_0.FilterMaskIdHigh = 0x0000;		//0x111 << 5;
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	609a      	str	r2, [r3, #8]
	filter_0.FilterMaskIdLow = 0x0000;			//0x00000000;
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	60da      	str	r2, [r3, #12]
	filter_0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	611a      	str	r2, [r3, #16]
	filter_0.FilterActivation = ENABLE;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	621a      	str	r2, [r3, #32]
	filter_0.SlaveStartFilterBank = 14;
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <CANFilerConfig+0x4c>)
 8003a74:	220e      	movs	r2, #14
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2000022c 	.word	0x2000022c

08003a88 <CAN1_Init>:

/*******************************************************************************
 	 PERYFERIUM INITIAZLIZATION
 *******************************************************************************/
void CAN1_Init() {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
	if (HAL_CAN_ConfigFilter(&hcan1, &filter_0) != HAL_OK) {
 8003a8c:	490d      	ldr	r1, [pc, #52]	; (8003ac4 <CAN1_Init+0x3c>)
 8003a8e:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <CAN1_Init+0x40>)
 8003a90:	f7fd fa9c 	bl	8000fcc <HAL_CAN_ConfigFilter>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <CAN1_Init+0x16>
		Error_Handler();
 8003a9a:	f000 f9f7 	bl	8003e8c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8003a9e:	480a      	ldr	r0, [pc, #40]	; (8003ac8 <CAN1_Init+0x40>)
 8003aa0:	f7fd fb74 	bl	800118c <HAL_CAN_Start>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <CAN1_Init+0x26>
		Error_Handler();
 8003aaa:	f000 f9ef 	bl	8003e8c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1,
 8003aae:	2103      	movs	r1, #3
 8003ab0:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <CAN1_Init+0x40>)
 8003ab2:	f7fd fcbf 	bl	8001434 <HAL_CAN_ActivateNotification>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <CAN1_Init+0x38>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8003abc:	f000 f9e6 	bl	8003e8c <Error_Handler>
	}
}
 8003ac0:	bf00      	nop
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	2000022c 	.word	0x2000022c
 8003ac8:	20000260 	.word	0x20000260

08003acc <prepareFrameData>:

/*******************************************************************************
 FRAME CONFIGURATION
 *******************************************************************************/
void prepareFrameData(void){
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
	uint32_t inputVoltage = averageArrayVoltage;
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <prepareFrameData+0x54>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	607b      	str	r3, [r7, #4]
	uint32_t inputCurrent = averageArrayCurrent;
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <prepareFrameData+0x58>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	603b      	str	r3, [r7, #0]

	frame_SYNC.TxData[0] = 0xFF & inputVoltage;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <prepareFrameData+0x5c>)
 8003ae4:	701a      	strb	r2, [r3, #0]
	frame_SYNC.TxData[1] = 0xFF00 & inputVoltage;
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <prepareFrameData+0x5c>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	705a      	strb	r2, [r3, #1]
	frame_SYNC.TxData[2] = 0xFF0000 & inputVoltage;
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <prepareFrameData+0x5c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	709a      	strb	r2, [r3, #2]
	frame_SYNC.TxData[3] = 0xFF000000 & inputVoltage;
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <prepareFrameData+0x5c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	70da      	strb	r2, [r3, #3]
	frame_SYNC.TxData[4] = 0xFF & inputCurrent;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <prepareFrameData+0x5c>)
 8003afe:	711a      	strb	r2, [r3, #4]
	frame_SYNC.TxData[5] = 0xFF00 & inputCurrent;
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <prepareFrameData+0x5c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	715a      	strb	r2, [r3, #5]
	frame_SYNC.TxData[6] = 0xFF0000 & inputCurrent;
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <prepareFrameData+0x5c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	719a      	strb	r2, [r3, #6]
	frame_SYNC.TxData[7] = 0xFF000000 & inputCurrent;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <prepareFrameData+0x5c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	71da      	strb	r2, [r3, #7]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	200001b0 	.word	0x200001b0
 8003b24:	200002a8 	.word	0x200002a8
 8003b28:	200001bc 	.word	0x200001bc

08003b2c <sendCAN>:

void sendCAN() {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
	frame_SYNC.TxHeader.StdId = 0x080;
 8003b30:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <sendCAN+0x58>)
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	609a      	str	r2, [r3, #8]
	frame_SYNC.TxHeader.RTR = CAN_RTR_DATA;
 8003b36:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <sendCAN+0x58>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	615a      	str	r2, [r3, #20]
	frame_SYNC.TxHeader.IDE = CAN_ID_STD;
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <sendCAN+0x58>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	611a      	str	r2, [r3, #16]
	frame_SYNC.TxHeader.DLC = 8;
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <sendCAN+0x58>)
 8003b44:	2208      	movs	r2, #8
 8003b46:	619a      	str	r2, [r3, #24]
	frame_SYNC.TxHeader.TransmitGlobalTime = DISABLE;
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <sendCAN+0x58>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	771a      	strb	r2, [r3, #28]

	prepareFrameData();
 8003b4e:	f7ff ffbd 	bl	8003acc <prepareFrameData>

	if (HAL_CAN_AddTxMessage(&hcan1, &frame_SYNC.TxHeader, frame_SYNC.TxData,
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <sendCAN+0x5c>)
 8003b54:	4a0b      	ldr	r2, [pc, #44]	; (8003b84 <sendCAN+0x58>)
 8003b56:	490d      	ldr	r1, [pc, #52]	; (8003b8c <sendCAN+0x60>)
 8003b58:	480d      	ldr	r0, [pc, #52]	; (8003b90 <sendCAN+0x64>)
 8003b5a:	f7fd fb5b 	bl	8001214 <HAL_CAN_AddTxMessage>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <sendCAN+0x3e>
			&TxMailbox) != HAL_OK) {
		Error_Handler();
 8003b64:	f000 f992 	bl	8003e8c <Error_Handler>
 8003b68:	e001      	b.n	8003b6e <sendCAN+0x42>
	} else{
		resetYellowState();
 8003b6a:	f000 fc2b 	bl	80043c4 <resetYellowState>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 8003b6e:	bf00      	nop
 8003b70:	4807      	ldr	r0, [pc, #28]	; (8003b90 <sendCAN+0x64>)
 8003b72:	f7fd fc2a 	bl	80013ca <HAL_CAN_GetTxMailboxesFreeLevel>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d1f9      	bne.n	8003b70 <sendCAN+0x44>
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200001bc 	.word	0x200001bc
 8003b88:	20000224 	.word	0x20000224
 8003b8c:	200001c4 	.word	0x200001c4
 8003b90:	20000260 	.word	0x20000260

08003b94 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <MX_DMA_Init+0x3c>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a0b      	ldr	r2, [pc, #44]	; (8003bd0 <MX_DMA_Init+0x3c>)
 8003ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <MX_DMA_Init+0x3c>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	2038      	movs	r0, #56	; 0x38
 8003bbc:	f7fd fd3b 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003bc0:	2038      	movs	r0, #56	; 0x38
 8003bc2:	f7fd fd54 	bl	800166e <HAL_NVIC_EnableIRQ>

}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800

08003bd4 <startReadingDMA>:

/* USER CODE BEGIN 2 */
void startReadingDMA(uint32_t * valueContainer){
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, valueContainer, 4);
 8003bdc:	2204      	movs	r2, #4
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <startReadingDMA+0x1c>)
 8003be2:	f7fc fd47 	bl	8000674 <HAL_ADC_Start_DMA>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000002c 	.word	0x2000002c

08003bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfa:	f107 0314 	add.w	r3, r7, #20
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	4b37      	ldr	r3, [pc, #220]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a36      	ldr	r2, [pc, #216]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c14:	f043 0310 	orr.w	r3, r3, #16
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b34      	ldr	r3, [pc, #208]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	4b30      	ldr	r3, [pc, #192]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c30:	f043 0304 	orr.w	r3, r3, #4
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	4b29      	ldr	r3, [pc, #164]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	4a28      	ldr	r2, [pc, #160]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c50:	6313      	str	r3, [r2, #48]	; 0x30
 8003c52:	4b26      	ldr	r3, [pc, #152]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6e:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4a1a      	ldr	r2, [pc, #104]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <MX_GPIO_Init+0xf8>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003c96:	2200      	movs	r2, #0
 8003c98:	2170      	movs	r1, #112	; 0x70
 8003c9a:	4815      	ldr	r0, [pc, #84]	; (8003cf0 <MX_GPIO_Init+0xfc>)
 8003c9c:	f7fe fa0e 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4813      	ldr	r0, [pc, #76]	; (8003cf4 <MX_GPIO_Init+0x100>)
 8003ca6:	f7fe fa09 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003caa:	2370      	movs	r3, #112	; 0x70
 8003cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cba:	f107 0314 	add.w	r3, r7, #20
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	480b      	ldr	r0, [pc, #44]	; (8003cf0 <MX_GPIO_Init+0xfc>)
 8003cc2:	f7fe f85f 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd6:	f107 0314 	add.w	r3, r7, #20
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <MX_GPIO_Init+0x100>)
 8003cde:	f7fe f851 	bl	8001d84 <HAL_GPIO_Init>

}
 8003ce2:	bf00      	nop
 8003ce4:	3728      	adds	r7, #40	; 0x28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40020400 	.word	0x40020400

08003cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	isMPPTInitialised = 0;
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <main+0x6c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d02:	f7fc fbdd 	bl	80004c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d06:	f000 f837 	bl	8003d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d0a:	f7ff ff73 	bl	8003bf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d0e:	f7ff ff41 	bl	8003b94 <MX_DMA_Init>
  MX_TIM3_Init();
 8003d12:	f000 f9e9 	bl	80040e8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003d16:	f7ff fd09 	bl	800372c <MX_ADC1_Init>
  MX_CAN1_Init();
 8003d1a:	f7ff fdfb 	bl	8003914 <MX_CAN1_Init>
  MX_TIM2_Init();
 8003d1e:	f000 f997 	bl	8004050 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003d22:	f000 f943 	bl	8003fac <MX_TIM1_Init>
  MX_TIM4_Init();
 8003d26:	f000 fa39 	bl	800419c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  CANFilerConfig();
 8003d2a:	f7ff fe85 	bl	8003a38 <CANFilerConfig>
  CAN1_Init();
 8003d2e:	f7ff feab 	bl	8003a88 <CAN1_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); 			//MCU_PWM
 8003d32:	210c      	movs	r1, #12
 8003d34:	480c      	ldr	r0, [pc, #48]	; (8003d68 <main+0x70>)
 8003d36:	f7fe fe61 	bl	80029fc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);	//MCU_PWM_EN Register
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	480b      	ldr	r0, [pc, #44]	; (8003d6c <main+0x74>)
 8003d40:	f7fe f9bc 	bl	80020bc <HAL_GPIO_WritePin>



  HAL_TIM_Base_Start_IT(&htim4);
 8003d44:	480a      	ldr	r0, [pc, #40]	; (8003d70 <main+0x78>)
 8003d46:	f7fe fe0a 	bl	800295e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8003d4a:	480a      	ldr	r0, [pc, #40]	; (8003d74 <main+0x7c>)
 8003d4c:	f7fe fe07 	bl	800295e <HAL_TIM_Base_Start_IT>

  MPPTInit();
 8003d50:	f000 fd84 	bl	800485c <MPPTInit>

  enablePWM();
 8003d54:	f000 fb7e 	bl	8004454 <enablePWM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  storeMeasurements();
 8003d58:	f000 fc3c 	bl	80045d4 <storeMeasurements>
	  HAL_Delay(DELAY_BETWEEN_MEASUREMENTS);
 8003d5c:	200a      	movs	r0, #10
 8003d5e:	f7fc fc21 	bl	80005a4 <HAL_Delay>
	  storeMeasurements();
 8003d62:	e7f9      	b.n	8003d58 <main+0x60>
 8003d64:	2000015c 	.word	0x2000015c
 8003d68:	200002ec 	.word	0x200002ec
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	200002ac 	.word	0x200002ac
 8003d74:	2000032c 	.word	0x2000032c

08003d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b094      	sub	sp, #80	; 0x50
 8003d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d7e:	f107 0320 	add.w	r3, r7, #32
 8003d82:	2230      	movs	r2, #48	; 0x30
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fde8 	bl	800495c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <SystemClock_Config+0xcc>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	4a27      	ldr	r2, [pc, #156]	; (8003e44 <SystemClock_Config+0xcc>)
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6413      	str	r3, [r2, #64]	; 0x40
 8003dac:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <SystemClock_Config+0xcc>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db8:	2300      	movs	r3, #0
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <SystemClock_Config+0xd0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <SystemClock_Config+0xd0>)
 8003dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <SystemClock_Config+0xd0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ddc:	2310      	movs	r3, #16
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003de0:	2302      	movs	r3, #2
 8003de2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003de4:	2300      	movs	r3, #0
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003de8:	2308      	movs	r3, #8
 8003dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003dec:	23a8      	movs	r3, #168	; 0xa8
 8003dee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003df0:	2302      	movs	r3, #2
 8003df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003df4:	2304      	movs	r3, #4
 8003df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003df8:	f107 0320 	add.w	r3, r7, #32
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe f977 	bl	80020f0 <HAL_RCC_OscConfig>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e08:	f000 f840 	bl	8003e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e10:	2302      	movs	r3, #2
 8003e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	2105      	movs	r1, #5
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fbd0 	bl	80025d0 <HAL_RCC_ClockConfig>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003e36:	f000 f829 	bl	8003e8c <Error_Handler>
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	3750      	adds	r7, #80	; 0x50
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40007000 	.word	0x40007000

08003e4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	if(isMPPTInitialised){
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(htim->Instance == TIM1) // T = 1 s*/
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_PeriodElapsedCallback+0x1e>
		{
			  sendCAN();
 8003e66:	f7ff fe61 	bl	8003b2c <sendCAN>
		}
		if(htim->Instance == TIM4) // T = 500ms
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a06      	ldr	r2, [pc, #24]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			checkArrayConnection();
 8003e74:	f000 fc90 	bl	8004798 <checkArrayConnection>
				void PandOAlgorithm();
			}
		}
	}

}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	2000015c 	.word	0x2000015c
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000800 	.word	0x40000800

08003e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	setYellowState();
 8003e90:	f000 fa88 	bl	80043a4 <setYellowState>
  /* USER CODE END Error_Handler_Debug */
}
 8003e94:	bf00      	nop
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_MspInit+0x4c>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	4a0f      	ldr	r2, [pc, #60]	; (8003ee4 <HAL_MspInit+0x4c>)
 8003ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eac:	6453      	str	r3, [r2, #68]	; 0x44
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <HAL_MspInit+0x4c>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_MspInit+0x4c>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <HAL_MspInit+0x4c>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_MspInit+0x4c>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800

08003ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003efa:	e7fe      	b.n	8003efa <HardFault_Handler+0x4>

08003efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f00:	e7fe      	b.n	8003f00 <MemManage_Handler+0x4>

08003f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f06:	e7fe      	b.n	8003f06 <BusFault_Handler+0x4>

08003f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f0c:	e7fe      	b.n	8003f0c <UsageFault_Handler+0x4>

08003f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f3c:	f7fc fb12 	bl	8000564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003f4a:	f7fe fd95 	bl	8002a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000032c 	.word	0x2000032c

08003f58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f5c:	4802      	ldr	r0, [pc, #8]	; (8003f68 <TIM4_IRQHandler+0x10>)
 8003f5e:	f7fe fd8b 	bl	8002a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200002ac 	.word	0x200002ac

08003f6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <DMA2_Stream0_IRQHandler+0x10>)
 8003f72:	f7fd fc9d 	bl	80018b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000074 	.word	0x20000074

08003f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <SystemInit+0x28>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <SystemInit+0x28>)
 8003f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <SystemInit+0x28>)
 8003f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f9a:	609a      	str	r2, [r3, #8]
#endif
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <MX_TIM1_Init+0x9c>)
 8003fca:	4a20      	ldr	r2, [pc, #128]	; (800404c <MX_TIM1_Init+0xa0>)
 8003fcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800;
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <MX_TIM1_Init+0x9c>)
 8003fd0:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8003fd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd6:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <MX_TIM1_Init+0x9c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <MX_TIM1_Init+0x9c>)
 8003fde:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fe2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe4:	4b18      	ldr	r3, [pc, #96]	; (8004048 <MX_TIM1_Init+0x9c>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fea:	4b17      	ldr	r3, [pc, #92]	; (8004048 <MX_TIM1_Init+0x9c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <MX_TIM1_Init+0x9c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ff6:	4814      	ldr	r0, [pc, #80]	; (8004048 <MX_TIM1_Init+0x9c>)
 8003ff8:	f7fe fc86 	bl	8002908 <HAL_TIM_Base_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004002:	f7ff ff43 	bl	8003e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800400a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	4619      	mov	r1, r3
 8004012:	480d      	ldr	r0, [pc, #52]	; (8004048 <MX_TIM1_Init+0x9c>)
 8004014:	f7fe fefe 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800401e:	f7ff ff35 	bl	8003e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800402a:	463b      	mov	r3, r7
 800402c:	4619      	mov	r1, r3
 800402e:	4806      	ldr	r0, [pc, #24]	; (8004048 <MX_TIM1_Init+0x9c>)
 8004030:	f7ff faec 	bl	800360c <HAL_TIMEx_MasterConfigSynchronization>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800403a:	f7ff ff27 	bl	8003e8c <Error_Handler>
  }

}
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000032c 	.word	0x2000032c
 800404c:	40010000 	.word	0x40010000

08004050 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004056:	f107 0308 	add.w	r3, r7, #8
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004064:	463b      	mov	r3, r7
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <MX_TIM2_Init+0x94>)
 800406e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004072:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <MX_TIM2_Init+0x94>)
 8004076:	2254      	movs	r2, #84	; 0x54
 8004078:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800407a:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <MX_TIM2_Init+0x94>)
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004080:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <MX_TIM2_Init+0x94>)
 8004082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004086:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004088:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <MX_TIM2_Init+0x94>)
 800408a:	2200      	movs	r2, #0
 800408c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <MX_TIM2_Init+0x94>)
 8004090:	2200      	movs	r2, #0
 8004092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004094:	4813      	ldr	r0, [pc, #76]	; (80040e4 <MX_TIM2_Init+0x94>)
 8004096:	f7fe fc37 	bl	8002908 <HAL_TIM_Base_Init>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80040a0:	f7ff fef4 	bl	8003e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80040aa:	f107 0308 	add.w	r3, r7, #8
 80040ae:	4619      	mov	r1, r3
 80040b0:	480c      	ldr	r0, [pc, #48]	; (80040e4 <MX_TIM2_Init+0x94>)
 80040b2:	f7fe feaf 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80040bc:	f7ff fee6 	bl	8003e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040c0:	2300      	movs	r3, #0
 80040c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040c8:	463b      	mov	r3, r7
 80040ca:	4619      	mov	r1, r3
 80040cc:	4805      	ldr	r0, [pc, #20]	; (80040e4 <MX_TIM2_Init+0x94>)
 80040ce:	f7ff fa9d 	bl	800360c <HAL_TIMEx_MasterConfigSynchronization>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80040d8:	f7ff fed8 	bl	8003e8c <Error_Handler>
  }

}
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	2000036c 	.word	0x2000036c

080040e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ee:	f107 0320 	add.w	r3, r7, #32
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	611a      	str	r2, [r3, #16]
 8004106:	615a      	str	r2, [r3, #20]
 8004108:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <MX_TIM3_Init+0xac>)
 800410c:	4a22      	ldr	r2, [pc, #136]	; (8004198 <MX_TIM3_Init+0xb0>)
 800410e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004110:	4b20      	ldr	r3, [pc, #128]	; (8004194 <MX_TIM3_Init+0xac>)
 8004112:	2200      	movs	r2, #0
 8004114:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <MX_TIM3_Init+0xac>)
 8004118:	2200      	movs	r2, #0
 800411a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <MX_TIM3_Init+0xac>)
 800411e:	f240 3247 	movw	r2, #839	; 0x347
 8004122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <MX_TIM3_Init+0xac>)
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <MX_TIM3_Init+0xac>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004130:	4818      	ldr	r0, [pc, #96]	; (8004194 <MX_TIM3_Init+0xac>)
 8004132:	f7fe fc38 	bl	80029a6 <HAL_TIM_PWM_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800413c:	f7ff fea6 	bl	8003e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004144:	2300      	movs	r3, #0
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004148:	f107 0320 	add.w	r3, r7, #32
 800414c:	4619      	mov	r1, r3
 800414e:	4811      	ldr	r0, [pc, #68]	; (8004194 <MX_TIM3_Init+0xac>)
 8004150:	f7ff fa5c 	bl	800360c <HAL_TIMEx_MasterConfigSynchronization>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800415a:	f7ff fe97 	bl	8003e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800415e:	2360      	movs	r3, #96	; 0x60
 8004160:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 670;
 8004162:	f240 239e 	movw	r3, #670	; 0x29e
 8004166:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	220c      	movs	r2, #12
 8004174:	4619      	mov	r1, r3
 8004176:	4807      	ldr	r0, [pc, #28]	; (8004194 <MX_TIM3_Init+0xac>)
 8004178:	f7fe fd86 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004182:	f7ff fe83 	bl	8003e8c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8004186:	4803      	ldr	r0, [pc, #12]	; (8004194 <MX_TIM3_Init+0xac>)
 8004188:	f000 f8d2 	bl	8004330 <HAL_TIM_MspPostInit>

}
 800418c:	bf00      	nop
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200002ec 	.word	0x200002ec
 8004198:	40000400 	.word	0x40000400

0800419c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041a2:	f107 0308 	add.w	r3, r7, #8
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	605a      	str	r2, [r3, #4]
 80041ac:	609a      	str	r2, [r3, #8]
 80041ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041b0:	463b      	mov	r3, r7
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <MX_TIM4_Init+0x94>)
 80041ba:	4a1e      	ldr	r2, [pc, #120]	; (8004234 <MX_TIM4_Init+0x98>)
 80041bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16800;
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <MX_TIM4_Init+0x94>)
 80041c0:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80041c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <MX_TIM4_Init+0x94>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <MX_TIM4_Init+0x94>)
 80041ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80041d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041d4:	4b16      	ldr	r3, [pc, #88]	; (8004230 <MX_TIM4_Init+0x94>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <MX_TIM4_Init+0x94>)
 80041dc:	2200      	movs	r2, #0
 80041de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80041e0:	4813      	ldr	r0, [pc, #76]	; (8004230 <MX_TIM4_Init+0x94>)
 80041e2:	f7fe fb91 	bl	8002908 <HAL_TIM_Base_Init>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80041ec:	f7ff fe4e 	bl	8003e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80041f6:	f107 0308 	add.w	r3, r7, #8
 80041fa:	4619      	mov	r1, r3
 80041fc:	480c      	ldr	r0, [pc, #48]	; (8004230 <MX_TIM4_Init+0x94>)
 80041fe:	f7fe fe09 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004208:	f7ff fe40 	bl	8003e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800420c:	2300      	movs	r3, #0
 800420e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004214:	463b      	mov	r3, r7
 8004216:	4619      	mov	r1, r3
 8004218:	4805      	ldr	r0, [pc, #20]	; (8004230 <MX_TIM4_Init+0x94>)
 800421a:	f7ff f9f7 	bl	800360c <HAL_TIMEx_MasterConfigSynchronization>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004224:	f7ff fe32 	bl	8003e8c <Error_Handler>
  }

}
 8004228:	bf00      	nop
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200002ac 	.word	0x200002ac
 8004234:	40000800 	.word	0x40000800

08004238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <HAL_TIM_Base_MspInit+0xa8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d116      	bne.n	8004278 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <HAL_TIM_Base_MspInit+0xac>)
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	4a24      	ldr	r2, [pc, #144]	; (80042e4 <HAL_TIM_Base_MspInit+0xac>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6453      	str	r3, [r2, #68]	; 0x44
 800425a:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <HAL_TIM_Base_MspInit+0xac>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004266:	2200      	movs	r2, #0
 8004268:	2100      	movs	r1, #0
 800426a:	2019      	movs	r0, #25
 800426c:	f7fd f9e3 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004270:	2019      	movs	r0, #25
 8004272:	f7fd f9fc 	bl	800166e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004276:	e02e      	b.n	80042d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d10e      	bne.n	80042a0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <HAL_TIM_Base_MspInit+0xac>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <HAL_TIM_Base_MspInit+0xac>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_TIM_Base_MspInit+0xac>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	693b      	ldr	r3, [r7, #16]
}
 800429e:	e01a      	b.n	80042d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <HAL_TIM_Base_MspInit+0xb0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d115      	bne.n	80042d6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_TIM_Base_MspInit+0xac>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <HAL_TIM_Base_MspInit+0xac>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_TIM_Base_MspInit+0xac>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2100      	movs	r1, #0
 80042ca:	201e      	movs	r0, #30
 80042cc:	f7fd f9b3 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042d0:	201e      	movs	r0, #30
 80042d2:	f7fd f9cc 	bl	800166e <HAL_NVIC_EnableIRQ>
}
 80042d6:	bf00      	nop
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40010000 	.word	0x40010000
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40000800 	.word	0x40000800

080042ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0b      	ldr	r2, [pc, #44]	; (8004328 <HAL_TIM_PWM_MspInit+0x3c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10d      	bne.n	800431a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_TIM_PWM_MspInit+0x40>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <HAL_TIM_PWM_MspInit+0x40>)
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	6413      	str	r3, [r2, #64]	; 0x40
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <HAL_TIM_PWM_MspInit+0x40>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40000400 	.word	0x40000400
 800432c:	40023800 	.word	0x40023800

08004330 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004338:	f107 030c 	add.w	r3, r7, #12
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a12      	ldr	r2, [pc, #72]	; (8004398 <HAL_TIM_MspPostInit+0x68>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d11d      	bne.n	800438e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_TIM_MspPostInit+0x6c>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	4a10      	ldr	r2, [pc, #64]	; (800439c <HAL_TIM_MspPostInit+0x6c>)
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	6313      	str	r3, [r2, #48]	; 0x30
 8004362:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_TIM_MspPostInit+0x6c>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800436e:	2302      	movs	r3, #2
 8004370:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004372:	2302      	movs	r3, #2
 8004374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800437e:	2302      	movs	r3, #2
 8004380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004382:	f107 030c 	add.w	r3, r7, #12
 8004386:	4619      	mov	r1, r3
 8004388:	4805      	ldr	r0, [pc, #20]	; (80043a0 <HAL_TIM_MspPostInit+0x70>)
 800438a:	f7fd fcfb 	bl	8001d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800438e:	bf00      	nop
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40000400 	.word	0x40000400
 800439c:	40023800 	.word	0x40023800
 80043a0:	40020400 	.word	0x40020400

080043a4 <setYellowState>:
#include "utilities.h"
#include "dma.h"

void setYellowState(void){
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80043a8:	2200      	movs	r2, #0
 80043aa:	2110      	movs	r1, #16
 80043ac:	4803      	ldr	r0, [pc, #12]	; (80043bc <setYellowState+0x18>)
 80043ae:	f7fd fe85 	bl	80020bc <HAL_GPIO_WritePin>
	MPPTState = MPPT_STATE_YELLOW;
 80043b2:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <setYellowState+0x1c>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
}
 80043b8:	bf00      	nop
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	20000254 	.word	0x20000254

080043c4 <resetYellowState>:

void resetYellowState(void){
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80043c8:	2201      	movs	r2, #1
 80043ca:	2110      	movs	r1, #16
 80043cc:	4802      	ldr	r0, [pc, #8]	; (80043d8 <resetYellowState+0x14>)
 80043ce:	f7fd fe75 	bl	80020bc <HAL_GPIO_WritePin>
}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000

080043dc <setRedState>:

void setRedState(void){
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80043e0:	2200      	movs	r2, #0
 80043e2:	2120      	movs	r1, #32
 80043e4:	4804      	ldr	r0, [pc, #16]	; (80043f8 <setRedState+0x1c>)
 80043e6:	f7fd fe69 	bl	80020bc <HAL_GPIO_WritePin>
	disablePWM();
 80043ea:	f000 f83f 	bl	800446c <disablePWM>
	MPPTState = MPPT_STATE_RED;
 80043ee:	4b03      	ldr	r3, [pc, #12]	; (80043fc <setRedState+0x20>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	20000254 	.word	0x20000254

08004400 <resetRedState>:
void resetRedState(void){
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8004404:	2201      	movs	r2, #1
 8004406:	2120      	movs	r1, #32
 8004408:	4802      	ldr	r0, [pc, #8]	; (8004414 <resetRedState+0x14>)
 800440a:	f7fd fe57 	bl	80020bc <HAL_GPIO_WritePin>
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000

08004418 <setGreenState>:

void setGreenState(void){
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 800441c:	2200      	movs	r2, #0
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	4804      	ldr	r0, [pc, #16]	; (8004434 <setGreenState+0x1c>)
 8004422:	f7fd fe4b 	bl	80020bc <HAL_GPIO_WritePin>
	enablePWM();
 8004426:	f000 f815 	bl	8004454 <enablePWM>
	MPPTState = MPPT_STATE_GREEN;
 800442a:	4b03      	ldr	r3, [pc, #12]	; (8004438 <setGreenState+0x20>)
 800442c:	2202      	movs	r2, #2
 800442e:	701a      	strb	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	20000254 	.word	0x20000254

0800443c <resetGreenState>:
void resetGreenState(void){
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8004440:	2201      	movs	r2, #1
 8004442:	2140      	movs	r1, #64	; 0x40
 8004444:	4802      	ldr	r0, [pc, #8]	; (8004450 <resetGreenState+0x14>)
 8004446:	f7fd fe39 	bl	80020bc <HAL_GPIO_WritePin>
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000

08004454 <enablePWM>:

void enablePWM(void){
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8004458:	2201      	movs	r2, #1
 800445a:	2101      	movs	r1, #1
 800445c:	4802      	ldr	r0, [pc, #8]	; (8004468 <enablePWM+0x14>)
 800445e:	f7fd fe2d 	bl	80020bc <HAL_GPIO_WritePin>
}
 8004462:	bf00      	nop
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40020400 	.word	0x40020400

0800446c <disablePWM>:
void disablePWM(void){
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8004470:	2200      	movs	r2, #0
 8004472:	2101      	movs	r1, #1
 8004474:	4802      	ldr	r0, [pc, #8]	; (8004480 <disablePWM+0x14>)
 8004476:	f7fd fe21 	bl	80020bc <HAL_GPIO_WritePin>
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40020400 	.word	0x40020400

08004484 <readVoltageAndCurrent>:


void readVoltageAndCurrent(uint32_t * valueContainer){
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	//
	//Battery:  318 - 13V, 500 - 20V, 800 - 32V, 1783 - 73,7V, 1907 - 80V, 2500 - 140V
	//Array:  512 - 20V, 816 - 32V


	batteryVoltageADC = valueContainer[3];
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <readVoltageAndCurrent+0x34>)
 8004492:	6013      	str	r3, [r2, #0]
	batteryCurrentADC = valueContainer[1];
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4a08      	ldr	r2, [pc, #32]	; (80044bc <readVoltageAndCurrent+0x38>)
 800449a:	6013      	str	r3, [r2, #0]

	arrayVoltageADC = valueContainer[2];
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <readVoltageAndCurrent+0x3c>)
 80044a2:	6013      	str	r3, [r2, #0]
	arrayCurrentADC = valueContainer[0];
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a06      	ldr	r2, [pc, #24]	; (80044c4 <readVoltageAndCurrent+0x40>)
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	20000288 	.word	0x20000288
 80044bc:	200001b4 	.word	0x200001b4
 80044c0:	20000160 	.word	0x20000160
 80044c4:	20000220 	.word	0x20000220

080044c8 <getArrayStatus>:

void getArrayStatus(void){
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
	calculateMeasurementsAverage();
 80044cc:	f000 f8cc 	bl	8004668 <calculateMeasurementsAverage>

	if(arrayStatus == ARRAY_ERROR){
 80044d0:	4b15      	ldr	r3, [pc, #84]	; (8004528 <getArrayStatus+0x60>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d110      	bne.n	80044fa <getArrayStatus+0x32>
		if (averageArrayVoltage >= ARRAY_TURN_ON_TH)
 80044d8:	4b14      	ldr	r3, [pc, #80]	; (800452c <getArrayStatus+0x64>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 80044e0:	d902      	bls.n	80044e8 <getArrayStatus+0x20>
				arrayStatus = ARRAY_OK;
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <getArrayStatus+0x60>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]

		if (averageArrayVoltage < ARRAY_TURN_ON_TH)
 80044e8:	4b10      	ldr	r3, [pc, #64]	; (800452c <getArrayStatus+0x64>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 80044f0:	d817      	bhi.n	8004522 <getArrayStatus+0x5a>
			arrayStatus = ARRAY_ERROR;
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <getArrayStatus+0x60>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]

		if (averageArrayVoltage < ARRAY_TURN_OFF_TH)
			arrayStatus = ARRAY_ERROR;
	}

}
 80044f8:	e013      	b.n	8004522 <getArrayStatus+0x5a>
	} else if (arrayStatus == ARRAY_OK){
 80044fa:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <getArrayStatus+0x60>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10f      	bne.n	8004522 <getArrayStatus+0x5a>
		if (averageArrayVoltage >= ARRAY_TURN_OFF_TH)
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <getArrayStatus+0x64>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 800450a:	d902      	bls.n	8004512 <getArrayStatus+0x4a>
			arrayStatus = ARRAY_OK;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <getArrayStatus+0x60>)
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
		if (averageArrayVoltage < ARRAY_TURN_OFF_TH)
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <getArrayStatus+0x64>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 800451a:	d802      	bhi.n	8004522 <getArrayStatus+0x5a>
			arrayStatus = ARRAY_ERROR;
 800451c:	4b02      	ldr	r3, [pc, #8]	; (8004528 <getArrayStatus+0x60>)
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000229 	.word	0x20000229
 800452c:	200001b0 	.word	0x200001b0

08004530 <getBatteryStatus>:

void getBatteryStatus(void){
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	calculateMeasurementsAverage();
 8004534:	f000 f898 	bl	8004668 <calculateMeasurementsAverage>

	if (batteryStatus == BATTERY_ERROR){
 8004538:	4b24      	ldr	r3, [pc, #144]	; (80045cc <getBatteryStatus+0x9c>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11e      	bne.n	800457e <getBatteryStatus+0x4e>
		if (averageBatteryVoltage >= BATTERY_ON_BOTTOM_TH || averageBatteryVoltage <= BATTERY_ON_UPPER_TH)
 8004540:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <getBatteryStatus+0xa0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f240 724d 	movw	r2, #1869	; 0x74d
 8004548:	4293      	cmp	r3, r2
 800454a:	d805      	bhi.n	8004558 <getBatteryStatus+0x28>
 800454c:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <getBatteryStatus+0xa0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f640 1206 	movw	r2, #2310	; 0x906
 8004554:	4293      	cmp	r3, r2
 8004556:	d802      	bhi.n	800455e <getBatteryStatus+0x2e>
			batteryStatus = BATTERY_OK;
 8004558:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <getBatteryStatus+0x9c>)
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
		if (averageBatteryVoltage < BATTERY_ON_BOTTOM_TH || averageBatteryVoltage > BATTERY_ON_UPPER_TH)
 800455e:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <getBatteryStatus+0xa0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f240 724d 	movw	r2, #1869	; 0x74d
 8004566:	4293      	cmp	r3, r2
 8004568:	d905      	bls.n	8004576 <getBatteryStatus+0x46>
 800456a:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <getBatteryStatus+0xa0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f640 1206 	movw	r2, #2310	; 0x906
 8004572:	4293      	cmp	r3, r2
 8004574:	d926      	bls.n	80045c4 <getBatteryStatus+0x94>
			batteryStatus = BATTERY_ERROR;
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <getBatteryStatus+0x9c>)
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
		return ;
 800457c:	e022      	b.n	80045c4 <getBatteryStatus+0x94>

	} else if (batteryStatus == BATTERY_OK) {
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <getBatteryStatus+0x9c>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d121      	bne.n	80045ca <getBatteryStatus+0x9a>
		if (averageBatteryVoltage >= BATTERY_OFF_BOTTOM_TH || averageBatteryVoltage <= BATTERY_OFF_UPPER_TH)
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <getBatteryStatus+0xa0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800458e:	4293      	cmp	r3, r2
 8004590:	d805      	bhi.n	800459e <getBatteryStatus+0x6e>
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <getBatteryStatus+0xa0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f640 122e 	movw	r2, #2350	; 0x92e
 800459a:	4293      	cmp	r3, r2
 800459c:	d802      	bhi.n	80045a4 <getBatteryStatus+0x74>
			batteryStatus = BATTERY_OK;
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <getBatteryStatus+0x9c>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
		if (averageBatteryVoltage < BATTERY_OFF_BOTTOM_TH || averageBatteryVoltage > BATTERY_OFF_UPPER_TH)
 80045a4:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <getBatteryStatus+0xa0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d905      	bls.n	80045bc <getBatteryStatus+0x8c>
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <getBatteryStatus+0xa0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f640 122e 	movw	r2, #2350	; 0x92e
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d905      	bls.n	80045c8 <getBatteryStatus+0x98>
			batteryStatus = BATTERY_ERROR;
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <getBatteryStatus+0x9c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
		return;
 80045c2:	e001      	b.n	80045c8 <getBatteryStatus+0x98>
		return ;
 80045c4:	bf00      	nop
 80045c6:	e000      	b.n	80045ca <getBatteryStatus+0x9a>
		return;
 80045c8:	bf00      	nop
	}
}
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	200001a4 	.word	0x200001a4
 80045d0:	200001ac 	.word	0x200001ac

080045d4 <storeMeasurements>:


void storeMeasurements(void){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
	if (lastMeasurementsIterator + 1 < NUMBER_OF_LAST_MEASUREMENTS)
 80045d8:	4b19      	ldr	r3, [pc, #100]	; (8004640 <storeMeasurements+0x6c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b0d      	cmp	r3, #13
 80045de:	d806      	bhi.n	80045ee <storeMeasurements+0x1a>
		lastMeasurementsIterator++;
 80045e0:	4b17      	ldr	r3, [pc, #92]	; (8004640 <storeMeasurements+0x6c>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <storeMeasurements+0x6c>)
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e002      	b.n	80045f4 <storeMeasurements+0x20>
	else
		lastMeasurementsIterator = 0;
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <storeMeasurements+0x6c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]

	readVoltageAndCurrent(valueContainerADC);
 80045f4:	4813      	ldr	r0, [pc, #76]	; (8004644 <storeMeasurements+0x70>)
 80045f6:	f7ff ff45 	bl	8004484 <readVoltageAndCurrent>

	lastADCArrayVoltage[lastMeasurementsIterator] = arrayVoltageADC;
 80045fa:	4b11      	ldr	r3, [pc, #68]	; (8004640 <storeMeasurements+0x6c>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	4619      	mov	r1, r3
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <storeMeasurements+0x74>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a11      	ldr	r2, [pc, #68]	; (800464c <storeMeasurements+0x78>)
 8004606:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	lastADCArrayCurrent[lastMeasurementsIterator] = arrayCurrentADC;
 800460a:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <storeMeasurements+0x6c>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	4619      	mov	r1, r3
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <storeMeasurements+0x7c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0f      	ldr	r2, [pc, #60]	; (8004654 <storeMeasurements+0x80>)
 8004616:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	lastADCBatteryVoltage[lastMeasurementsIterator] = batteryVoltageADC;
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <storeMeasurements+0x6c>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	4619      	mov	r1, r3
 8004620:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <storeMeasurements+0x84>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0d      	ldr	r2, [pc, #52]	; (800465c <storeMeasurements+0x88>)
 8004626:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	lastADCBatteryCurrent[lastMeasurementsIterator] = batteryCurrentADC;
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <storeMeasurements+0x6c>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	4619      	mov	r1, r3
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <storeMeasurements+0x8c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a0b      	ldr	r2, [pc, #44]	; (8004664 <storeMeasurements+0x90>)
 8004636:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000228 	.word	0x20000228
 8004644:	20000110 	.word	0x20000110
 8004648:	20000160 	.word	0x20000160
 800464c:	20000168 	.word	0x20000168
 8004650:	20000220 	.word	0x20000220
 8004654:	20000120 	.word	0x20000120
 8004658:	20000288 	.word	0x20000288
 800465c:	200000d4 	.word	0x200000d4
 8004660:	200001b4 	.word	0x200001b4
 8004664:	200001e4 	.word	0x200001e4

08004668 <calculateMeasurementsAverage>:

void calculateMeasurementsAverage(void){
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
	averageArrayVoltage = 0;
 800466e:	4b2f      	ldr	r3, [pc, #188]	; (800472c <calculateMeasurementsAverage+0xc4>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
	averageArrayCurrent = 0;
 8004674:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <calculateMeasurementsAverage+0xc8>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
	averageBatteryVoltage = 0;
 800467a:	4b2e      	ldr	r3, [pc, #184]	; (8004734 <calculateMeasurementsAverage+0xcc>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
	averageBatteryCurrent = 0;
 8004680:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <calculateMeasurementsAverage+0xd0>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 8004686:	2300      	movs	r3, #0
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	e026      	b.n	80046da <calculateMeasurementsAverage+0x72>
		averageArrayVoltage += lastADCArrayVoltage[i];
 800468c:	4a2b      	ldr	r2, [pc, #172]	; (800473c <calculateMeasurementsAverage+0xd4>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <calculateMeasurementsAverage+0xc4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4413      	add	r3, r2
 800469a:	4a24      	ldr	r2, [pc, #144]	; (800472c <calculateMeasurementsAverage+0xc4>)
 800469c:	6013      	str	r3, [r2, #0]
		averageArrayCurrent += lastADCArrayCurrent[i];
 800469e:	4a28      	ldr	r2, [pc, #160]	; (8004740 <calculateMeasurementsAverage+0xd8>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046a6:	4b22      	ldr	r3, [pc, #136]	; (8004730 <calculateMeasurementsAverage+0xc8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4413      	add	r3, r2
 80046ac:	4a20      	ldr	r2, [pc, #128]	; (8004730 <calculateMeasurementsAverage+0xc8>)
 80046ae:	6013      	str	r3, [r2, #0]
		averageBatteryVoltage += lastADCBatteryVoltage[i];
 80046b0:	4a24      	ldr	r2, [pc, #144]	; (8004744 <calculateMeasurementsAverage+0xdc>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046b8:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <calculateMeasurementsAverage+0xcc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4413      	add	r3, r2
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <calculateMeasurementsAverage+0xcc>)
 80046c0:	6013      	str	r3, [r2, #0]
		averageBatteryCurrent += lastADCBatteryCurrent[i];
 80046c2:	4a21      	ldr	r2, [pc, #132]	; (8004748 <calculateMeasurementsAverage+0xe0>)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046ca:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <calculateMeasurementsAverage+0xd0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4413      	add	r3, r2
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <calculateMeasurementsAverage+0xd0>)
 80046d2:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3301      	adds	r3, #1
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b0e      	cmp	r3, #14
 80046de:	ddd5      	ble.n	800468c <calculateMeasurementsAverage+0x24>
	}
	averageArrayVoltage /= NUMBER_OF_LAST_MEASUREMENTS;
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <calculateMeasurementsAverage+0xc4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a19      	ldr	r2, [pc, #100]	; (800474c <calculateMeasurementsAverage+0xe4>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	08db      	lsrs	r3, r3, #3
 80046ec:	4a0f      	ldr	r2, [pc, #60]	; (800472c <calculateMeasurementsAverage+0xc4>)
 80046ee:	6013      	str	r3, [r2, #0]
	averageArrayCurrent /= NUMBER_OF_LAST_MEASUREMENTS;
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <calculateMeasurementsAverage+0xc8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a15      	ldr	r2, [pc, #84]	; (800474c <calculateMeasurementsAverage+0xe4>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	08db      	lsrs	r3, r3, #3
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <calculateMeasurementsAverage+0xc8>)
 80046fe:	6013      	str	r3, [r2, #0]
	averageBatteryVoltage /= NUMBER_OF_LAST_MEASUREMENTS;
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <calculateMeasurementsAverage+0xcc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a11      	ldr	r2, [pc, #68]	; (800474c <calculateMeasurementsAverage+0xe4>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	08db      	lsrs	r3, r3, #3
 800470c:	4a09      	ldr	r2, [pc, #36]	; (8004734 <calculateMeasurementsAverage+0xcc>)
 800470e:	6013      	str	r3, [r2, #0]
	averageBatteryCurrent /= NUMBER_OF_LAST_MEASUREMENTS;
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <calculateMeasurementsAverage+0xd0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <calculateMeasurementsAverage+0xe4>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	08db      	lsrs	r3, r3, #3
 800471c:	4a06      	ldr	r2, [pc, #24]	; (8004738 <calculateMeasurementsAverage+0xd0>)
 800471e:	6013      	str	r3, [r2, #0]
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	200001b0 	.word	0x200001b0
 8004730:	200002a8 	.word	0x200002a8
 8004734:	200001ac 	.word	0x200001ac
 8004738:	200001b8 	.word	0x200001b8
 800473c:	20000168 	.word	0x20000168
 8004740:	20000120 	.word	0x20000120
 8004744:	200000d4 	.word	0x200000d4
 8004748:	200001e4 	.word	0x200001e4
 800474c:	88888889 	.word	0x88888889

08004750 <measurementsInit>:

void measurementsInit(void){
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
	lastMeasurementsIterator = 0;
 8004756:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <measurementsInit+0x40>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]

	startReadingDMA(valueContainerADC);
 800475c:	480d      	ldr	r0, [pc, #52]	; (8004794 <measurementsInit+0x44>)
 800475e:	f7ff fa39 	bl	8003bd4 <startReadingDMA>

	HAL_Delay(100); // to get valuable ADC measurements
 8004762:	2064      	movs	r0, #100	; 0x64
 8004764:	f7fb ff1e 	bl	80005a4 <HAL_Delay>

	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 8004768:	2300      	movs	r3, #0
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	e007      	b.n	800477e <measurementsInit+0x2e>
		storeMeasurements();
 800476e:	f7ff ff31 	bl	80045d4 <storeMeasurements>
		HAL_Delay(DELAY_BETWEEN_MEASUREMENTS);
 8004772:	200a      	movs	r0, #10
 8004774:	f7fb ff16 	bl	80005a4 <HAL_Delay>
	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3301      	adds	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b0e      	cmp	r3, #14
 8004782:	ddf4      	ble.n	800476e <measurementsInit+0x1e>
	}

	calculateMeasurementsAverage();
 8004784:	f7ff ff70 	bl	8004668 <calculateMeasurementsAverage>
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000228 	.word	0x20000228
 8004794:	20000110 	.word	0x20000110

08004798 <checkArrayConnection>:

void checkArrayConnection(void){
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0

	getArrayStatus();
 800479c:	f7ff fe94 	bl	80044c8 <getArrayStatus>

	if(arrayStatus == ARRAY_ERROR)
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <checkArrayConnection+0x34>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d105      	bne.n	80047b4 <checkArrayConnection+0x1c>
	{
		setRedState();
 80047a8:	f7ff fe18 	bl	80043dc <setRedState>
		resetGreenState();
 80047ac:	f7ff fe46 	bl	800443c <resetGreenState>
		resetYellowState();
 80047b0:	f7ff fe08 	bl	80043c4 <resetYellowState>
	}

	if(arrayStatus == ARRAY_OK)
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <checkArrayConnection+0x34>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <checkArrayConnection+0x30>
	{
		resetRedState();
 80047bc:	f7ff fe20 	bl	8004400 <resetRedState>
		setGreenState();
 80047c0:	f7ff fe2a 	bl	8004418 <setGreenState>
		resetYellowState();
 80047c4:	f7ff fdfe 	bl	80043c4 <resetYellowState>
	}

}
 80047c8:	bf00      	nop
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20000229 	.word	0x20000229

080047d0 <checkBatteryConnection>:

void checkBatteryConnection(void){
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0

	getBatteryStatus();
 80047d4:	f7ff feac 	bl	8004530 <getBatteryStatus>

	if(batteryStatus == BATTERY_ERROR)
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <checkBatteryConnection+0x34>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <checkBatteryConnection+0x1c>
	{
		setRedState();
 80047e0:	f7ff fdfc 	bl	80043dc <setRedState>
		resetGreenState();
 80047e4:	f7ff fe2a 	bl	800443c <resetGreenState>
		resetYellowState();
 80047e8:	f7ff fdec 	bl	80043c4 <resetYellowState>
	}
	if(batteryStatus == BATTERY_OK)
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <checkBatteryConnection+0x34>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <checkBatteryConnection+0x30>
	{
		resetRedState();
 80047f4:	f7ff fe04 	bl	8004400 <resetRedState>
		setGreenState();
 80047f8:	f7ff fe0e 	bl	8004418 <setGreenState>
		resetYellowState();
 80047fc:	f7ff fde2 	bl	80043c4 <resetYellowState>
	}
}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}
 8004804:	200001a4 	.word	0x200001a4

08004808 <calculateInputPower>:

void calculateInputPower(void){
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
	inputPower = averageArrayCurrent * averageArrayVoltage;
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <calculateInputPower+0x20>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a06      	ldr	r2, [pc, #24]	; (800482c <calculateInputPower+0x24>)
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	4a05      	ldr	r2, [pc, #20]	; (8004830 <calculateInputPower+0x28>)
 800481a:	6013      	str	r3, [r2, #0]
}
 800481c:	bf00      	nop
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	200002a8 	.word	0x200002a8
 800482c:	200001b0 	.word	0x200001b0
 8004830:	200001a8 	.word	0x200001a8

08004834 <setDutyCycle>:
void setDutyCycle(uint32_t dutyCyclePerMille){
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	TIM3->CCR4 = MAX_COUNTER_VALUE*dutyCyclePerMille;
 800483c:	4a06      	ldr	r2, [pc, #24]	; (8004858 <setDutyCycle+0x24>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f240 3147 	movw	r1, #839	; 0x347
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	6413      	str	r3, [r2, #64]	; 0x40
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40000400 	.word	0x40000400

0800485c <MPPTInit>:

	prevStepDirection = STEP_DOWN;
}


void MPPTInit(void){
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
	prevStepDirection = STEP_UP;
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <MPPTInit+0x50>)
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
	// set duty cycle
	setDutyCycle(DUTY_CYCLE_INITIALIZED);
 8004866:	f44f 7048 	mov.w	r0, #800	; 0x320
 800486a:	f7ff ffe3 	bl	8004834 <setDutyCycle>

	// reset LED State
	resetYellowState();
 800486e:	f7ff fda9 	bl	80043c4 <resetYellowState>
	resetRedState();
 8004872:	f7ff fdc5 	bl	8004400 <resetRedState>
	resetGreenState();
 8004876:	f7ff fde1 	bl	800443c <resetGreenState>

	// initialize array and battery status
	arrayStatus = ARRAY_ERROR;
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <MPPTInit+0x54>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
	batteryStatus = BATTERY_ERROR;
 8004880:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <MPPTInit+0x58>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]

	disablePWM();
 8004886:	f7ff fdf1 	bl	800446c <disablePWM>

	measurementsInit();
 800488a:	f7ff ff61 	bl	8004750 <measurementsInit>
	checkArrayConnection();
 800488e:	f7ff ff83 	bl	8004798 <checkArrayConnection>
	checkBatteryConnection();
 8004892:	f7ff ff9d 	bl	80047d0 <checkBatteryConnection>

	if(MPPTState == MPPT_STATE_GREEN)
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <MPPTInit+0x5c>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d101      	bne.n	80048a2 <MPPTInit+0x46>
	{
		calculateInputPower();
 800489e:	f7ff ffb3 	bl	8004808 <calculateInputPower>
	}
	isMPPTInitialised = 1;
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <MPPTInit+0x60>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	701a      	strb	r2, [r3, #0]

}
 80048a8:	bf00      	nop
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000255 	.word	0x20000255
 80048b0:	20000229 	.word	0x20000229
 80048b4:	200001a4 	.word	0x200001a4
 80048b8:	20000254 	.word	0x20000254
 80048bc:	2000015c 	.word	0x2000015c

080048c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80048c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80048c6:	e003      	b.n	80048d0 <LoopCopyDataInit>

080048c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80048ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80048cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80048ce:	3104      	adds	r1, #4

080048d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80048d0:	480b      	ldr	r0, [pc, #44]	; (8004900 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80048d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80048d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80048d8:	d3f6      	bcc.n	80048c8 <CopyDataInit>
  ldr  r2, =_sbss
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80048dc:	e002      	b.n	80048e4 <LoopFillZerobss>

080048de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80048de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80048e0:	f842 3b04 	str.w	r3, [r2], #4

080048e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80048e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048e8:	d3f9      	bcc.n	80048de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80048ea:	f7ff fb49 	bl	8003f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048ee:	f000 f811 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048f2:	f7ff fa01 	bl	8003cf8 <main>
  bx  lr    
 80048f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80048f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80048fc:	080049ac 	.word	0x080049ac
  ldr  r0, =_sdata
 8004900:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004904:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004908:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800490c:	200003ac 	.word	0x200003ac

08004910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004910:	e7fe      	b.n	8004910 <ADC_IRQHandler>
	...

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4d0d      	ldr	r5, [pc, #52]	; (800494c <__libc_init_array+0x38>)
 8004918:	4c0d      	ldr	r4, [pc, #52]	; (8004950 <__libc_init_array+0x3c>)
 800491a:	1b64      	subs	r4, r4, r5
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	2600      	movs	r6, #0
 8004920:	42a6      	cmp	r6, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	4d0b      	ldr	r5, [pc, #44]	; (8004954 <__libc_init_array+0x40>)
 8004926:	4c0c      	ldr	r4, [pc, #48]	; (8004958 <__libc_init_array+0x44>)
 8004928:	f000 f820 	bl	800496c <_init>
 800492c:	1b64      	subs	r4, r4, r5
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	2600      	movs	r6, #0
 8004932:	42a6      	cmp	r6, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	f855 3b04 	ldr.w	r3, [r5], #4
 800493c:	4798      	blx	r3
 800493e:	3601      	adds	r6, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	f855 3b04 	ldr.w	r3, [r5], #4
 8004946:	4798      	blx	r3
 8004948:	3601      	adds	r6, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	080049a4 	.word	0x080049a4
 8004950:	080049a4 	.word	0x080049a4
 8004954:	080049a4 	.word	0x080049a4
 8004958:	080049a8 	.word	0x080049a8

0800495c <memset>:
 800495c:	4402      	add	r2, r0
 800495e:	4603      	mov	r3, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	d100      	bne.n	8004966 <memset+0xa>
 8004964:	4770      	bx	lr
 8004966:	f803 1b01 	strb.w	r1, [r3], #1
 800496a:	e7f9      	b.n	8004960 <memset+0x4>

0800496c <_init>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	bf00      	nop
 8004970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	469e      	mov	lr, r3
 8004976:	4770      	bx	lr

08004978 <_fini>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	bf00      	nop
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr
