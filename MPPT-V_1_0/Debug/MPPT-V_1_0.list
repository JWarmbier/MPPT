
MPPT-V_1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb0  08003cb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000010  08003cc8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08003cc8  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0ea  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002174  00000000  00000000  0002d12a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb0  00000000  00000000  0002ff88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021592  00000000  00000000  00030b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b841  00000000  00000000  000520ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca481  00000000  00000000  0005d90b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127d8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000343c  00000000  00000000  00127e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c78 	.word	0x08003c78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003c78 	.word	0x08003c78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 ff87 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f003 f9b6 	bl	800386c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 ff9f 	bl	800146e <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000548:	f000 ff67 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000000c 	.word	0x2000000c
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	2000002c 	.word	0x2000002c

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000002c 	.word	0x2000002c

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e033      	b.n	800066e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f002 fe80 	bl	8003314 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	2b00      	cmp	r3, #0
 800062c:	d118      	bne.n	8000660 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000636:	f023 0302 	bic.w	r3, r3, #2
 800063a:	f043 0202 	orr.w	r2, r3, #2
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 fa4a 	bl	8000adc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0201 	orr.w	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	641a      	str	r2, [r3, #64]	; 0x40
 800065e:	e001      	b.n	8000664 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800068e:	2b01      	cmp	r3, #1
 8000690:	d101      	bne.n	8000696 <HAL_ADC_Start_DMA+0x1e>
 8000692:	2302      	movs	r3, #2
 8000694:	e0cc      	b.n	8000830 <HAL_ADC_Start_DMA+0x1b8>
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2201      	movs	r2, #1
 800069a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d018      	beq.n	80006de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0201 	orr.w	r2, r2, #1
 80006ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006bc:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <HAL_ADC_Start_DMA+0x1c0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a5e      	ldr	r2, [pc, #376]	; (800083c <HAL_ADC_Start_DMA+0x1c4>)
 80006c2:	fba2 2303 	umull	r2, r3, r2, r3
 80006c6:	0c9a      	lsrs	r2, r3, #18
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006d0:	e002      	b.n	80006d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f9      	bne.n	80006d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	f040 80a0 	bne.w	800082e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800070c:	2b00      	cmp	r3, #0
 800070e:	d007      	beq.n	8000720 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000718:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800072c:	d106      	bne.n	800073c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f023 0206 	bic.w	r2, r3, #6
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	645a      	str	r2, [r3, #68]	; 0x44
 800073a:	e002      	b.n	8000742 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2200      	movs	r2, #0
 8000746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <HAL_ADC_Start_DMA+0x1c8>)
 800074c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000752:	4a3c      	ldr	r2, [pc, #240]	; (8000844 <HAL_ADC_Start_DMA+0x1cc>)
 8000754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075a:	4a3b      	ldr	r2, [pc, #236]	; (8000848 <HAL_ADC_Start_DMA+0x1d0>)
 800075c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000762:	4a3a      	ldr	r2, [pc, #232]	; (800084c <HAL_ADC_Start_DMA+0x1d4>)
 8000764:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800076e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800077e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800078e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	334c      	adds	r3, #76	; 0x4c
 800079a:	4619      	mov	r1, r3
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f000 ff20 	bl	80015e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f003 031f 	and.w	r3, r3, #31
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d12a      	bne.n	8000806 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <HAL_ADC_Start_DMA+0x1d8>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d015      	beq.n	80007e6 <HAL_ADC_Start_DMA+0x16e>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a25      	ldr	r2, [pc, #148]	; (8000854 <HAL_ADC_Start_DMA+0x1dc>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d105      	bne.n	80007d0 <HAL_ADC_Start_DMA+0x158>
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <HAL_ADC_Start_DMA+0x1c8>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f003 031f 	and.w	r3, r3, #31
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00a      	beq.n	80007e6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a20      	ldr	r2, [pc, #128]	; (8000858 <HAL_ADC_Start_DMA+0x1e0>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d129      	bne.n	800082e <HAL_ADC_Start_DMA+0x1b6>
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_ADC_Start_DMA+0x1c8>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 031f 	and.w	r3, r3, #31
 80007e2:	2b0f      	cmp	r3, #15
 80007e4:	d823      	bhi.n	800082e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d11c      	bne.n	800082e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	e013      	b.n	800082e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <HAL_ADC_Start_DMA+0x1d8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d10e      	bne.n	800082e <HAL_ADC_Start_DMA+0x1b6>
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d107      	bne.n	800082e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800082c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000000c 	.word	0x2000000c
 800083c:	431bde83 	.word	0x431bde83
 8000840:	40012300 	.word	0x40012300
 8000844:	08000cd5 	.word	0x08000cd5
 8000848:	08000d8f 	.word	0x08000d8f
 800084c:	08000dab 	.word	0x08000dab
 8000850:	40012000 	.word	0x40012000
 8000854:	40012100 	.word	0x40012100
 8000858:	40012200 	.word	0x40012200

0800085c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <HAL_ADC_ConfigChannel+0x1c>
 80008b0:	2302      	movs	r3, #2
 80008b2:	e105      	b.n	8000ac0 <HAL_ADC_ConfigChannel+0x228>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2201      	movs	r2, #1
 80008b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b09      	cmp	r3, #9
 80008c2:	d925      	bls.n	8000910 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68d9      	ldr	r1, [r3, #12]
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	3b1e      	subs	r3, #30
 80008da:	2207      	movs	r2, #7
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43da      	mvns	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	400a      	ands	r2, r1
 80008e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68d9      	ldr	r1, [r3, #12]
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	4603      	mov	r3, r0
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4403      	add	r3, r0
 8000902:	3b1e      	subs	r3, #30
 8000904:	409a      	lsls	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	430a      	orrs	r2, r1
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	e022      	b.n	8000956 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6919      	ldr	r1, [r3, #16]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	b29b      	uxth	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	2207      	movs	r2, #7
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	400a      	ands	r2, r1
 8000932:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6919      	ldr	r1, [r3, #16]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	b29b      	uxth	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	4603      	mov	r3, r0
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4403      	add	r3, r0
 800094c:	409a      	lsls	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	430a      	orrs	r2, r1
 8000954:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b06      	cmp	r3, #6
 800095c:	d824      	bhi.n	80009a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	3b05      	subs	r3, #5
 8000970:	221f      	movs	r2, #31
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	400a      	ands	r2, r1
 800097e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	3b05      	subs	r3, #5
 800099a:	fa00 f203 	lsl.w	r2, r0, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	430a      	orrs	r2, r1
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
 80009a6:	e04c      	b.n	8000a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b0c      	cmp	r3, #12
 80009ae:	d824      	bhi.n	80009fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	3b23      	subs	r3, #35	; 0x23
 80009c2:	221f      	movs	r2, #31
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43da      	mvns	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	400a      	ands	r2, r1
 80009d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	4613      	mov	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	3b23      	subs	r3, #35	; 0x23
 80009ec:	fa00 f203 	lsl.w	r2, r0, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
 80009f8:	e023      	b.n	8000a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	4613      	mov	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	3b41      	subs	r3, #65	; 0x41
 8000a0c:	221f      	movs	r2, #31
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	400a      	ands	r2, r1
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	3b41      	subs	r3, #65	; 0x41
 8000a36:	fa00 f203 	lsl.w	r2, r0, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <HAL_ADC_ConfigChannel+0x234>)
 8000a44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <HAL_ADC_ConfigChannel+0x238>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d109      	bne.n	8000a64 <HAL_ADC_ConfigChannel+0x1cc>
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b12      	cmp	r3, #18
 8000a56:	d105      	bne.n	8000a64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_ADC_ConfigChannel+0x238>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d123      	bne.n	8000ab6 <HAL_ADC_ConfigChannel+0x21e>
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b10      	cmp	r3, #16
 8000a74:	d003      	beq.n	8000a7e <HAL_ADC_ConfigChannel+0x1e6>
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b11      	cmp	r3, #17
 8000a7c:	d11b      	bne.n	8000ab6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b10      	cmp	r3, #16
 8000a90:	d111      	bne.n	8000ab6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_ADC_ConfigChannel+0x23c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_ADC_ConfigChannel+0x240>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	0c9a      	lsrs	r2, r3, #18
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000aa8:	e002      	b.n	8000ab0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f9      	bne.n	8000aaa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40012300 	.word	0x40012300
 8000ad0:	40012000 	.word	0x40012000
 8000ad4:	2000000c 	.word	0x2000000c
 8000ad8:	431bde83 	.word	0x431bde83

08000adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ae4:	4b79      	ldr	r3, [pc, #484]	; (8000ccc <ADC_Init+0x1f0>)
 8000ae6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	6859      	ldr	r1, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	021a      	lsls	r2, r3, #8
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6859      	ldr	r1, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	430a      	orrs	r2, r1
 8000b46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6899      	ldr	r1, [r3, #8]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6e:	4a58      	ldr	r2, [pc, #352]	; (8000cd0 <ADC_Init+0x1f4>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d022      	beq.n	8000bba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6899      	ldr	r1, [r3, #8]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	6899      	ldr	r1, [r3, #8]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	e00f      	b.n	8000bda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0202 	bic.w	r2, r2, #2
 8000be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6899      	ldr	r1, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7e1b      	ldrb	r3, [r3, #24]
 8000bf4:	005a      	lsls	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d01b      	beq.n	8000c40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6859      	ldr	r1, [r3, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c32:	3b01      	subs	r3, #1
 8000c34:	035a      	lsls	r2, r3, #13
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	e007      	b.n	8000c50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	051a      	lsls	r2, r3, #20
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6899      	ldr	r1, [r3, #8]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c92:	025a      	lsls	r2, r3, #9
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6899      	ldr	r1, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	029a      	lsls	r2, r3, #10
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	609a      	str	r2, [r3, #8]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40012300 	.word	0x40012300
 8000cd0:	0f000001 	.word	0x0f000001

08000cd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d13c      	bne.n	8000d68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d12b      	bne.n	8000d60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d127      	bne.n	8000d60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d006      	beq.n	8000d2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d119      	bne.n	8000d60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0220 	bic.w	r2, r2, #32
 8000d3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f7ff fd7b 	bl	800085c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000d66:	e00e      	b.n	8000d86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f7ff fd85 	bl	8000884 <HAL_ADC_ErrorCallback>
}
 8000d7a:	e004      	b.n	8000d86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	4798      	blx	r3
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fd67 	bl	8000870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f043 0204 	orr.w	r2, r3, #4
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fd5a 	bl	8000884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e0ed      	b.n	8000fc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f002 fb3c 	bl	8003474 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0202 	bic.w	r2, r2, #2
 8000e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e0c:	f7ff fbc2 	bl	8000594 <HAL_GetTick>
 8000e10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e12:	e012      	b.n	8000e3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e14:	f7ff fbbe 	bl	8000594 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	d90b      	bls.n	8000e3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2205      	movs	r2, #5
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e0c5      	b.n	8000fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e5      	bne.n	8000e14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0201 	orr.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e58:	f7ff fb9c 	bl	8000594 <HAL_GetTick>
 8000e5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e5e:	e012      	b.n	8000e86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e60:	f7ff fb98 	bl	8000594 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b0a      	cmp	r3, #10
 8000e6c:	d90b      	bls.n	8000e86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2205      	movs	r2, #5
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e09f      	b.n	8000fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0e5      	beq.n	8000e60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7e1b      	ldrb	r3, [r3, #24]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d108      	bne.n	8000eae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e007      	b.n	8000ebe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7e5b      	ldrb	r3, [r3, #25]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d108      	bne.n	8000ed8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e007      	b.n	8000ee8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7e9b      	ldrb	r3, [r3, #26]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d108      	bne.n	8000f02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0220 	orr.w	r2, r2, #32
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	e007      	b.n	8000f12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0220 	bic.w	r2, r2, #32
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7edb      	ldrb	r3, [r3, #27]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d108      	bne.n	8000f2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0210 	bic.w	r2, r2, #16
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e007      	b.n	8000f3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0210 	orr.w	r2, r2, #16
 8000f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7f1b      	ldrb	r3, [r3, #28]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0208 	orr.w	r2, r2, #8
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e007      	b.n	8000f66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0208 	bic.w	r2, r2, #8
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7f5b      	ldrb	r3, [r3, #29]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d108      	bne.n	8000f80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 0204 	orr.w	r2, r2, #4
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e007      	b.n	8000f90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0204 	bic.w	r2, r2, #4
 8000f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	ea42 0103 	orr.w	r1, r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	1e5a      	subs	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe8:	7cfb      	ldrb	r3, [r7, #19]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d003      	beq.n	8000ff6 <HAL_CAN_ConfigFilter+0x26>
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	f040 80be 	bne.w	8001172 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ff6:	4b65      	ldr	r3, [pc, #404]	; (800118c <HAL_CAN_ConfigFilter+0x1bc>)
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001000:	f043 0201 	orr.w	r2, r3, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001010:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	431a      	orrs	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2201      	movs	r2, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	401a      	ands	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d123      	bne.n	80010a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800107a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3248      	adds	r2, #72	; 0x48
 8001080:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001094:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001096:	6979      	ldr	r1, [r7, #20]
 8001098:	3348      	adds	r3, #72	; 0x48
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d122      	bne.n	80010ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3248      	adds	r2, #72	; 0x48
 80010ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010e4:	6979      	ldr	r1, [r7, #20]
 80010e6:	3348      	adds	r3, #72	; 0x48
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001108:	e007      	b.n	800111a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	431a      	orrs	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	401a      	ands	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001134:	e007      	b.n	8001146 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	431a      	orrs	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001164:	f023 0201 	bic.w	r2, r3, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e006      	b.n	8001180 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40006400 	.word	0x40006400

08001190 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d12e      	bne.n	8001202 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2202      	movs	r2, #2
 80011a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011bc:	f7ff f9ea 	bl	8000594 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011c2:	e012      	b.n	80011ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c4:	f7ff f9e6 	bl	8000594 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b0a      	cmp	r3, #10
 80011d0:	d90b      	bls.n	80011ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2205      	movs	r2, #5
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e012      	b.n	8001210 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e5      	bne.n	80011c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e006      	b.n	8001210 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
  }
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001228:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d002      	beq.n	8001236 <HAL_CAN_ActivateNotification+0x1e>
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d109      	bne.n	800124a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6959      	ldr	r1, [r3, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e006      	b.n	8001258 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
  }
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff29 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff3e 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff31 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff f87e 	bl	8000594 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e099      	b.n	80015d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c4:	e00f      	b.n	80014e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c6:	f7ff f865 	bl	8000594 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d908      	bls.n	80014e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2220      	movs	r2, #32
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2203      	movs	r2, #3
 80014de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e078      	b.n	80015d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1e8      	bne.n	80014c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <HAL_DMA_Init+0x158>)
 8001500:	4013      	ands	r3, r2
 8001502:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001512:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4313      	orrs	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	2b04      	cmp	r3, #4
 800153e:	d107      	bne.n	8001550 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4313      	orrs	r3, r2
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4313      	orrs	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f023 0307 	bic.w	r3, r3, #7
 8001566:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4313      	orrs	r3, r2
 8001570:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	2b04      	cmp	r3, #4
 8001578:	d117      	bne.n	80015aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4313      	orrs	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00e      	beq.n	80015aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fa6f 	bl	8001a70 <DMA_CheckFifoParam>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d008      	beq.n	80015aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2240      	movs	r2, #64	; 0x40
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015a6:	2301      	movs	r3, #1
 80015a8:	e016      	b.n	80015d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fa26 	bl	8001a04 <DMA_CalcBaseAndBitshift>
 80015b8:	4603      	mov	r3, r0
 80015ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	223f      	movs	r2, #63	; 0x3f
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	f010803f 	.word	0xf010803f

080015e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_DMA_Start_IT+0x26>
 8001606:	2302      	movs	r3, #2
 8001608:	e040      	b.n	800168c <HAL_DMA_Start_IT+0xa8>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d12f      	bne.n	800167e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2202      	movs	r2, #2
 8001622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f9b8 	bl	80019a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	223f      	movs	r2, #63	; 0x3f
 800163e:	409a      	lsls	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0216 	orr.w	r2, r2, #22
 8001652:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d007      	beq.n	800166c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0208 	orr.w	r2, r2, #8
 800166a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e005      	b.n	800168a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001686:	2302      	movs	r3, #2
 8001688:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800168a:	7dfb      	ldrb	r3, [r7, #23]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016a0:	4b92      	ldr	r3, [pc, #584]	; (80018ec <HAL_DMA_IRQHandler+0x258>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a92      	ldr	r2, [pc, #584]	; (80018f0 <HAL_DMA_IRQHandler+0x25c>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0a9b      	lsrs	r3, r3, #10
 80016ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2208      	movs	r2, #8
 80016c0:	409a      	lsls	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01a      	beq.n	8001700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0204 	bic.w	r2, r2, #4
 80016e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	2208      	movs	r2, #8
 80016ee:	409a      	lsls	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	2201      	movs	r2, #1
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d012      	beq.n	8001736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	2201      	movs	r2, #1
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	f043 0202 	orr.w	r2, r3, #2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	2204      	movs	r2, #4
 800173c:	409a      	lsls	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d012      	beq.n	800176c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00b      	beq.n	800176c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2204      	movs	r2, #4
 800175a:	409a      	lsls	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	f043 0204 	orr.w	r2, r3, #4
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	2210      	movs	r2, #16
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d043      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03c      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2210      	movs	r2, #16
 8001790:	409a      	lsls	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d018      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d108      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d024      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
 80017c2:	e01f      	b.n	8001804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01b      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
 80017d4:	e016      	b.n	8001804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0208 	bic.w	r2, r2, #8
 80017f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001808:	2220      	movs	r2, #32
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 808e 	beq.w	8001932 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8086 	beq.w	8001932 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	2220      	movs	r2, #32
 800182c:	409a      	lsls	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b05      	cmp	r3, #5
 800183c:	d136      	bne.n	80018ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0216 	bic.w	r2, r2, #22
 800184c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800185c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <HAL_DMA_IRQHandler+0x1da>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0208 	bic.w	r2, r2, #8
 800187c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	223f      	movs	r2, #63	; 0x3f
 8001884:	409a      	lsls	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d07d      	beq.n	800199e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	4798      	blx	r3
        }
        return;
 80018aa:	e078      	b.n	800199e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01c      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d108      	bne.n	80018da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d030      	beq.n	8001932 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
 80018d8:	e02b      	b.n	8001932 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d027      	beq.n	8001932 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	4798      	blx	r3
 80018ea:	e022      	b.n	8001932 <HAL_DMA_IRQHandler+0x29e>
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0210 	bic.w	r2, r2, #16
 8001910:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	2b00      	cmp	r3, #0
 8001938:	d032      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d022      	beq.n	800198c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2205      	movs	r2, #5
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3301      	adds	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	429a      	cmp	r2, r3
 8001968:	d307      	bcc.n	800197a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f2      	bne.n	800195e <HAL_DMA_IRQHandler+0x2ca>
 8001978:	e000      	b.n	800197c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800197a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e000      	b.n	80019a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800199e:	bf00      	nop
    }
  }
}
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop

080019a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b40      	cmp	r3, #64	; 0x40
 80019d4:	d108      	bne.n	80019e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019e6:	e007      	b.n	80019f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3b10      	subs	r3, #16
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <DMA_CalcBaseAndBitshift+0x64>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <DMA_CalcBaseAndBitshift+0x68>)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d909      	bls.n	8001a46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	1d1a      	adds	r2, r3, #4
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	659a      	str	r2, [r3, #88]	; 0x58
 8001a44:	e007      	b.n	8001a56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a4e:	f023 0303 	bic.w	r3, r3, #3
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	aaaaaaab 	.word	0xaaaaaaab
 8001a6c:	08003c90 	.word	0x08003c90

08001a70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d11f      	bne.n	8001aca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d855      	bhi.n	8001b3c <DMA_CheckFifoParam+0xcc>
 8001a90:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <DMA_CheckFifoParam+0x28>)
 8001a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a96:	bf00      	nop
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001abb 	.word	0x08001abb
 8001aa0:	08001aa9 	.word	0x08001aa9
 8001aa4:	08001b3d 	.word	0x08001b3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d045      	beq.n	8001b40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab8:	e042      	b.n	8001b40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ac2:	d13f      	bne.n	8001b44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac8:	e03c      	b.n	8001b44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad2:	d121      	bne.n	8001b18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d836      	bhi.n	8001b48 <DMA_CheckFifoParam+0xd8>
 8001ada:	a201      	add	r2, pc, #4	; (adr r2, 8001ae0 <DMA_CheckFifoParam+0x70>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001af1 	.word	0x08001af1
 8001ae4:	08001af7 	.word	0x08001af7
 8001ae8:	08001af1 	.word	0x08001af1
 8001aec:	08001b09 	.word	0x08001b09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
      break;
 8001af4:	e02f      	b.n	8001b56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d024      	beq.n	8001b4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b06:	e021      	b.n	8001b4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b10:	d11e      	bne.n	8001b50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b16:	e01b      	b.n	8001b50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d902      	bls.n	8001b24 <DMA_CheckFifoParam+0xb4>
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d003      	beq.n	8001b2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b22:	e018      	b.n	8001b56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
      break;
 8001b28:	e015      	b.n	8001b56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00e      	beq.n	8001b54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
      break;
 8001b3a:	e00b      	b.n	8001b54 <DMA_CheckFifoParam+0xe4>
      break;
 8001b3c:	bf00      	nop
 8001b3e:	e00a      	b.n	8001b56 <DMA_CheckFifoParam+0xe6>
      break;
 8001b40:	bf00      	nop
 8001b42:	e008      	b.n	8001b56 <DMA_CheckFifoParam+0xe6>
      break;
 8001b44:	bf00      	nop
 8001b46:	e006      	b.n	8001b56 <DMA_CheckFifoParam+0xe6>
      break;
 8001b48:	bf00      	nop
 8001b4a:	e004      	b.n	8001b56 <DMA_CheckFifoParam+0xe6>
      break;
 8001b4c:	bf00      	nop
 8001b4e:	e002      	b.n	8001b56 <DMA_CheckFifoParam+0xe6>
      break;   
 8001b50:	bf00      	nop
 8001b52:	e000      	b.n	8001b56 <DMA_CheckFifoParam+0xe6>
      break;
 8001b54:	bf00      	nop
    }
  } 
  
  return status; 
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e16b      	b.n	8001e58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 815a 	bne.w	8001e52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d00b      	beq.n	8001bbe <HAL_GPIO_Init+0x5a>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb2:	2b11      	cmp	r3, #17
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b12      	cmp	r3, #18
 8001bbc:	d130      	bne.n	8001c20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 0201 	and.w	r2, r3, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0xfc>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b12      	cmp	r3, #18
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80b4 	beq.w	8001e52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_GPIO_Init+0x308>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a5e      	ldr	r2, [pc, #376]	; (8001e6c <HAL_GPIO_Init+0x308>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b5c      	ldr	r3, [pc, #368]	; (8001e6c <HAL_GPIO_Init+0x308>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d06:	4a5a      	ldr	r2, [pc, #360]	; (8001e70 <HAL_GPIO_Init+0x30c>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a51      	ldr	r2, [pc, #324]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02b      	beq.n	8001d8a <HAL_GPIO_Init+0x226>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_GPIO_Init+0x314>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d025      	beq.n	8001d86 <HAL_GPIO_Init+0x222>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_GPIO_Init+0x318>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01f      	beq.n	8001d82 <HAL_GPIO_Init+0x21e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4e      	ldr	r2, [pc, #312]	; (8001e80 <HAL_GPIO_Init+0x31c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4d      	ldr	r2, [pc, #308]	; (8001e84 <HAL_GPIO_Init+0x320>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x216>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4c      	ldr	r2, [pc, #304]	; (8001e88 <HAL_GPIO_Init+0x324>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x212>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	; (8001e8c <HAL_GPIO_Init+0x328>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x20e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4a      	ldr	r2, [pc, #296]	; (8001e90 <HAL_GPIO_Init+0x32c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x20a>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e00e      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d6e:	2308      	movs	r3, #8
 8001d70:	e00c      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d72:	2306      	movs	r3, #6
 8001d74:	e00a      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d76:	2305      	movs	r3, #5
 8001d78:	e008      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e004      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	f002 0203 	and.w	r2, r2, #3
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	4093      	lsls	r3, r2
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9c:	4934      	ldr	r1, [pc, #208]	; (8001e70 <HAL_GPIO_Init+0x30c>)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dce:	4a31      	ldr	r2, [pc, #196]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dd4:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df8:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e22:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e4c:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b0f      	cmp	r3, #15
 8001e5c:	f67f ae90 	bls.w	8001b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	3724      	adds	r7, #36	; 0x24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40013800 	.word	0x40013800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40021400 	.word	0x40021400
 8001e8c:	40021800 	.word	0x40021800
 8001e90:	40021c00 	.word	0x40021c00
 8001e94:	40013c00 	.word	0x40013c00

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e25b      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d075      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eea:	4ba3      	ldr	r3, [pc, #652]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d00c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef6:	4ba0      	ldr	r3, [pc, #640]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d112      	bne.n	8001f28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f02:	4b9d      	ldr	r3, [pc, #628]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f0e:	d10b      	bne.n	8001f28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	4b99      	ldr	r3, [pc, #612]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d05b      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x108>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d157      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e236      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f30:	d106      	bne.n	8001f40 <HAL_RCC_OscConfig+0x74>
 8001f32:	4b91      	ldr	r3, [pc, #580]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a90      	ldr	r2, [pc, #576]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e01d      	b.n	8001f7c <HAL_RCC_OscConfig+0xb0>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x98>
 8001f4a:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a8a      	ldr	r2, [pc, #552]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a87      	ldr	r2, [pc, #540]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0xb0>
 8001f64:	4b84      	ldr	r3, [pc, #528]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a83      	ldr	r2, [pc, #524]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b81      	ldr	r3, [pc, #516]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a80      	ldr	r2, [pc, #512]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe fb06 	bl	8000594 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe fb02 	bl	8000594 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1fb      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b76      	ldr	r3, [pc, #472]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0xc0>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe faf2 	bl	8000594 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7fe faee 	bl	8000594 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1e7      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xe8>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d063      	beq.n	80020aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe2:	4b65      	ldr	r3, [pc, #404]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b62      	ldr	r3, [pc, #392]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d11c      	bne.n	8002034 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x152>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e1bb      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b56      	ldr	r3, [pc, #344]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4952      	ldr	r1, [pc, #328]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	e03a      	b.n	80020aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203c:	4b4f      	ldr	r3, [pc, #316]	; (800217c <HAL_RCC_OscConfig+0x2b0>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7fe faa7 	bl	8000594 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204a:	f7fe faa3 	bl	8000594 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e19c      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	4b46      	ldr	r3, [pc, #280]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4940      	ldr	r1, [pc, #256]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e015      	b.n	80020aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207e:	4b3f      	ldr	r3, [pc, #252]	; (800217c <HAL_RCC_OscConfig+0x2b0>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fa86 	bl	8000594 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe fa82 	bl	8000594 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e17b      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	4b36      	ldr	r3, [pc, #216]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d030      	beq.n	8002118 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <HAL_RCC_OscConfig+0x2b4>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7fe fa66 	bl	8000594 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020cc:	f7fe fa62 	bl	8000594 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e15b      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x200>
 80020ea:	e015      	b.n	8002118 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_OscConfig+0x2b4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fa4f 	bl	8000594 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fa:	f7fe fa4b 	bl	8000594 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e144      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a0 	beq.w	8002266 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_OscConfig+0x2b8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d121      	bne.n	80021a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_RCC_OscConfig+0x2b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a07      	ldr	r2, [pc, #28]	; (8002184 <HAL_RCC_OscConfig+0x2b8>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe fa11 	bl	8000594 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e011      	b.n	800219a <HAL_RCC_OscConfig+0x2ce>
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	42470000 	.word	0x42470000
 8002180:	42470e80 	.word	0x42470e80
 8002184:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002188:	f7fe fa04 	bl	8000594 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0fd      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x4d4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d106      	bne.n	80021bc <HAL_RCC_OscConfig+0x2f0>
 80021ae:	4b7d      	ldr	r3, [pc, #500]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	4a7c      	ldr	r2, [pc, #496]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ba:	e01c      	b.n	80021f6 <HAL_RCC_OscConfig+0x32a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d10c      	bne.n	80021de <HAL_RCC_OscConfig+0x312>
 80021c4:	4b77      	ldr	r3, [pc, #476]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	4a76      	ldr	r2, [pc, #472]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70
 80021d0:	4b74      	ldr	r3, [pc, #464]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a73      	ldr	r2, [pc, #460]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
 80021dc:	e00b      	b.n	80021f6 <HAL_RCC_OscConfig+0x32a>
 80021de:	4b71      	ldr	r3, [pc, #452]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a70      	ldr	r2, [pc, #448]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ea:	4b6e      	ldr	r3, [pc, #440]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a6d      	ldr	r2, [pc, #436]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d015      	beq.n	800222a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fe:	f7fe f9c9 	bl	8000594 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7fe f9c5 	bl	8000594 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0bc      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ee      	beq.n	8002206 <HAL_RCC_OscConfig+0x33a>
 8002228:	e014      	b.n	8002254 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222a:	f7fe f9b3 	bl	8000594 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe f9af 	bl	8000594 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0a6      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002248:	4b56      	ldr	r3, [pc, #344]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ee      	bne.n	8002232 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225a:	4b52      	ldr	r3, [pc, #328]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 8002260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8092 	beq.w	8002394 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002270:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d05c      	beq.n	8002336 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d141      	bne.n	8002308 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <HAL_RCC_OscConfig+0x4dc>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7fe f983 	bl	8000594 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002292:	f7fe f97f 	bl	8000594 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e078      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	019b      	lsls	r3, r3, #6
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	3b01      	subs	r3, #1
 80022ca:	041b      	lsls	r3, r3, #16
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	061b      	lsls	r3, r3, #24
 80022d4:	4933      	ldr	r1, [pc, #204]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022da:	4b33      	ldr	r3, [pc, #204]	; (80023a8 <HAL_RCC_OscConfig+0x4dc>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe f958 	bl	8000594 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe f954 	bl	8000594 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e04d      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x41c>
 8002306:	e045      	b.n	8002394 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_OscConfig+0x4dc>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe f941 	bl	8000594 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7fe f93d 	bl	8000594 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e036      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x44a>
 8002334:	e02e      	b.n	8002394 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e029      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x4d8>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	429a      	cmp	r2, r3
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d115      	bne.n	8002390 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800236a:	4013      	ands	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002370:	4293      	cmp	r3, r2
 8002372:	d10d      	bne.n	8002390 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d106      	bne.n	8002390 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40007000 	.word	0x40007000
 80023a4:	40023800 	.word	0x40023800
 80023a8:	42470060 	.word	0x42470060

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0cc      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b68      	ldr	r3, [pc, #416]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d90c      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b65      	ldr	r3, [pc, #404]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0b8      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800240a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a52      	ldr	r2, [pc, #328]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b50      	ldr	r3, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	494d      	ldr	r1, [pc, #308]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d044      	beq.n	80024cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d119      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d003      	beq.n	800246a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002466:	2b03      	cmp	r3, #3
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246a:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e067      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248a:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4934      	ldr	r1, [pc, #208]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe f87a 	bl	8000594 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7fe f876 	bl	8000594 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e04f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 020c 	and.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d1eb      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d20c      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e032      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4916      	ldr	r1, [pc, #88]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002532:	f000 f821 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002536:	4601      	mov	r1, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	fa21 f303 	lsr.w	r3, r1, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1c8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd ffda 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00
 8002568:	40023800 	.word	0x40023800
 800256c:	08003c98 	.word	0x08003c98
 8002570:	2000000c 	.word	0x2000000c
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	2300      	movs	r3, #0
 8002588:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258e:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d007      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x32>
 800259a:	2b08      	cmp	r3, #8
 800259c:	d008      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x38>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 808d 	bne.w	80026be <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b4b      	ldr	r3, [pc, #300]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80025a6:	60bb      	str	r3, [r7, #8]
       break;
 80025a8:	e08c      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025aa:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80025ac:	60bb      	str	r3, [r7, #8]
      break;
 80025ae:	e089      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b0:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ba:	4b45      	ldr	r3, [pc, #276]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d023      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c6:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	099b      	lsrs	r3, r3, #6
 80025cc:	f04f 0400 	mov.w	r4, #0
 80025d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	ea03 0501 	and.w	r5, r3, r1
 80025dc:	ea04 0602 	and.w	r6, r4, r2
 80025e0:	4a3d      	ldr	r2, [pc, #244]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80025e2:	fb02 f106 	mul.w	r1, r2, r6
 80025e6:	2200      	movs	r2, #0
 80025e8:	fb02 f205 	mul.w	r2, r2, r5
 80025ec:	440a      	add	r2, r1
 80025ee:	493a      	ldr	r1, [pc, #232]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80025f0:	fba5 0101 	umull	r0, r1, r5, r1
 80025f4:	1853      	adds	r3, r2, r1
 80025f6:	4619      	mov	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	461a      	mov	r2, r3
 8002600:	4623      	mov	r3, r4
 8002602:	f7fd fde1 	bl	80001c8 <__aeabi_uldivmod>
 8002606:	4603      	mov	r3, r0
 8002608:	460c      	mov	r4, r1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e049      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260e:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	f04f 0400 	mov.w	r4, #0
 8002618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	ea03 0501 	and.w	r5, r3, r1
 8002624:	ea04 0602 	and.w	r6, r4, r2
 8002628:	4629      	mov	r1, r5
 800262a:	4632      	mov	r2, r6
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f04f 0400 	mov.w	r4, #0
 8002634:	0154      	lsls	r4, r2, #5
 8002636:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800263a:	014b      	lsls	r3, r1, #5
 800263c:	4619      	mov	r1, r3
 800263e:	4622      	mov	r2, r4
 8002640:	1b49      	subs	r1, r1, r5
 8002642:	eb62 0206 	sbc.w	r2, r2, r6
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	f04f 0400 	mov.w	r4, #0
 800264e:	0194      	lsls	r4, r2, #6
 8002650:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002654:	018b      	lsls	r3, r1, #6
 8002656:	1a5b      	subs	r3, r3, r1
 8002658:	eb64 0402 	sbc.w	r4, r4, r2
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	00e2      	lsls	r2, r4, #3
 8002666:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800266a:	00d9      	lsls	r1, r3, #3
 800266c:	460b      	mov	r3, r1
 800266e:	4614      	mov	r4, r2
 8002670:	195b      	adds	r3, r3, r5
 8002672:	eb44 0406 	adc.w	r4, r4, r6
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	02a2      	lsls	r2, r4, #10
 8002680:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002684:	0299      	lsls	r1, r3, #10
 8002686:	460b      	mov	r3, r1
 8002688:	4614      	mov	r4, r2
 800268a:	4618      	mov	r0, r3
 800268c:	4621      	mov	r1, r4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f04f 0400 	mov.w	r4, #0
 8002694:	461a      	mov	r2, r3
 8002696:	4623      	mov	r3, r4
 8002698:	f7fd fd96 	bl	80001c8 <__aeabi_uldivmod>
 800269c:	4603      	mov	r3, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	3301      	adds	r3, #1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	60bb      	str	r3, [r7, #8]
      break;
 80026bc:	e002      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80026c0:	60bb      	str	r3, [r7, #8]
      break;
 80026c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c4:	68bb      	ldr	r3, [r7, #8]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	00f42400 	.word	0x00f42400
 80026d8:	017d7840 	.word	0x017d7840

080026dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e01d      	b.n	800272a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f001 f9ce 	bl	8003aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f000 f9f0 	bl	8002b00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e01d      	b.n	8002780 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f001 f9c3 	bl	8003ae4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f000 f9c5 	bl	8002b00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fc9a 	bl	80030d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a15      	ldr	r2, [pc, #84]	; (80027fc <HAL_TIM_PWM_Start+0x74>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <HAL_TIM_PWM_Start+0x2c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_TIM_PWM_Start+0x78>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_TIM_PWM_Start+0x30>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_TIM_PWM_Start+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b06      	cmp	r3, #6
 80027de:	d007      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40010000 	.word	0x40010000
 8002800:	40010400 	.word	0x40010400

08002804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800281a:	2302      	movs	r3, #2
 800281c:	e0b4      	b.n	8002988 <HAL_TIM_PWM_ConfigChannel+0x184>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	f200 809f 	bhi.w	8002974 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	08002871 	.word	0x08002871
 8002840:	08002975 	.word	0x08002975
 8002844:	08002975 	.word	0x08002975
 8002848:	08002975 	.word	0x08002975
 800284c:	080028b1 	.word	0x080028b1
 8002850:	08002975 	.word	0x08002975
 8002854:	08002975 	.word	0x08002975
 8002858:	08002975 	.word	0x08002975
 800285c:	080028f3 	.word	0x080028f3
 8002860:	08002975 	.word	0x08002975
 8002864:	08002975 	.word	0x08002975
 8002868:	08002975 	.word	0x08002975
 800286c:	08002933 	.word	0x08002933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f9e2 	bl	8002c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0208 	orr.w	r2, r2, #8
 800288a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0204 	bic.w	r2, r2, #4
 800289a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6999      	ldr	r1, [r3, #24]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	619a      	str	r2, [r3, #24]
      break;
 80028ae:	e062      	b.n	8002976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fa32 	bl	8002d20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6999      	ldr	r1, [r3, #24]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	021a      	lsls	r2, r3, #8
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	619a      	str	r2, [r3, #24]
      break;
 80028f0:	e041      	b.n	8002976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fa87 	bl	8002e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69da      	ldr	r2, [r3, #28]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0208 	orr.w	r2, r2, #8
 800290c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0204 	bic.w	r2, r2, #4
 800291c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69d9      	ldr	r1, [r3, #28]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	61da      	str	r2, [r3, #28]
      break;
 8002930:	e021      	b.n	8002976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fadb 	bl	8002ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69da      	ldr	r2, [r3, #28]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69d9      	ldr	r1, [r3, #28]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	021a      	lsls	r2, r3, #8
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	61da      	str	r2, [r3, #28]
      break;
 8002972:	e000      	b.n	8002976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002974:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_TIM_ConfigClockSource+0x18>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e0a6      	b.n	8002af6 <HAL_TIM_ConfigClockSource+0x166>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b40      	cmp	r3, #64	; 0x40
 80029de:	d067      	beq.n	8002ab0 <HAL_TIM_ConfigClockSource+0x120>
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d80b      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x6c>
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d073      	beq.n	8002ad0 <HAL_TIM_ConfigClockSource+0x140>
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d802      	bhi.n	80029f2 <HAL_TIM_ConfigClockSource+0x62>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d06f      	beq.n	8002ad0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80029f0:	e078      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d06c      	beq.n	8002ad0 <HAL_TIM_ConfigClockSource+0x140>
 80029f6:	2b30      	cmp	r3, #48	; 0x30
 80029f8:	d06a      	beq.n	8002ad0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80029fa:	e073      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029fc:	2b70      	cmp	r3, #112	; 0x70
 80029fe:	d00d      	beq.n	8002a1c <HAL_TIM_ConfigClockSource+0x8c>
 8002a00:	2b70      	cmp	r3, #112	; 0x70
 8002a02:	d804      	bhi.n	8002a0e <HAL_TIM_ConfigClockSource+0x7e>
 8002a04:	2b50      	cmp	r3, #80	; 0x50
 8002a06:	d033      	beq.n	8002a70 <HAL_TIM_ConfigClockSource+0xe0>
 8002a08:	2b60      	cmp	r3, #96	; 0x60
 8002a0a:	d041      	beq.n	8002a90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002a0c:	e06a      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a12:	d066      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0x152>
 8002a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a18:	d017      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a1a:	e063      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6899      	ldr	r1, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f000 fb32 	bl	8003094 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]
      break;
 8002a48:	e04c      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f000 fb1b 	bl	8003094 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a6c:	609a      	str	r2, [r3, #8]
      break;
 8002a6e:	e039      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f000 fa8f 	bl	8002fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2150      	movs	r1, #80	; 0x50
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fae8 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002a8e:	e029      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f000 faae 	bl	8002ffe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2160      	movs	r1, #96	; 0x60
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fad8 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002aae:	e019      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	461a      	mov	r2, r3
 8002abe:	f000 fa6f 	bl	8002fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2140      	movs	r1, #64	; 0x40
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fac8 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002ace:	e009      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f000 fabf 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002ae0:	e000      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a40      	ldr	r2, [pc, #256]	; (8002c14 <TIM_Base_SetConfig+0x114>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <TIM_Base_SetConfig+0x40>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d00f      	beq.n	8002b40 <TIM_Base_SetConfig+0x40>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a3d      	ldr	r2, [pc, #244]	; (8002c18 <TIM_Base_SetConfig+0x118>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <TIM_Base_SetConfig+0x40>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a3c      	ldr	r2, [pc, #240]	; (8002c1c <TIM_Base_SetConfig+0x11c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d007      	beq.n	8002b40 <TIM_Base_SetConfig+0x40>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a3b      	ldr	r2, [pc, #236]	; (8002c20 <TIM_Base_SetConfig+0x120>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <TIM_Base_SetConfig+0x40>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a3a      	ldr	r2, [pc, #232]	; (8002c24 <TIM_Base_SetConfig+0x124>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d108      	bne.n	8002b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a2f      	ldr	r2, [pc, #188]	; (8002c14 <TIM_Base_SetConfig+0x114>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d02b      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b60:	d027      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a2c      	ldr	r2, [pc, #176]	; (8002c18 <TIM_Base_SetConfig+0x118>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d023      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a2b      	ldr	r2, [pc, #172]	; (8002c1c <TIM_Base_SetConfig+0x11c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01f      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <TIM_Base_SetConfig+0x120>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01b      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <TIM_Base_SetConfig+0x124>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d017      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <TIM_Base_SetConfig+0x128>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <TIM_Base_SetConfig+0x12c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00f      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <TIM_Base_SetConfig+0x130>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00b      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <TIM_Base_SetConfig+0x134>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a24      	ldr	r2, [pc, #144]	; (8002c38 <TIM_Base_SetConfig+0x138>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d003      	beq.n	8002bb2 <TIM_Base_SetConfig+0xb2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a23      	ldr	r2, [pc, #140]	; (8002c3c <TIM_Base_SetConfig+0x13c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d108      	bne.n	8002bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <TIM_Base_SetConfig+0x114>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d003      	beq.n	8002bf8 <TIM_Base_SetConfig+0xf8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <TIM_Base_SetConfig+0x124>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d103      	bne.n	8002c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	615a      	str	r2, [r3, #20]
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	40000c00 	.word	0x40000c00
 8002c24:	40010400 	.word	0x40010400
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40014400 	.word	0x40014400
 8002c30:	40014800 	.word	0x40014800
 8002c34:	40001800 	.word	0x40001800
 8002c38:	40001c00 	.word	0x40001c00
 8002c3c:	40002000 	.word	0x40002000

08002c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0201 	bic.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f023 0302 	bic.w	r3, r3, #2
 8002c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <TIM_OC1_SetConfig+0xd8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_OC1_SetConfig+0x64>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <TIM_OC1_SetConfig+0xdc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10c      	bne.n	8002cbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0308 	bic.w	r3, r3, #8
 8002caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f023 0304 	bic.w	r3, r3, #4
 8002cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <TIM_OC1_SetConfig+0xd8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_OC1_SetConfig+0x8e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <TIM_OC1_SetConfig+0xdc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d111      	bne.n	8002cf2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	621a      	str	r2, [r3, #32]
}
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	40010400 	.word	0x40010400

08002d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0210 	bic.w	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0320 	bic.w	r3, r3, #32
 8002d6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a22      	ldr	r2, [pc, #136]	; (8002e04 <TIM_OC2_SetConfig+0xe4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_OC2_SetConfig+0x68>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a21      	ldr	r2, [pc, #132]	; (8002e08 <TIM_OC2_SetConfig+0xe8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d10d      	bne.n	8002da4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <TIM_OC2_SetConfig+0xe4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_OC2_SetConfig+0x94>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a16      	ldr	r2, [pc, #88]	; (8002e08 <TIM_OC2_SetConfig+0xe8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d113      	bne.n	8002ddc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40010000 	.word	0x40010000
 8002e08:	40010400 	.word	0x40010400

08002e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0303 	bic.w	r3, r3, #3
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a21      	ldr	r2, [pc, #132]	; (8002eec <TIM_OC3_SetConfig+0xe0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM_OC3_SetConfig+0x66>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <TIM_OC3_SetConfig+0xe4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10d      	bne.n	8002e8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a16      	ldr	r2, [pc, #88]	; (8002eec <TIM_OC3_SetConfig+0xe0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d003      	beq.n	8002e9e <TIM_OC3_SetConfig+0x92>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <TIM_OC3_SetConfig+0xe4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d113      	bne.n	8002ec6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	031b      	lsls	r3, r3, #12
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <TIM_OC4_SetConfig+0xa4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_OC4_SetConfig+0x68>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <TIM_OC4_SetConfig+0xa8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d109      	bne.n	8002f70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0201 	bic.w	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 030a 	bic.w	r3, r3, #10
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b087      	sub	sp, #28
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0210 	bic.w	r2, r3, #16
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	031b      	lsls	r3, r3, #12
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800303a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	f043 0307 	orr.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	021a      	lsls	r2, r3, #8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2201      	movs	r2, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003134:	2302      	movs	r3, #2
 8003136:	e05a      	b.n	80031ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d01d      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d018      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00e      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10c      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40010400 	.word	0x40010400
 8003210:	40014000 	.word	0x40014000
 8003214:	40001800 	.word	0x40001800

08003218 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800321e:	463b      	mov	r3, r7
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800322a:	4b37      	ldr	r3, [pc, #220]	; (8003308 <MX_ADC1_Init+0xf0>)
 800322c:	4a37      	ldr	r2, [pc, #220]	; (800330c <MX_ADC1_Init+0xf4>)
 800322e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003230:	4b35      	ldr	r3, [pc, #212]	; (8003308 <MX_ADC1_Init+0xf0>)
 8003232:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003236:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003238:	4b33      	ldr	r3, [pc, #204]	; (8003308 <MX_ADC1_Init+0xf0>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800323e:	4b32      	ldr	r3, [pc, #200]	; (8003308 <MX_ADC1_Init+0xf0>)
 8003240:	2201      	movs	r2, #1
 8003242:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003244:	4b30      	ldr	r3, [pc, #192]	; (8003308 <MX_ADC1_Init+0xf0>)
 8003246:	2201      	movs	r2, #1
 8003248:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800324a:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <MX_ADC1_Init+0xf0>)
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <MX_ADC1_Init+0xf0>)
 8003254:	2200      	movs	r2, #0
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <MX_ADC1_Init+0xf0>)
 800325a:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <MX_ADC1_Init+0xf8>)
 800325c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800325e:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <MX_ADC1_Init+0xf0>)
 8003260:	2200      	movs	r2, #0
 8003262:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003264:	4b28      	ldr	r3, [pc, #160]	; (8003308 <MX_ADC1_Init+0xf0>)
 8003266:	2204      	movs	r2, #4
 8003268:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <MX_ADC1_Init+0xf0>)
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003272:	4b25      	ldr	r3, [pc, #148]	; (8003308 <MX_ADC1_Init+0xf0>)
 8003274:	2201      	movs	r2, #1
 8003276:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003278:	4823      	ldr	r0, [pc, #140]	; (8003308 <MX_ADC1_Init+0xf0>)
 800327a:	f7fd f9b9 	bl	80005f0 <HAL_ADC_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003284:	f000 faea 	bl	800385c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003288:	2306      	movs	r3, #6
 800328a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800328c:	2301      	movs	r3, #1
 800328e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003290:	2301      	movs	r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003294:	463b      	mov	r3, r7
 8003296:	4619      	mov	r1, r3
 8003298:	481b      	ldr	r0, [pc, #108]	; (8003308 <MX_ADC1_Init+0xf0>)
 800329a:	f7fd fafd 	bl	8000898 <HAL_ADC_ConfigChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80032a4:	f000 fada 	bl	800385c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80032a8:	2307      	movs	r3, #7
 80032aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80032ac:	2302      	movs	r3, #2
 80032ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032b0:	463b      	mov	r3, r7
 80032b2:	4619      	mov	r1, r3
 80032b4:	4814      	ldr	r0, [pc, #80]	; (8003308 <MX_ADC1_Init+0xf0>)
 80032b6:	f7fd faef 	bl	8000898 <HAL_ADC_ConfigChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80032c0:	f000 facc 	bl	800385c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80032c4:	2301      	movs	r3, #1
 80032c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80032c8:	2303      	movs	r3, #3
 80032ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032d0:	463b      	mov	r3, r7
 80032d2:	4619      	mov	r1, r3
 80032d4:	480c      	ldr	r0, [pc, #48]	; (8003308 <MX_ADC1_Init+0xf0>)
 80032d6:	f7fd fadf 	bl	8000898 <HAL_ADC_ConfigChannel>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80032e0:	f000 fabc 	bl	800385c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80032e4:	2302      	movs	r3, #2
 80032e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80032e8:	2304      	movs	r3, #4
 80032ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032ec:	463b      	mov	r3, r7
 80032ee:	4619      	mov	r1, r3
 80032f0:	4805      	ldr	r0, [pc, #20]	; (8003308 <MX_ADC1_Init+0xf0>)
 80032f2:	f7fd fad1 	bl	8000898 <HAL_ADC_ConfigChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80032fc:	f000 faae 	bl	800385c <Error_Handler>
  }

}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000030 	.word	0x20000030
 800330c:	40012000 	.word	0x40012000
 8003310:	0f000001 	.word	0x0f000001

08003314 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2f      	ldr	r2, [pc, #188]	; (80033f0 <HAL_ADC_MspInit+0xdc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d157      	bne.n	80033e6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <HAL_ADC_MspInit+0xe0>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	4a2d      	ldr	r2, [pc, #180]	; (80033f4 <HAL_ADC_MspInit+0xe0>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6453      	str	r3, [r2, #68]	; 0x44
 8003346:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_ADC_MspInit+0xe0>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_ADC_MspInit+0xe0>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_ADC_MspInit+0xe0>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <HAL_ADC_MspInit+0xe0>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 800336e:	23c6      	movs	r3, #198	; 0xc6
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003372:	2303      	movs	r3, #3
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	4619      	mov	r1, r3
 8003380:	481d      	ldr	r0, [pc, #116]	; (80033f8 <HAL_ADC_MspInit+0xe4>)
 8003382:	f7fe fbef 	bl	8001b64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_ADC_MspInit+0xec>)
 800338a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 800338e:	2200      	movs	r2, #0
 8003390:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003398:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 80033a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 80033a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 80033b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 80033b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033ca:	480c      	ldr	r0, [pc, #48]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 80033cc:	f7fe f85c 	bl	8001488 <HAL_DMA_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80033d6:	f000 fa41 	bl	800385c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a07      	ldr	r2, [pc, #28]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
 80033e0:	4a06      	ldr	r2, [pc, #24]	; (80033fc <HAL_ADC_MspInit+0xe8>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80033e6:	bf00      	nop
 80033e8:	3728      	adds	r7, #40	; 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40012000 	.word	0x40012000
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	20000078 	.word	0x20000078
 8003400:	40026410 	.word	0x40026410

08003404 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8003408:	4b18      	ldr	r3, [pc, #96]	; (800346c <MX_CAN1_Init+0x68>)
 800340a:	4a19      	ldr	r2, [pc, #100]	; (8003470 <MX_CAN1_Init+0x6c>)
 800340c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <MX_CAN1_Init+0x68>)
 8003410:	2215      	movs	r2, #21
 8003412:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <MX_CAN1_Init+0x68>)
 8003416:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800341a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <MX_CAN1_Init+0x68>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <MX_CAN1_Init+0x68>)
 8003424:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003428:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <MX_CAN1_Init+0x68>)
 800342c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003430:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <MX_CAN1_Init+0x68>)
 8003434:	2200      	movs	r2, #0
 8003436:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <MX_CAN1_Init+0x68>)
 800343a:	2200      	movs	r2, #0
 800343c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <MX_CAN1_Init+0x68>)
 8003440:	2200      	movs	r2, #0
 8003442:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <MX_CAN1_Init+0x68>)
 8003446:	2201      	movs	r2, #1
 8003448:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <MX_CAN1_Init+0x68>)
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <MX_CAN1_Init+0x68>)
 8003452:	2200      	movs	r2, #0
 8003454:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003456:	4805      	ldr	r0, [pc, #20]	; (800346c <MX_CAN1_Init+0x68>)
 8003458:	f7fd fcbe 	bl	8000dd8 <HAL_CAN_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8003462:	f000 f9fb 	bl	800385c <Error_Handler>
  }

}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000134 	.word	0x20000134
 8003470:	40006400 	.word	0x40006400

08003474 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_CAN_MspInit+0xa8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d13d      	bne.n	8003512 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_CAN_MspInit+0xac>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a20      	ldr	r2, [pc, #128]	; (8003520 <HAL_CAN_MspInit+0xac>)
 80034a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_CAN_MspInit+0xac>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_CAN_MspInit+0xac>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a19      	ldr	r2, [pc, #100]	; (8003520 <HAL_CAN_MspInit+0xac>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_CAN_MspInit+0xac>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034d8:	2302      	movs	r3, #2
 80034da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80034e0:	2309      	movs	r3, #9
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	480e      	ldr	r0, [pc, #56]	; (8003524 <HAL_CAN_MspInit+0xb0>)
 80034ec:	f7fe fb3a 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fe:	2303      	movs	r3, #3
 8003500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003502:	2309      	movs	r3, #9
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003506:	f107 0314 	add.w	r3, r7, #20
 800350a:	4619      	mov	r1, r3
 800350c:	4805      	ldr	r0, [pc, #20]	; (8003524 <HAL_CAN_MspInit+0xb0>)
 800350e:	f7fe fb29 	bl	8001b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003512:	bf00      	nop
 8003514:	3728      	adds	r7, #40	; 0x28
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40006400 	.word	0x40006400
 8003520:	40023800 	.word	0x40023800
 8003524:	40020000 	.word	0x40020000

08003528 <config_filter_0>:
/* USER CODE BEGIN 1 */

/*******************************************************************************
 KONFIGURACJA FILTROW
 *******************************************************************************/
void config_filter_0(void) {
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
	filter_0.FilterBank = 0;
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <config_filter_0+0x4c>)
 800352e:	2200      	movs	r2, #0
 8003530:	615a      	str	r2, [r3, #20]
	filter_0.FilterMode = CAN_FILTERMODE_IDMASK;
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <config_filter_0+0x4c>)
 8003534:	2200      	movs	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
	filter_0.FilterScale = CAN_FILTERSCALE_32BIT;
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <config_filter_0+0x4c>)
 800353a:	2201      	movs	r2, #1
 800353c:	61da      	str	r2, [r3, #28]
	filter_0.FilterIdHigh = 0x0000;			//0x321 << 5;
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <config_filter_0+0x4c>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
	filter_0.FilterIdLow = 0x0000;				//0x00000000;
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <config_filter_0+0x4c>)
 8003546:	2200      	movs	r2, #0
 8003548:	605a      	str	r2, [r3, #4]
	filter_0.FilterMaskIdHigh = 0x0000;		//0x111 << 5;
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <config_filter_0+0x4c>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
	filter_0.FilterMaskIdLow = 0x0000;			//0x00000000;
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <config_filter_0+0x4c>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
	filter_0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <config_filter_0+0x4c>)
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
	filter_0.FilterActivation = ENABLE;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <config_filter_0+0x4c>)
 800355e:	2201      	movs	r2, #1
 8003560:	621a      	str	r2, [r3, #32]
	filter_0.SlaveStartFilterBank = 14;
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <config_filter_0+0x4c>)
 8003564:	220e      	movs	r2, #14
 8003566:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000104 	.word	0x20000104

08003578 <can1_init>:

/*******************************************************************************
 	 START PERYFERIUM
 *******************************************************************************/
void can1_init() {
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
	if (HAL_CAN_ConfigFilter(&hcan1, &filter_0) != HAL_OK) {
 800357c:	490d      	ldr	r1, [pc, #52]	; (80035b4 <can1_init+0x3c>)
 800357e:	480e      	ldr	r0, [pc, #56]	; (80035b8 <can1_init+0x40>)
 8003580:	f7fd fd26 	bl	8000fd0 <HAL_CAN_ConfigFilter>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <can1_init+0x16>
		Error_Handler();
 800358a:	f000 f967 	bl	800385c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800358e:	480a      	ldr	r0, [pc, #40]	; (80035b8 <can1_init+0x40>)
 8003590:	f7fd fdfe 	bl	8001190 <HAL_CAN_Start>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <can1_init+0x26>
		Error_Handler();
 800359a:	f000 f95f 	bl	800385c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1,
 800359e:	2103      	movs	r1, #3
 80035a0:	4805      	ldr	r0, [pc, #20]	; (80035b8 <can1_init+0x40>)
 80035a2:	f7fd fe39 	bl	8001218 <HAL_CAN_ActivateNotification>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <can1_init+0x38>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 80035ac:	f000 f956 	bl	800385c <Error_Handler>
	}
}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000104 	.word	0x20000104
 80035b8:	20000134 	.word	0x20000134

080035bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <MX_DMA_Init+0x3c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <MX_DMA_Init+0x3c>)
 80035cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <MX_DMA_Init+0x3c>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	2038      	movs	r0, #56	; 0x38
 80035e4:	f7fd ff19 	bl	800141a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80035e8:	2038      	movs	r0, #56	; 0x38
 80035ea:	f7fd ff32 	bl	8001452 <HAL_NVIC_EnableIRQ>

}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800

080035fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a36      	ldr	r2, [pc, #216]	; (80036f4 <MX_GPIO_Init+0xf8>)
 800361c:	f043 0310 	orr.w	r3, r3, #16
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b34      	ldr	r3, [pc, #208]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a2f      	ldr	r2, [pc, #188]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003638:	f043 0304 	orr.w	r3, r3, #4
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a28      	ldr	r2, [pc, #160]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <MX_GPIO_Init+0xf8>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <MX_GPIO_Init+0xf8>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	4a1a      	ldr	r2, [pc, #104]	; (80036f4 <MX_GPIO_Init+0xf8>)
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <MX_GPIO_Init+0xf8>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800369e:	2200      	movs	r2, #0
 80036a0:	2170      	movs	r1, #112	; 0x70
 80036a2:	4815      	ldr	r0, [pc, #84]	; (80036f8 <MX_GPIO_Init+0xfc>)
 80036a4:	f7fe fbf8 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2101      	movs	r1, #1
 80036ac:	4813      	ldr	r0, [pc, #76]	; (80036fc <MX_GPIO_Init+0x100>)
 80036ae:	f7fe fbf3 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80036b2:	2370      	movs	r3, #112	; 0x70
 80036b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036c2:	f107 0314 	add.w	r3, r7, #20
 80036c6:	4619      	mov	r1, r3
 80036c8:	480b      	ldr	r0, [pc, #44]	; (80036f8 <MX_GPIO_Init+0xfc>)
 80036ca:	f7fe fa4b 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036ce:	2301      	movs	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d2:	2301      	movs	r3, #1
 80036d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036de:	f107 0314 	add.w	r3, r7, #20
 80036e2:	4619      	mov	r1, r3
 80036e4:	4805      	ldr	r0, [pc, #20]	; (80036fc <MX_GPIO_Init+0x100>)
 80036e6:	f7fe fa3d 	bl	8001b64 <HAL_GPIO_Init>

}
 80036ea:	bf00      	nop
 80036ec:	3728      	adds	r7, #40	; 0x28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40020400 	.word	0x40020400

08003700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003704:	f7fc fee0 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003708:	f000 f83e 	bl	8003788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800370c:	f7ff ff76 	bl	80035fc <MX_GPIO_Init>
  MX_DMA_Init();
 8003710:	f7ff ff54 	bl	80035bc <MX_DMA_Init>
  MX_TIM3_Init();
 8003714:	f000 f96c 	bl	80039f0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003718:	f7ff fd7e 	bl	8003218 <MX_ADC1_Init>
  MX_CAN1_Init();
 800371c:	f7ff fe72 	bl	8003404 <MX_CAN1_Init>
  MX_TIM2_Init();
 8003720:	f000 f91a 	bl	8003958 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  config_filter_0();
 8003724:	f7ff ff00 	bl	8003528 <config_filter_0>
  can1_init();
 8003728:	f7ff ff26 	bl	8003578 <can1_init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); 			//MCU_PWM
 800372c:	210c      	movs	r1, #12
 800372e:	4810      	ldr	r0, [pc, #64]	; (8003770 <main+0x70>)
 8003730:	f7ff f82a 	bl	8002788 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);	//MCU_PWM_EN Register
 8003734:	2201      	movs	r2, #1
 8003736:	2101      	movs	r1, #1
 8003738:	480e      	ldr	r0, [pc, #56]	; (8003774 <main+0x74>)
 800373a:	f7fe fbad 	bl	8001e98 <HAL_GPIO_WritePin>
  TIM3->CCR4 = DutyCycle;										//Duty - max value 670
 800373e:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <main+0x78>)
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <main+0x7c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6413      	str	r3, [r2, #64]	; 0x40


  HAL_ADC_Start_DMA(&hadc1, value, 4);
 8003746:	2204      	movs	r2, #4
 8003748:	490d      	ldr	r1, [pc, #52]	; (8003780 <main+0x80>)
 800374a:	480e      	ldr	r0, [pc, #56]	; (8003784 <main+0x84>)
 800374c:	f7fc ff94 	bl	8000678 <HAL_ADC_Start_DMA>

	  HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  setGreenState();
 8003750:	f000 fa24 	bl	8003b9c <setGreenState>
	  HAL_Delay(1000);
 8003754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003758:	f7fc ff28 	bl	80005ac <HAL_Delay>
	  resetGreenState();
 800375c:	f000 fa2a 	bl	8003bb4 <resetGreenState>
	  HAL_Delay(1000);
 8003760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003764:	f7fc ff22 	bl	80005ac <HAL_Delay>
	  setGreenState();
 8003768:	f000 fa18 	bl	8003b9c <setGreenState>
	  setGreenState();
 800376c:	e7f0      	b.n	8003750 <main+0x50>
 800376e:	bf00      	nop
 8003770:	20000198 	.word	0x20000198
 8003774:	40020400 	.word	0x40020400
 8003778:	40000400 	.word	0x40000400
 800377c:	20000008 	.word	0x20000008
 8003780:	20000188 	.word	0x20000188
 8003784:	20000030 	.word	0x20000030

08003788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b094      	sub	sp, #80	; 0x50
 800378c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800378e:	f107 0320 	add.w	r3, r7, #32
 8003792:	2230      	movs	r2, #48	; 0x30
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fa66 	bl	8003c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800379c:	f107 030c 	add.w	r3, r7, #12
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <SystemClock_Config+0xcc>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	4a27      	ldr	r2, [pc, #156]	; (8003854 <SystemClock_Config+0xcc>)
 80037b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ba:	6413      	str	r3, [r2, #64]	; 0x40
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <SystemClock_Config+0xcc>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	4b22      	ldr	r3, [pc, #136]	; (8003858 <SystemClock_Config+0xd0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a21      	ldr	r2, [pc, #132]	; (8003858 <SystemClock_Config+0xd0>)
 80037d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <SystemClock_Config+0xd0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037e4:	2302      	movs	r3, #2
 80037e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037e8:	2301      	movs	r3, #1
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037ec:	2310      	movs	r3, #16
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f0:	2302      	movs	r3, #2
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037f4:	2300      	movs	r3, #0
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037f8:	2308      	movs	r3, #8
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80037fc:	23a8      	movs	r3, #168	; 0xa8
 80037fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003800:	2302      	movs	r3, #2
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003804:	2304      	movs	r3, #4
 8003806:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003808:	f107 0320 	add.w	r3, r7, #32
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe fb5d 	bl	8001ecc <HAL_RCC_OscConfig>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003818:	f000 f820 	bl	800385c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800381c:	230f      	movs	r3, #15
 800381e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003820:	2302      	movs	r3, #2
 8003822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003828:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800382c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800382e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003832:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	2105      	movs	r1, #5
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe fdb6 	bl	80023ac <HAL_RCC_ClockConfig>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003846:	f000 f809 	bl	800385c <Error_Handler>
  }
}
 800384a:	bf00      	nop
 800384c:	3750      	adds	r7, #80	; 0x50
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000

0800385c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_MspInit+0x4c>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <HAL_MspInit+0x4c>)
 800387c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_MspInit+0x4c>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_MspInit+0x4c>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <HAL_MspInit+0x4c>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_MspInit+0x4c>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800

080038bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ce:	e7fe      	b.n	80038ce <HardFault_Handler+0x4>

080038d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <MemManage_Handler+0x4>

080038d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038da:	e7fe      	b.n	80038da <BusFault_Handler+0x4>

080038dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <UsageFault_Handler+0x4>

080038e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038fe:	b480      	push	{r7}
 8003900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003910:	f7fc fe2c 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}

08003918 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <DMA2_Stream0_IRQHandler+0x10>)
 800391e:	f7fd feb9 	bl	8001694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000078 	.word	0x20000078

0800392c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <SystemInit+0x28>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	4a07      	ldr	r2, [pc, #28]	; (8003954 <SystemInit+0x28>)
 8003938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800393c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <SystemInit+0x28>)
 8003942:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003946:	609a      	str	r2, [r3, #8]
#endif
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800395e:	f107 0308 	add.w	r3, r7, #8
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800396c:	463b      	mov	r3, r7
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <MX_TIM2_Init+0x94>)
 8003976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800397a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <MX_TIM2_Init+0x94>)
 800397e:	2254      	movs	r2, #84	; 0x54
 8003980:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <MX_TIM2_Init+0x94>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <MX_TIM2_Init+0x94>)
 800398a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800398e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003990:	4b16      	ldr	r3, [pc, #88]	; (80039ec <MX_TIM2_Init+0x94>)
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <MX_TIM2_Init+0x94>)
 8003998:	2200      	movs	r2, #0
 800399a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800399c:	4813      	ldr	r0, [pc, #76]	; (80039ec <MX_TIM2_Init+0x94>)
 800399e:	f7fe fe9d 	bl	80026dc <HAL_TIM_Base_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80039a8:	f7ff ff58 	bl	800385c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	4619      	mov	r1, r3
 80039b8:	480c      	ldr	r0, [pc, #48]	; (80039ec <MX_TIM2_Init+0x94>)
 80039ba:	f7fe ffe9 	bl	8002990 <HAL_TIM_ConfigClockSource>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80039c4:	f7ff ff4a 	bl	800385c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039d0:	463b      	mov	r3, r7
 80039d2:	4619      	mov	r1, r3
 80039d4:	4805      	ldr	r0, [pc, #20]	; (80039ec <MX_TIM2_Init+0x94>)
 80039d6:	f7ff fba3 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80039e0:	f7ff ff3c 	bl	800385c <Error_Handler>
  }

}
 80039e4:	bf00      	nop
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200001d8 	.word	0x200001d8

080039f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f6:	f107 0320 	add.w	r3, r7, #32
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	615a      	str	r2, [r3, #20]
 8003a10:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a14:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <MX_TIM3_Init+0xb0>)
 8003a16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1e:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a26:	f240 3247 	movw	r2, #839	; 0x347
 8003a2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a38:	4818      	ldr	r0, [pc, #96]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a3a:	f7fe fe7a 	bl	8002732 <HAL_TIM_PWM_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003a44:	f7ff ff0a 	bl	800385c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a50:	f107 0320 	add.w	r3, r7, #32
 8003a54:	4619      	mov	r1, r3
 8003a56:	4811      	ldr	r0, [pc, #68]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a58:	f7ff fb62 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003a62:	f7ff fefb 	bl	800385c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a66:	2360      	movs	r3, #96	; 0x60
 8003a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 670;
 8003a6a:	f240 239e 	movw	r3, #670	; 0x29e
 8003a6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4807      	ldr	r0, [pc, #28]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a80:	f7fe fec0 	bl	8002804 <HAL_TIM_PWM_ConfigChannel>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003a8a:	f7ff fee7 	bl	800385c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003a8e:	4803      	ldr	r0, [pc, #12]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a90:	f000 f84a 	bl	8003b28 <HAL_TIM_MspPostInit>

}
 8003a94:	bf00      	nop
 8003a96:	3728      	adds	r7, #40	; 0x28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000198 	.word	0x20000198
 8003aa0:	40000400 	.word	0x40000400

08003aa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800

08003ae4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <HAL_TIM_PWM_MspInit+0x3c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10d      	bne.n	8003b12 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_TIM_PWM_MspInit+0x40>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <HAL_TIM_PWM_MspInit+0x40>)
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <HAL_TIM_PWM_MspInit+0x40>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 030c 	add.w	r3, r7, #12
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <HAL_TIM_MspPostInit+0x68>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d11d      	bne.n	8003b86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_TIM_MspPostInit+0x6c>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_TIM_MspPostInit+0x6c>)
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_TIM_MspPostInit+0x6c>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b66:	2302      	movs	r3, #2
 8003b68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b76:	2302      	movs	r3, #2
 8003b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	f107 030c 	add.w	r3, r7, #12
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4805      	ldr	r0, [pc, #20]	; (8003b98 <HAL_TIM_MspPostInit+0x70>)
 8003b82:	f7fd ffef 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b86:	bf00      	nop
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40020400 	.word	0x40020400

08003b9c <setGreenState>:
}
void resetRedState(void){
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
}

void setGreenState(void){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	2140      	movs	r1, #64	; 0x40
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <setGreenState+0x14>)
 8003ba6:	f7fe f977 	bl	8001e98 <HAL_GPIO_WritePin>
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <resetGreenState>:
void resetGreenState(void){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <resetGreenState+0x14>)
 8003bbe:	f7fe f96b 	bl	8001e98 <HAL_GPIO_WritePin>
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000

08003bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003bd2:	e003      	b.n	8003bdc <LoopCopyDataInit>

08003bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bda:	3104      	adds	r1, #4

08003bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bdc:	480b      	ldr	r0, [pc, #44]	; (8003c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003be4:	d3f6      	bcc.n	8003bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8003be6:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003be8:	e002      	b.n	8003bf0 <LoopFillZerobss>

08003bea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003bec:	f842 3b04 	str.w	r3, [r2], #4

08003bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bf4:	d3f9      	bcc.n	8003bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bf6:	f7ff fe99 	bl	800392c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bfa:	f000 f811 	bl	8003c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bfe:	f7ff fd7f 	bl	8003700 <main>
  bx  lr    
 8003c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c08:	08003cb8 	.word	0x08003cb8
  ldr  r0, =_sdata
 8003c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c10:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003c14:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003c18:	20000218 	.word	0x20000218

08003c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c1c:	e7fe      	b.n	8003c1c <ADC_IRQHandler>
	...

08003c20 <__libc_init_array>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4e0d      	ldr	r6, [pc, #52]	; (8003c58 <__libc_init_array+0x38>)
 8003c24:	4c0d      	ldr	r4, [pc, #52]	; (8003c5c <__libc_init_array+0x3c>)
 8003c26:	1ba4      	subs	r4, r4, r6
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	42a5      	cmp	r5, r4
 8003c2e:	d109      	bne.n	8003c44 <__libc_init_array+0x24>
 8003c30:	4e0b      	ldr	r6, [pc, #44]	; (8003c60 <__libc_init_array+0x40>)
 8003c32:	4c0c      	ldr	r4, [pc, #48]	; (8003c64 <__libc_init_array+0x44>)
 8003c34:	f000 f820 	bl	8003c78 <_init>
 8003c38:	1ba4      	subs	r4, r4, r6
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	2500      	movs	r5, #0
 8003c3e:	42a5      	cmp	r5, r4
 8003c40:	d105      	bne.n	8003c4e <__libc_init_array+0x2e>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c48:	4798      	blx	r3
 8003c4a:	3501      	adds	r5, #1
 8003c4c:	e7ee      	b.n	8003c2c <__libc_init_array+0xc>
 8003c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c52:	4798      	blx	r3
 8003c54:	3501      	adds	r5, #1
 8003c56:	e7f2      	b.n	8003c3e <__libc_init_array+0x1e>
 8003c58:	08003cb0 	.word	0x08003cb0
 8003c5c:	08003cb0 	.word	0x08003cb0
 8003c60:	08003cb0 	.word	0x08003cb0
 8003c64:	08003cb4 	.word	0x08003cb4

08003c68 <memset>:
 8003c68:	4402      	add	r2, r0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d100      	bne.n	8003c72 <memset+0xa>
 8003c70:	4770      	bx	lr
 8003c72:	f803 1b01 	strb.w	r1, [r3], #1
 8003c76:	e7f9      	b.n	8003c6c <memset+0x4>

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
